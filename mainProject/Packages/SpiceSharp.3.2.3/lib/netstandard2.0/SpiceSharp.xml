<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpiceSharp</name>
    </assembly>
    <members>
        <member name="T:SpiceSharp.Algebra.Element`1">
            <summary>
            A description of a matrix element.
            </summary>
            <typeparam name="T">The base type.</typeparam>
        </member>
        <member name="P:SpiceSharp.Algebra.Element`1.Addition">
            <summary>
            Generic addition.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.Element`1.Subtraction">
            <summary>
            Generic subtraction.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.Element`1.Value">
            <summary>
            Gets or sets the value of the matrix element.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:SpiceSharp.Algebra.Element`1.ToString">
            <summary>
            Converts to string.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.Element`1.Add(`0)">
            <summary>
            Adds the specified value to the element.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.Element`1.Subtract(`0)">
            <summary>
            Subtracts the specified value from the element.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.Element`1.CompileDefaultAddition">
            <summary>
            Create a default addition of the generic type.
            </summary>
            <returns>The function that describes the addition.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.Element`1.CompileDefaultSubtraction">
            <summary>
            Creates a default subtraction of the generic type.
            </summary>
            <returns>The function that describes subtraction.</returns>
        </member>
        <member name="T:SpiceSharp.Algebra.ElementSet`1">
            <summary>
            A set of matrix and right-hand-side vector elements
            </summary>
            <typeparam name="T">The base type.</typeparam>
        </member>
        <member name="M:SpiceSharp.Algebra.ElementSet`1.#ctor(SpiceSharp.Algebra.ISparseSolver{`0},SpiceSharp.Algebra.MatrixLocation[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.ElementSet`1"/> class.
            </summary>
            <param name="solver">The solver.</param>
            <param name="matrixPins">The Y-matrix indices.</param>
            <param name="rhsPins">The right-hand side vector indices.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="solver"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.ElementSet`1.#ctor(SpiceSharp.Algebra.ISparseSolver{`0},SpiceSharp.Algebra.MatrixLocation[])">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.ElementSet`1"/> class.
            </summary>
            <param name="solver">The solver.</param>
            <param name="matrixPins">The matrix pins.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="solver"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.ElementSet`1.#ctor(SpiceSharp.Algebra.ISparseSolver{`0},System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.ElementSet`1"/> class.
            </summary>
            <param name="solver">The solver.</param>
            <param name="rhsPins">The RHS pins.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="solver"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.ElementSet`1.Add(`0[])">
            <summary>
            Adds the specified values to each element. First come
            the matrix elements, then the RHS vector elements.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.ElementSet`1.Subtract(`0[])">
            <summary>
            Subtracts the specified values. First come
            the matrix elements, then the RHS vector elements.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.ElementSet`1.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:SpiceSharp.Algebra.MatrixLocation">
            <summary>
            A simple struct for describing a matrix row/column location.
            </summary>
        </member>
        <member name="F:SpiceSharp.Algebra.MatrixLocation.Row">
            <summary>
            The row index.
            </summary>
        </member>
        <member name="F:SpiceSharp.Algebra.MatrixLocation.Column">
            <summary>
            The column index.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.MatrixLocation.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.MatrixLocation"/> struct.
            </summary>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="row"/> or <paramref name="column"/> is not positive.
            </exception>
        </member>
        <member name="M:SpiceSharp.Algebra.MatrixLocation.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.MatrixLocation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.MatrixLocation.Equals(SpiceSharp.Algebra.MatrixLocation)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.MatrixLocation.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.MatrixLocation.op_Equality(SpiceSharp.Algebra.MatrixLocation,SpiceSharp.Algebra.MatrixLocation)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left argument.</param>
            <param name="right">The right argument.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.MatrixLocation.op_Inequality(SpiceSharp.Algebra.MatrixLocation,SpiceSharp.Algebra.MatrixLocation)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left argument.</param>
            <param name="right">The right argument.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:SpiceSharp.Algebra.DenseMatrix`1">
            <summary>
            A square matrix using a dense representation.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <seealso cref="T:SpiceSharp.Algebra.IMatrix`1"/>
        </member>
        <member name="P:SpiceSharp.Algebra.DenseMatrix`1.Size">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.DenseMatrix`1.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.DenseMatrix`1.Item(SpiceSharp.Algebra.MatrixLocation)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseMatrix`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.DenseMatrix`1"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseMatrix`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.DenseMatrix`1"/> class.
            </summary>
            <param name="size">The matrix size.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="size"/> is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseMatrix`1.SwapRows(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseMatrix`1.SwapColumns(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseMatrix`1.Reset">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseMatrix`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseMatrix`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:SpiceSharp.Algebra.IMatrix`1">
            <summary>
            Describes a matrix.
            </summary>
            <typeparam name="T">The base type.</typeparam>
        </member>
        <member name="P:SpiceSharp.Algebra.IMatrix`1.Size">
            <summary>
            Gets the size of the matrix.
            </summary>
            <value>
            The matrix size.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.IMatrix`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the value at the specified row and column.
            </summary>
            <value>
            The value.
            </value>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <returns>The value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="row"/> or <paramref name="column"/> is not positive.
            </exception>
        </member>
        <member name="P:SpiceSharp.Algebra.IMatrix`1.Item(SpiceSharp.Algebra.MatrixLocation)">
            <summary>
            Gets or sets the value at the specified location.
            </summary>
            <value>
            The value.
            </value>
            <param name="location">The location.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.IMatrix`1.SwapRows(System.Int32,System.Int32)">
            <summary>
            Swaps two rows in the matrix.
            </summary>
            <param name="row1">The first row index.</param>
            <param name="row2">The second row index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="row1"/> or <paramref name="row2"/> is not greater than 0.
            </exception>
        </member>
        <member name="M:SpiceSharp.Algebra.IMatrix`1.SwapColumns(System.Int32,System.Int32)">
            <summary>
            Swaps two columns in the matrix.
            </summary>
            <param name="column1">The first column index.</param>
            <param name="column2">The second column index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="column1"/> or <paramref name="column2"/> is not greater than 0.
            </exception>
        </member>
        <member name="M:SpiceSharp.Algebra.IMatrix`1.Reset">
            <summary>
            Resets all elements in the matrix to their default value.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.IMatrix`1.Clear">
            <summary>
            Clears the matrix of any elements. The size of the matrix becomes 0.
            </summary>
        </member>
        <member name="T:SpiceSharp.Algebra.SparseMatrix`1">
            <summary>
            A square matrix that uses a sparse storage method with doubly-linked elements.
            </summary>
            <remarks>
            <para>The elements in row and column with index 0 are considered trashcan elements. They
            should all map on the same element.</para>
            <para>The matrix automatically expands size if necessary.</para>
            </remarks>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="T:SpiceSharp.Algebra.SparseMatrix`1.Column">
            <summary>
            A class that keeps track of a linked list of matrix elements for a column.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.Column.FirstInColumn">
            <summary>
            Gets the first element in the column.
            </summary>
            <value>
            The first element in the column.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.Column.LastInColumn">
            <summary>
            Gets the last element in the column.
            </summary>
            <value>
            The last element in the column.
            </value>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.Column.Insert(SpiceSharp.Algebra.SparseMatrix{`0}.Element)">
            <summary>
            Insert an element in the column. This method assumes an element does not exist at its indices!
            </summary>
            <param name="newElement">The new element to insert.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="newElement"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.Column.Remove(SpiceSharp.Algebra.SparseMatrix{`0}.Element)">
            <summary>
            Remove an element from the column.
            </summary>
            <param name="element">The element to be removed.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.Column.Clear">
            <summary>
            Clears all matrix elements in the column.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.Column.Swap(SpiceSharp.Algebra.SparseMatrix{`0}.Element,SpiceSharp.Algebra.SparseMatrix{`0}.Element,System.Int32,System.Int32)">
            <summary>
            Swap two elements in the row, <paramref name="first"/> and <paramref name="rowFirst"/> 
            are supposed to come first in the row. Does not update row pointers!
            </summary>
            <param name="first">The first matrix element.</param>
            <param name="second">The second matrix element.</param>
            <param name="rowFirst">The first row.</param>
            <param name="rowSecond">The second row.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if both <paramref name="first"/> and <paramref name="second"/> are <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.Algebra.SparseMatrix`1.Row">
            <summary>
            A class that keeps track of a linked list of matrix elements for a row.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.Row.FirstInRow">
            <summary>
            Gets the first element in the row.
            </summary>
            <value>
            The first element in the row.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.Row.LastInRow">
            <summary>
            Gets the last element in the row.
            </summary>
            <value>
            The last element in the row.
            </value>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.Row.CreateOrGetElement(SpiceSharp.Algebra.MatrixLocation,SpiceSharp.Algebra.SparseMatrix{`0}.Element@)">
            <summary>
            Gets an element in the row, or creates it if it doesn't exist yet.
            </summary>
            <param name="location">The location of the element.</param>
            <param name="result">The found or created element.</param>
            <returns><c>true</c> if the element was found, <c>false</c> if it was created.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.Row.Find(System.Int32)">
            <summary>
            Find an element in the row without creating it.
            </summary>
            <param name="column">The column index.</param>
            <returns>The element at the specified column, or <c>null</c> if the element doesn't exist.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.Row.Remove(SpiceSharp.Algebra.SparseMatrix{`0}.Element)">
            <summary>
            Remove an element from the row.
            </summary>
            <param name="element">The element to be removed.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.Row.Clear">
            <summary>
            Clears all matrix elements in the row.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.Row.Swap(SpiceSharp.Algebra.SparseMatrix{`0}.Element,SpiceSharp.Algebra.SparseMatrix{`0}.Element,System.Int32,System.Int32)">
            <summary>
            Swap two elements in the row, <paramref name="first"/> and <paramref name="columnFirst"/> 
            are supposed to come first in the row.
            </summary>
            <param name="first">The first matrix element.</param>
            <param name="second">The second matrix element.</param>
            <param name="columnFirst">The first column.</param>
            <param name="columnSecond">The second column.</param>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.ElementCount">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.Size">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.Item(SpiceSharp.Algebra.MatrixLocation)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SparseMatrix`1"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SparseMatrix`1"/> class.
            </summary>
            <param name="size">The matrix size.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="size"/> is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.GetElement(SpiceSharp.Algebra.MatrixLocation)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.RemoveElement(SpiceSharp.Algebra.MatrixLocation)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.FindDiagonalElement(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.FindElement(SpiceSharp.Algebra.MatrixLocation)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.GetFirstInRow(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.GetLastInRow(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.GetFirstInColumn(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.GetLastInColumn(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.SwapRows(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.SwapColumns(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.Reset">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:SpiceSharp.Algebra.SparseMatrix`1.Element">
            <summary>
            An element for a sparse matrix.
            </summary>
            <seealso cref="T:SpiceSharp.Algebra.Element`1" />
            <seealso cref="T:SpiceSharp.Algebra.ISparseMatrixElement`1"/>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.Element.Row">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.Element.Column">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.Element.Right">
            <summary>
            Gets or sets the next element in the row.
            </summary>
            <value>
            The matrix element.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.Element.Below">
            <summary>
            Gets or sets the next element in the column.
            </summary>
            <value>
            The matrix element.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.Element.Left">
            <summary>
            Gets or sets the previous element in the row.
            </summary>
            <value>
            The matrix element.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.Element.Above">
            <summary>
            Gets or sets the previous element in the column.
            </summary>
            <value>
            The matrix element.
            </value>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.Element.#ctor(SpiceSharp.Algebra.MatrixLocation)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SparseMatrix`1.Element"/> class.
            </summary>
            <param name="location">The location of the element.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.Element.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SparseMatrix`1.Element"/> class.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
        </member>
        <member name="T:SpiceSharp.Algebra.ISparseMatrix`1">
            <summary>
            Describes a sparse matrix that return elements that have links to neighboring non-zero elements.
            </summary>
            <seealso cref="T:SpiceSharp.Algebra.IMatrix`1"/>
        </member>
        <member name="P:SpiceSharp.Algebra.ISparseMatrix`1.ElementCount">
            <summary>
            Gets the number of elements in the matrix.
            </summary>
            <value>
            The element count.
            </value>
        </member>
        <member name="M:SpiceSharp.Algebra.ISparseMatrix`1.GetFirstInRow(System.Int32)">
            <summary>
            Gets the first non-default <see cref="T:SpiceSharp.Algebra.ISparseMatrixElement`1" /> in the specified row.
            </summary>
            <param name="row">The row index.</param>
            <returns>
            The matrix element.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="row"/> is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.ISparseMatrix`1.GetLastInRow(System.Int32)">
            <summary>
            Gets the last non-default <see cref="T:SpiceSharp.Algebra.ISparseMatrixElement`1" /> in the specified row.
            </summary>
            <param name="row">The row index.</param>
            <returns>
            The matrix element.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="row" /> is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.ISparseMatrix`1.GetFirstInColumn(System.Int32)">
            <summary>
            Gets the first non-default <see cref="T:SpiceSharp.Algebra.ISparseMatrixElement`1"/> in the specified column.
            </summary>
            <param name="column">The column index.</param>
            <returns>The matrix element.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="column"/> is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.ISparseMatrix`1.GetLastInColumn(System.Int32)">
            <summary>
            Gets the last non-default <see cref="T:SpiceSharp.Algebra.ISparseMatrixElement`1" /> in the specified column.
            </summary>
            <param name="column">The column index.</param>
            <returns>
            The matrix element.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="column" /> is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.ISparseMatrix`1.FindDiagonalElement(System.Int32)">
            <summary>
            Finds the <see cref="T:SpiceSharp.Algebra.ISparseMatrixElement`1" /> on the diagonal.
            </summary>
            <param name="index">The index.</param>
            <returns>
            The matrix element if it exists; otherwise <c>null</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.ISparseMatrix`1.GetElement(SpiceSharp.Algebra.MatrixLocation)">
            <summary>
            Gets a pointer to the matrix element at the specified row and column. If
            the element doesn't exist, it is created.
            </summary>
            <param name="location">The matrix location.</param>
            <returns>
            The matrix element.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.ISparseMatrix`1.FindElement(SpiceSharp.Algebra.MatrixLocation)">
            <summary>
            Finds a pointer to the matrix element at the specified row and column. If
            the element doesn't exist, <c>null</c> is returned.
            </summary>
            <param name="location">The matrix location.</param>
            <returns>
            The matrix element if it exists; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.ISparseMatrix`1.RemoveElement(SpiceSharp.Algebra.MatrixLocation)">
            <summary>
            Removes a matrix element at the specified row and column. If the element
            doesn't exist, this method returns <c>false</c>.
            </summary>
            <param name="location">The location.</param>
            <returns>
            <c>true</c> if the element was removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SpiceSharp.Algebra.ISparseMatrixElement`1">
            <summary>
            A matrix element for an <see cref="T:SpiceSharp.Algebra.ISparseMatrix`1"/>. This element has links
            to the surrounding matrix elements.
            </summary>
            <typeparam name="T">The base type.</typeparam>
        </member>
        <member name="P:SpiceSharp.Algebra.ISparseMatrixElement`1.Value">
            <summary>
            Gets or sets the value of the element.
            </summary>
            <value>
            The value of the element.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.ISparseMatrixElement`1.Row">
            <summary>
            Gets the row index of the matrix element.
            </summary>
            <value>
            The row index.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.ISparseMatrixElement`1.Column">
            <summary>
            Gets the column index of the matrix element.
            </summary>
            <value>
            The column index.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.ISparseMatrixElement`1.Left">
            <summary>
            Gets the nearest <see cref="T:SpiceSharp.Algebra.ISparseMatrixElement`1"/> left of this one.
            </summary>
            <value>
            The matrix element.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.ISparseMatrixElement`1.Right">
            <summary>
            Gets the nearest <see cref="T:SpiceSharp.Algebra.ISparseMatrixElement`1"/> right of this one.
            </summary>
            <value>
            The matrix element.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.ISparseMatrixElement`1.Above">
            <summary>
            Gets the nearest <see cref="T:SpiceSharp.Algebra.ISparseMatrixElement`1"/> above this one.
            </summary>
            <value>
            The matrix element.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.ISparseMatrixElement`1.Below">
            <summary>
            Gets the nearest <see cref="T:SpiceSharp.Algebra.ISparseMatrixElement`1"/> below this one.
            </summary>
            <value>
            The matrix element.
            </value>
        </member>
        <member name="T:SpiceSharp.Algebra.IPivotingSolver`3">
            <summary>
            An <see cref="T:SpiceSharp.Algebra.ISolver`1"/> that implements mechanisms for pivoting. This means
            that the solver may reorder the internal matrix and right hand side vector.
            </summary>
            <typeparam name="M">The matrix type.</typeparam>
            <typeparam name="V">The vector type.</typeparam>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="P:SpiceSharp.Algebra.IPivotingSolver`3.PivotSearchReduction">
            <summary>
            Gets or sets the pivot search reduction. This makes sure that pivots cannot
            be chosen from the last N rows. The default, 0, lets the pivot strategy to
            choose from the whole matrix.
            </summary>
            <value>
            The pivot search reduction.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is negative.</exception>
        </member>
        <member name="P:SpiceSharp.Algebra.IPivotingSolver`3.NeedsReordering">
            <summary>
            Gets or sets a value indicating whether the solver needs to be reordered all the way from the start.
            </summary>
            <value>
              <c>true</c> if the solver needs reordering; otherwise, <c>false</c>.
            </value>
            <remarks>
            If this flag is false, the solver will still reorder when using <see cref="M:SpiceSharp.Algebra.IPivotingSolver`3.OrderAndFactor" />, but
            it will try to stay away from reordering as long as possible. This flag will force the solver to
            immediately start reordering.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Algebra.IPivotingSolver`3.Precondition(SpiceSharp.Algebra.PreconditioningMethod{`0,`1,`2})">
            <summary>
            Preconditions the solver matrix and right hand side vector.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.IPivotingSolver`3.OrderAndFactor">
            <summary>
            Order and factor the equation matrix and right hand side vector.
            This method will reorder the matrix as it sees fit.
            </summary>
            <returns>
            The number of rows that were successfully eliminated.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.IPivotingSolver`3.InternalToExternal(SpiceSharp.Algebra.MatrixLocation)">
            <summary>
            Maps an internal matrix location to an external one.
            </summary>
            <param name="indices">The internal matrix location.</param>
            <returns>
            The external matrix location.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.IPivotingSolver`3.ExternalToInternal(SpiceSharp.Algebra.MatrixLocation)">
            <summary>
            Maps an external matrix location to an internal one.
            </summary>
            <param name="indices">The external matrix location.</param>
            <returns>
            The internal matrix location.
            </returns>
        </member>
        <member name="T:SpiceSharp.Algebra.PreconditioningMethod`3">
            <summary>
            Describes a method for preconditioning an <see cref="T:SpiceSharp.Algebra.IPivotingSolver`3"/>.
            </summary>
            <typeparam name="M">The matrix.</typeparam>
            <typeparam name="V">The vector.</typeparam>
            <typeparam name="T">The base value type.</typeparam>
            <param name="matrix">The matrix.</param>
            <param name="vector">The vector.</param>
        </member>
        <member name="T:SpiceSharp.Algebra.ISolver`1">
            <summary>
            Describes a linear system of equations. It tracks permutations of
            the equations and the variables.
            </summary>
            <typeparam name="T">The base type.</typeparam>
        </member>
        <member name="P:SpiceSharp.Algebra.ISolver`1.Degeneracy">
            <summary>
            Gets or sets the degeneracy of the matrix. For example, specifying 1 will let the solver know that one equation is
            expected to be linearly dependent on the others.
            </summary>
            <value>
            The degeneracy.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is negative.</exception>
        </member>
        <member name="P:SpiceSharp.Algebra.ISolver`1.Size">
            <summary>
            Gets the size of the solver. This is the total number of equations.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.ISolver`1.IsFactored">
            <summary>
            Gets a value indicating whether this solver has been factored.
            A solver needs to be factored becore it can solve for a solution.
            </summary>
            <value>
              <c>true</c> if this solver is factored; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.ISolver`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the value of the matrix at the specified row and column.
            </summary>
            <value>
            The value.
            </value>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
            <returns>
            The value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="row"/> or <paramref name="column"/> is negative.</exception>
        </member>
        <member name="P:SpiceSharp.Algebra.ISolver`1.Item(SpiceSharp.Algebra.MatrixLocation)">
            <summary>
            Gets or sets the value of the matrix at the specified location.
            </summary>
            <value>
            The value of the matrix element.
            </value>
            <param name="location">The location.</param>
            <returns>
            The value.
            </returns>
        </member>
        <member name="P:SpiceSharp.Algebra.ISolver`1.Item(System.Int32)">
            <summary>
            Gets or sets the value of the right hand side vector at the specified row.
            </summary>
            <value>
            The value of the right hand side vector.
            </value>
            <param name="row">The row.</param>
            <returns>
            The value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="row"/> is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.ISolver`1.ForwardSubstitute(SpiceSharp.Algebra.IVector{`0})">
            <summary>
            Applies forward substitution on a factored matrix and right-hand side vector.
            </summary>
            <param name="solution">The solution vector.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="solution" /> is <c>null</c>.</exception>
            <exception cref="T:SpiceSharp.Algebra.AlgebraException">Thrown if the solver is not factored yet.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="solution" /> does not have <see cref="P:SpiceSharp.Algebra.ISolver`1.Size" /> elements.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.ISolver`1.BackwardSubstitute(SpiceSharp.Algebra.IVector{`0})">
            <summary>
            Applies backward substitution on a factored matrix and the intermediate vector.
            </summary>
            <param name="solution">The solution vector.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.ISolver`1.ComputeDegenerateContribution(System.Int32)">
            <summary>
            Computes a contribution for degenerate solvers (<see cref="P:SpiceSharp.Algebra.ISolver`1.Degeneracy"/> is larger than 0).
            Used when solving submatrices separately.
            </summary>
            <param name="index">The index.</param>
            <returns>Returns the contribution.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.ISolver`1.ForwardSubstituteTransposed(SpiceSharp.Algebra.IVector{`0})">
            <summary>
            Applies forward substitution on the adjoint matrix and right-hand side vector.
            </summary>
            <param name="solution">The solution vector.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="solution" /> is <c>null</c>.</exception>
            <exception cref="T:SpiceSharp.Algebra.AlgebraException">Thrown if the solver is not factored yet.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="solution" /> does not have <see cref="P:SpiceSharp.Algebra.ISolver`1.Size" /> elements.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.ISolver`1.BackwardSubstituteTransposed(SpiceSharp.Algebra.IVector{`0})">
            <summary>
            Applies backward substitution on the adjoint matrix and the intermediate vector.
            </summary>
            <param name="solution">The solution vector.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.ISolver`1.ComputeDegenerateContributionTransposed(System.Int32)">
            <summary>
            Computes a contribution of the transposed solving for degenerate solvers (<see cref="P:SpiceSharp.Algebra.ISolver`1.Degeneracy"/> is larger than 0).
            Used when solving submatrices separately.
            </summary>
            <param name="index">The index.</param>
            <returns>Returns the contribution.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.ISolver`1.Factor">
            <summary>
            Factor the equation matrix and right hand side vector.
            This method can save time when factoring similar matrices in succession.
            </summary>
            <returns>
            <c>true</c> if the factoring was successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.ISolver`1.Reset">
            <summary>
            Clears all matrix and vector elements.
            </summary>
            <remarks>
            This method is only redefined here to avoid ambiguity
            issues between <see cref="T:SpiceSharp.Algebra.IMatrix`1"/> and <see cref="T:SpiceSharp.Algebra.IVector`1"/>.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Algebra.ISolver`1.Clear">
            <summary>
            Clears the solver of any elements. The size of the solver becomes 0.
            </summary>
            <remarks>
            The method is only redefined here to avoid ambiguity issues between
            <see cref="T:SpiceSharp.Algebra.IMatrix`1"/> and <see cref="T:SpiceSharp.Algebra.IVector`1"/>.
            </remarks>
        </member>
        <member name="T:SpiceSharp.Algebra.Solve.DenseLUSolver`1">
            <summary>
            An base class for dense linear systems that can be solved using LU decomposition.
            Pivoting is controlled by the 
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <seealso cref="T:SpiceSharp.Algebra.IMatrix`1" />
            <seealso cref="T:SpiceSharp.Algebra.IVector`1" />
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.DenseLUSolver`1.Parameters">
            <summary>
            Gets the pivoting strategy.
            </summary>
            <value>
            The pivoting strategy.
            </value>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.DenseLUSolver`1.#ctor(System.Func{`0,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.Solve.DenseLUSolver`1"/> class.
            </summary>
            <param name="magnitude">The magnitude.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="magnitude"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.DenseLUSolver`1.#ctor(System.Int32,System.Func{`0,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.Solve.DenseLUSolver`1"/> class.
            </summary>
            <param name="size">The size.</param>
            <param name="magnitude">The magnitude.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="magnitude"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="size"/> is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.DenseLUSolver`1.Precondition(SpiceSharp.Algebra.PreconditioningMethod{SpiceSharp.Algebra.IMatrix{`0},SpiceSharp.Algebra.IVector{`0},`0})">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.DenseLUSolver`1.Factor">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.DenseLUSolver`1.Factor(System.Int32)">
            <summary>
            Factor the equation matrix and right hand side vector.
            </summary>
            <param name="size">The size of the matrix that should be factored.</param>
            <returns>
            <c>true</c> if the factoring was successful; otherwise <c>false</c>.
            </returns>
            <remarks>
            This factoring method allows reusing matrices if only a small matrix is needed.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.DenseLUSolver`1.OrderAndFactor">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.DenseLUSolver`1.Eliminate(System.Int32,System.Int32)">
            <summary>
            Eliminates the submatrix right and below the pivot.
            </summary>
            <param name="step">The current elimination step.</param>
            <param name="size">The maximum row/column to be eliminated.</param>
            <returns>
            <c>true</c> if the elimination was succesful; otherwise <c>false</c>.
            </returns>
            <exception cref="T:SpiceSharp.Algebra.AlgebraException">Thrown if the pivot has a magnitude of zero.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.DenseLUSolver`1.Clear">
            <summary>
            Clears the system of any elements. The size of the system becomes 0.
            </summary>
        </member>
        <member name="T:SpiceSharp.Algebra.Solve.DenseLUSolver`1.ReorderedMatrix">
            <summary>
            A matrix that keeps everything synchronized for our solver.
            </summary>
            <seealso cref="T:SpiceSharp.Algebra.Solve.PivotingSolver`3" />
            <seealso cref="T:SpiceSharp.Algebra.ISolver`1" />
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.DenseLUSolver`1.ReorderedMatrix.Size">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.DenseLUSolver`1.ReorderedMatrix.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.DenseLUSolver`1.ReorderedMatrix.Item(SpiceSharp.Algebra.MatrixLocation)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.DenseLUSolver`1.ReorderedMatrix.#ctor(SpiceSharp.Algebra.Solve.DenseLUSolver{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.Solve.DenseLUSolver`1.ReorderedMatrix"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="parent"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.DenseLUSolver`1.ReorderedMatrix.SwapRows(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.DenseLUSolver`1.ReorderedMatrix.SwapColumns(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.DenseLUSolver`1.ReorderedMatrix.Reset">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.DenseLUSolver`1.ReorderedMatrix.Clear">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.DenseLUSolver`1.ReorderedMatrix.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:SpiceSharp.Algebra.Solve.DenseLUSolver`1.ReorderedVector">
            <summary>
            A vector that keeps everything synchronized for our solver.
            </summary>
            <seealso cref="T:SpiceSharp.Algebra.Solve.PivotingSolver`3" />
            <seealso cref="T:SpiceSharp.Algebra.ISolver`1" />
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.DenseLUSolver`1.ReorderedVector.Length">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.DenseLUSolver`1.ReorderedVector.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.DenseLUSolver`1.ReorderedVector.#ctor(SpiceSharp.Algebra.Solve.DenseLUSolver{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.Solve.DenseLUSolver`1.ReorderedVector"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="parent"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.DenseLUSolver`1.ReorderedVector.SwapElements(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.DenseLUSolver`1.ReorderedVector.CopyTo(SpiceSharp.Algebra.IVector{`0})">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.DenseLUSolver`1.ReorderedVector.Reset">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.DenseLUSolver`1.ReorderedVector.Clear">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.DenseLUSolver`1.ReorderedVector.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:SpiceSharp.Algebra.Solve.Markowitz`1">
            <summary>
            A search strategy based on methods outlined by Markowitz.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="F:SpiceSharp.Algebra.Solve.Markowitz`1._maxMarkowitzCount">
            <summary>
            The maximum Markowitz count that will not result in Int32 overflow when squared
            Markowitz counts are capped at this quantity.
            </summary>
            <remarks>
            To reach this quantity, a variable would have to be connected to this amount of
            other varibles. We could say that this is highly unlikely. In the event that this
            amount does get reached, we would probably need to do a sanity check.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.RowCount(System.Int32)">
            <summary>
            Gets the Markowitz row counts.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown if <paramref name="row"/> is negative or greater than the number of Markowitz rows.
            </exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.ColumnCount(System.Int32)">
            <summary>
            Gets the Markowitz column counts.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown if <paramref name="column"/> is negative or greater than the number of Markowitz columns.
            </exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.Product(System.Int32)">
            <summary>
            Gets the Markowitz products.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown if <paramref name="index"/> is negative or greater than the number of Markowitz size.
            </exception>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.Markowitz`1.Magnitude">
            <summary>
            Gets the magnitude.
            </summary>
            <value>
            The magnitude.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.Markowitz`1.Singletons">
            <summary>
            Gets the number of singletons.
            </summary>
        </member>
        <member name="F:SpiceSharp.Algebra.Solve.Markowitz`1._relativePivotThreshold">
            <summary>
            Gets or sets the relative threshold for choosing a pivot.
            </summary>
            <value>
            The relative pivot threshold.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is not greater than 0.
            </exception>
        </member>
        <member name="F:SpiceSharp.Algebra.Solve.Markowitz`1._absolutePivotThreshold">
            <summary>
            Gets or sets the absolute threshold for choosing a pivot.
            </summary>
            <value>
            The absolute pivot threshold.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is negative.
            </exception>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.Markowitz`1.Strategies">
            <summary>
            Gets the strategies used for finding a pivot.
            </summary>
            <value>
            The strategies.
            </value>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.#ctor(System.Func{`0,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.Solve.Markowitz`1" /> class.
            </summary>
            <param name="magnitude">The function for turning elements into a scalar.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="magnitude"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.IsValidPivot(SpiceSharp.Algebra.ISparseMatrixElement{`0},System.Int32)">
            <summary>
            This method will check whether or not a pivot element is valid or not.
            It checks for the submatrix right/below of the pivot.
            </summary>
            <param name="pivot">The pivot candidate.</param>
            <param name="max">The maximum index that a pivot can have.</param>
            <returns>
            True if the pivot can be used.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="pivot"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.Initialize(SpiceSharp.Algebra.IMatrix{`0})">
            <summary>
            Initializes the pivot searching algorithm.
            </summary>
            <param name="matrix">The matrix to use for initialization.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="matrix"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.Clear">
            <summary>
            Clears the pivot strategy.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.Setup(SpiceSharp.Algebra.ISparseMatrix{`0},SpiceSharp.Algebra.ISparseVector{`0},System.Int32,System.Int32)">
            <summary>
            Setup the pivot strategy.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="rhs">The right-hand side vector.</param>
            <param name="eliminationStep">The current elimination step.</param>
            <param name="max">The maximum row/column index.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="matrix"/> or <paramref name="rhs"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.MovePivot(SpiceSharp.Algebra.ISparseMatrix{`0},SpiceSharp.Algebra.ISparseVector{`0},SpiceSharp.Algebra.ISparseMatrixElement{`0},System.Int32)">
            <summary>
            Move the pivot to the diagonal for this elimination step.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="rhs">The right-hand side vector.</param>
            <param name="pivot">The pivot element.</param>
            <param name="eliminationStep">The elimination step.</param>
            <remarks>
            This is done by swapping the rows and columns of the diagonal and that of the pivot.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="matrix"/>, <paramref name="rhs"/> or <paramref name="pivot"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.Update(SpiceSharp.Algebra.ISparseMatrix{`0},SpiceSharp.Algebra.ISparseMatrixElement{`0},System.Int32)">
            <summary>
            Update the strategy after the pivot was moved.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="pivot">The pivot element.</param>
            <param name="limit">The maximum row/column for pivots.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="matrix"/> or <paramref name="pivot"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.CreateFillin(SpiceSharp.Algebra.ISparseMatrix{`0},SpiceSharp.Algebra.ISparseMatrixElement{`0})">
            <summary>
            Notifies the strategy that a fill-in has been created
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="fillin">The fill-in.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="matrix"/> or <paramref name="fillin"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.FindPivot(SpiceSharp.Algebra.ISparseMatrix{`0},System.Int32,System.Int32)">
            <summary>
            Find a pivot in the matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="eliminationStep">The current elimination step.</param>
            <param name="max">The maximum row/column index of any pivot.</param>
            <returns>The pivot information.</returns>
            <remarks>
            The pivot should be searched for in the submatrix towards the right and down of the
            current diagonal at row/column <paramref name="eliminationStep" />. This pivot element
            will be moved to the diagonal for this elimination step.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="eliminationStep"/> or <paramref name="max"/> not 1 or higher, 
            or <paramref name="eliminationStep"/> is higher than <paramref name="max"/>.
            </exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.Clone">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.Markowitz`1.RelativePivotThreshold">
            <summary>
            Gets or sets the relative threshold for choosing a pivot.
            </summary>
            <value>
            The relative pivot threshold.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is not greater than 0.
            </exception>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.Markowitz`1.AbsolutePivotThreshold">
            <summary>
            Gets or sets the absolute threshold for choosing a pivot.
            </summary>
            <value>
            The absolute pivot threshold.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is negative.
            </exception>
        </member>
        <member name="T:SpiceSharp.Algebra.Solve.MarkowitzDiagonal`1">
            <summary>
            Markowitz-count based strategy for finding a pivot. Searches the whole diagonal of the submatrix.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="F:SpiceSharp.Algebra.Solve.MarkowitzDiagonal`1._tiesMultiplier">
            <summary>
            Gets or sets a heuristic for speeding up pivot searching.
            </summary>
            <value>
            The multiplier for searching pivots with the same markowitz products.
            </value>
            <remarks>
            Instead of searching the whole matrix for a pivot on the diagonal, the search strategy can
            choose to stop searching for more pivot elements with the lowest "Markowitz product", which
            scores how many extra unwanted elements a row/column could create as a by-product of factoring
            the solver. When this score is tied, this search strategy will keep searching until we have
            (MarkowitzProduct * TiesMultiplier) eligible pivots. In other words, pivots with a high
            Markowitz product will ask the search strategy for more entries to make sure that we can't do 
            better.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.MarkowitzDiagonal`1.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.MarkowitzDiagonal`1.FindPivot(SpiceSharp.Algebra.Solve.Markowitz{`0},SpiceSharp.Algebra.ISparseMatrix{`0},System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.MarkowitzDiagonal`1.TiesMultiplier">
            <summary>
            Gets or sets a heuristic for speeding up pivot searching.
            </summary>
            <value>
            The multiplier for searching pivots with the same markowitz products.
            </value>
            <remarks>
            Instead of searching the whole matrix for a pivot on the diagonal, the search strategy can
            choose to stop searching for more pivot elements with the lowest "Markowitz product", which
            scores how many extra unwanted elements a row/column could create as a by-product of factoring
            the solver. When this score is tied, this search strategy will keep searching until we have
            (MarkowitzProduct * TiesMultiplier) eligible pivots. In other words, pivots with a high
            Markowitz product will ask the search strategy for more entries to make sure that we can't do
            better.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is negative.</exception>
        </member>
        <member name="T:SpiceSharp.Algebra.Solve.MarkowitzEntireMatrix`1">
            <summary>
            Markowitz-count based strategy for finding a pivot. Search the complete submatrix.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="F:SpiceSharp.Algebra.Solve.MarkowitzEntireMatrix`1._tiesMultiplier">
            <summary>
            Gets or sets a heuristic for speeding up pivot searching.
            </summary>
            <value>
            The multiplier for searching pivots with the same markowitz products.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is negative.</exception>
            <remarks>
            Instead of searching the whole matrix for a pivot on the diagonal, the search strategy can
            choose to stop searching for more pivot elements with the lowest "Markowitz product", which
            scores how many extra unwanted elements a row/column could create as a by-product of factoring
            the solver. When this score is tied, this search strategy will keep a list of them with a
            maximum of (MarkowitzProduct * TiesMultiplier) elements. In other words, pivots with a high
            Markowitz product will ask the search strategy for more entries to make sure that we can do
            better.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.MarkowitzEntireMatrix`1.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.MarkowitzEntireMatrix`1.FindPivot(SpiceSharp.Algebra.Solve.Markowitz{`0},SpiceSharp.Algebra.ISparseMatrix{`0},System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.MarkowitzEntireMatrix`1.TiesMultiplier">
            <summary>
            Gets or sets a heuristic for speeding up pivot searching.
            </summary>
            <value>
            The multiplier for searching pivots with the same markowitz products.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is negative.</exception>
            <remarks>
            Instead of searching the whole matrix for a pivot on the diagonal, the search strategy can
            choose to stop searching for more pivot elements with the lowest "Markowitz product", which
            scores how many extra unwanted elements a row/column could create as a by-product of factoring
            the solver. When this score is tied, this search strategy will keep a list of them with a
            maximum of (MarkowitzProduct * TiesMultiplier) elements. In other words, pivots with a high
            Markowitz product will ask the search strategy for more entries to make sure that we can do
            better.
            </remarks>
        </member>
        <member name="T:SpiceSharp.Algebra.Solve.MarkowitzQuickDiagonal`1">
            <summary>
            Markowitz-based pivot search. Quickly search the diagonal for valid pivots.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="F:SpiceSharp.Algebra.Solve.MarkowitzQuickDiagonal`1._maxMarkowitzTies">
            <summary>
            Gets or sets the maximum number of diagonals that are considered for choosing the pivot.
            </summary>
            <value>
            The maximum number of searched pivots with the same markowitz product.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is not greater than 1.</exception>
            <remarks>
            The pivot search strategy will try to find pivots with the lowest "Markowitz product", which
            scores how many extra unwanted elements a row/column could create as a by-product of factoring
            the solver. When this score is tied, this search strategy will keep a list of them with a
            maximum of this amount of elements.
            </remarks>
        </member>
        <member name="F:SpiceSharp.Algebra.Solve.MarkowitzQuickDiagonal`1._tiesMultiplier">
            <summary>
            Gets or sets a heuristic for speeding up pivot searching.
            </summary>
            <value>
            The multiplier for searching pivots with the same markowitz products.
            </value>
            <remarks>
            Instead of searching the whole matrix for a pivot on the diagonal, the search strategy can
            choose to stop searching for more pivot elements with the lowest "Markowitz product", which
            scores how many extra unwanted elements a row/column could create as a by-product of factoring
            the solver. When this score is tied, this search strategy will keep a list of them with a
            maximum of (MarkowitzProduct * TiesMultiplier) elements. In other words, pivots with a high
            Markowitz product will ask the search strategy for more entries to make sure that we can do 
            better. Set this value to <see cref="P:SpiceSharp.Algebra.Solve.MarkowitzQuickDiagonal`1.MaxMarkowitzTies"/> to always search for the maximum
            number of eligible pivots.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.MarkowitzQuickDiagonal`1.FindPivot(SpiceSharp.Algebra.Solve.Markowitz{`0},SpiceSharp.Algebra.ISparseMatrix{`0},System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.MarkowitzQuickDiagonal`1.Clone">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.MarkowitzQuickDiagonal`1.MaxMarkowitzTies">
            <summary>
            Gets or sets the maximum number of diagonals that are considered for choosing the pivot.
            </summary>
            <value>
            The maximum number of searched pivots with the same markowitz product.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is not greater than 1.</exception>
            <remarks>
            The pivot search strategy will try to find pivots with the lowest "Markowitz product", which
            scores how many extra unwanted elements a row/column could create as a by-product of factoring
            the solver. When this score is tied, this search strategy will keep a list of them with a
            maximum of this amount of elements.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.MarkowitzQuickDiagonal`1.TiesMultiplier">
            <summary>
            Gets or sets a heuristic for speeding up pivot searching.
            </summary>
            <value>
            The multiplier for searching pivots with the same markowitz products.
            </value>
            <remarks>
            Instead of searching the whole matrix for a pivot on the diagonal, the search strategy can
            choose to stop searching for more pivot elements with the lowest "Markowitz product", which
            scores how many extra unwanted elements a row/column could create as a by-product of factoring
            the solver. When this score is tied, this search strategy will keep a list of them with a
            maximum of (MarkowitzProduct * TiesMultiplier) elements. In other words, pivots with a high
            Markowitz product will ask the search strategy for more entries to make sure that we can do
            better. Set this value to <see cref="P:SpiceSharp.Algebra.Solve.MarkowitzQuickDiagonal`1.MaxMarkowitzTies"/> to always search for the maximum
            number of eligible pivots.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is negative.</exception>
        </member>
        <member name="T:SpiceSharp.Algebra.Solve.MarkowitzSearchStrategy`1">
            <summary>
            A template for a search strategy for finding pivots. It is
            used for implementing the strategy outlined by Markowitz.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.MarkowitzSearchStrategy`1.FindPivot(SpiceSharp.Algebra.Solve.Markowitz{`0},SpiceSharp.Algebra.ISparseMatrix{`0},System.Int32,System.Int32)">
            <summary>
            Find a pivot in a matrix.
            </summary>
            <param name="markowitz">The Markowitz pivot strategy.</param>
            <param name="matrix">The matrix.</param>
            <param name="eliminationStep">The current elimination step.</param>
            <param name="max">The maximum row/column index.</param>
            <returns>
            The pivot element, or null if no pivot was found.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="markowitz" /> or <paramref name="matrix" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="eliminationStep" /> or <paramref name="max" /> not 1 or higher,
            or <paramref name="eliminationStep" /> is higher than <paramref name="max" />.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.MarkowitzSearchStrategy`1.Clone">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Algebra.Solve.MarkowitzSingleton`1">
            <summary>
            Markowitz-count based strategy for finding a pivot. This strategy will search for 
            singletons (rows or columns with only one element), these can be found rather cheaply.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.MarkowitzSingleton`1.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.MarkowitzSingleton`1.FindPivot(SpiceSharp.Algebra.Solve.Markowitz{`0},SpiceSharp.Algebra.ISparseMatrix{`0},System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Algebra.Solve.SparseLUSolver`1">
            <summary>
            A base class for sparse linear systems that can be solved using LU decomposition.
            Pivoting is controlled by the <see cref="P:SpiceSharp.Algebra.Solve.SparseLUSolver`1.Parameters"/> property. The implementation
            is optimized for sparse matrices through the <see cref="T:SpiceSharp.Algebra.ISparseMatrix`1"/> interface.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <seealso cref="T:SpiceSharp.Algebra.Solve.PivotingSolver`3"/>
            <seealso cref="T:SpiceSharp.Algebra.ISparsePivotingSolver`1"/>
            <seealso cref="T:SpiceSharp.Algebra.ISparseMatrix`1"/>
            <seealso cref="T:SpiceSharp.Algebra.ISparseVector`1"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Algebra.Solve.Markowitz`1"/>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.SparseLUSolver`1.Fillins">
            <summary>
            Number of fill-ins in the matrix generated by the solver.
            </summary>
            <remarks>
            Fill-ins are elements that were auto-generated as a consequence
            of the solver trying to solve the matrix. To save memory, this
            number should remain small.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.SparseLUSolver`1.Parameters">
            <summary>
            Gets the pivoting strategy being used.
            </summary>
            <value>
            The pivoting strategy.
            </value>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.#ctor(System.Func{`0,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.Solve.SparseLUSolver`1"/> class.
            </summary>
            <param name="magnitude">The magnitude function.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="magnitude"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.Precondition(SpiceSharp.Algebra.PreconditioningMethod{SpiceSharp.Algebra.ISparseMatrix{`0},SpiceSharp.Algebra.ISparseVector{`0},`0})">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.Factor">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.OrderAndFactor">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.Eliminate(SpiceSharp.Algebra.ISparseMatrixElement{`0})">
            <summary>
            Eliminates the matrix right and below the pivot.
            </summary>
            <param name="pivot">The pivot element.</param>
            <returns>
            <c>true</c> if the elimination was successful; otherwise <c>false</c>.
            </returns>
            <exception cref="T:SpiceSharp.Algebra.AlgebraException">Thrown if the pivot is <c>null</c> or has a magnitude of zero.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.FindDiagonalElement(System.Int32)">
            <summary>
            Finds the diagonal element at the specified row/column.
            </summary>
            <param name="index">The row/column index.</param>
            <returns>
            The matrix element.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.FindElement(SpiceSharp.Algebra.MatrixLocation)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.FindElement(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.GetElement(SpiceSharp.Algebra.MatrixLocation)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.RemoveElement(SpiceSharp.Algebra.MatrixLocation)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.GetElement(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.RemoveElement(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.MovePivot(SpiceSharp.Algebra.ISparseMatrixElement{`0},System.Int32)">
            <summary>
            Moves a chosen pivot to the diagonal.
            </summary>
            <param name="pivot">The pivot element.</param>
            <param name="step">The current step of factoring.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="pivot"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.CreateFillin(SpiceSharp.Algebra.MatrixLocation)">
            <summary>
            Creates a fillin. The fillin is an element that appeared as a by-product
            of elimination/factoring the matrix.
            </summary>
            <param name="location">The location.</param>
            <returns>The created fillin element.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.Clear">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedMatrix">
            <summary>
            A sparse matrix that keeps both the matrix and right hand side vector synchronized for our solver.
            </summary>
            <seealso cref="T:SpiceSharp.Algebra.Solve.SparseLUSolver`1" />
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedMatrix.ElementCount">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedMatrix.Size">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedMatrix.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedMatrix.Item(SpiceSharp.Algebra.MatrixLocation)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedMatrix.#ctor(SpiceSharp.Algebra.Solve.SparseLUSolver{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedMatrix"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="parent"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedMatrix.GetFirstInRow(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedMatrix.GetLastInRow(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedMatrix.GetFirstInColumn(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedMatrix.GetLastInColumn(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedMatrix.FindDiagonalElement(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedMatrix.GetElement(SpiceSharp.Algebra.MatrixLocation)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedMatrix.RemoveElement(SpiceSharp.Algebra.MatrixLocation)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedMatrix.FindElement(SpiceSharp.Algebra.MatrixLocation)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedMatrix.SwapRows(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedMatrix.SwapColumns(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedMatrix.Reset">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedMatrix.Clear">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedMatrix.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedVector">
            <summary>
            A sparse vector that keeps both the matrix and right hand side vector synchronized for our solver.
            </summary>
            <seealso cref="T:SpiceSharp.Algebra.Solve.SparseLUSolver`1" />
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedVector.ElementCount">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedVector.Length">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedVector.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedVector.SwapElements(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedVector.#ctor(SpiceSharp.Algebra.Solve.SparseLUSolver{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedVector"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="parent"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedVector.GetFirstInVector">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedVector.GetLastInVector">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedVector.GetElement(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedVector.RemoveElement(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedVector.FindElement(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedVector.CopyTo(SpiceSharp.Algebra.IVector{`0})">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedVector.Reset">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedVector.Clear">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.SparseLUSolver`1.ReorderedVector.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:SpiceSharp.Algebra.Solve.Pivot`1">
            <summary>
            Describes a pivot for reordering solvers.
            </summary>
            <typeparam name="P">The pivot output.</typeparam>
            <seealso cref="T:System.IEquatable`1"/>
        </member>
        <member name="F:SpiceSharp.Algebra.Solve.Pivot`1.Empty">
            <summary>
            No pivot.
            </summary>
        </member>
        <member name="F:SpiceSharp.Algebra.Solve.Pivot`1.Element">
            <summary>
            The pivot.
            </summary>
        </member>
        <member name="F:SpiceSharp.Algebra.Solve.Pivot`1.Info">
            <summary>
            The information about the pivot.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Pivot`1.#ctor(`0,SpiceSharp.Algebra.Solve.PivotInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.Solve.Pivot`1"/> struct.
            </summary>
            <param name="element">The pivot.</param>
            <param name="info">The information.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Pivot`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Pivot`1.Equals(SpiceSharp.Algebra.Solve.Pivot{`0})">
            <summary>
            Equalses the specified pivot.
            </summary>
            <param name="pivot">The pivot.</param>
            <returns>
            <c>true</c> if the pivots are the equal; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Pivot`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Pivot`1.op_Equality(SpiceSharp.Algebra.Solve.Pivot{`0},SpiceSharp.Algebra.Solve.Pivot{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Pivot`1.op_Inequality(SpiceSharp.Algebra.Solve.Pivot{`0},SpiceSharp.Algebra.Solve.Pivot{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:SpiceSharp.Algebra.Solve.PivotInfo">
            <summary>
            Kinds of pivots.
            </summary>
        </member>
        <member name="F:SpiceSharp.Algebra.Solve.PivotInfo.Good">
            <summary>
            A good pivot is one that meets the required tolerances and does
            not cause unwanted side-effects.
            </summary>
        </member>
        <member name="F:SpiceSharp.Algebra.Solve.PivotInfo.Suboptimal">
            <summary>
            A suboptimal pivot is one that meets the required tolerances, but may
            have some unwanted side-effects such as the creation of fill-ins.
            </summary>
        </member>
        <member name="F:SpiceSharp.Algebra.Solve.PivotInfo.Bad">
            <summary>
            A bad pivot is one that does not meet the required tolerances.
            </summary>
        </member>
        <member name="F:SpiceSharp.Algebra.Solve.PivotInfo.None">
            <summary>
            No pivot was found at all, not even a bad one.
            </summary>
        </member>
        <member name="T:SpiceSharp.Algebra.Solve.PivotingSolver`3">
            <summary>
            A standard implementation for pivoting solvers.
            </summary>
            <typeparam name="M">The matrix type.</typeparam>
            <typeparam name="V">The vector type.</typeparam>
            <typeparam name="T">The base value type.</typeparam>
            <seealso cref="T:SpiceSharp.Algebra.IPivotingSolver`3" />
        </member>
        <member name="F:SpiceSharp.Algebra.Solve.PivotingSolver`3._pivotSearchReduction">
            <inheritdoc/>
        </member>
        <member name="F:SpiceSharp.Algebra.Solve.PivotingSolver`3._degeneracy">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.PivotingSolver`3.IsFactored">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.PivotingSolver`3.NeedsReordering">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.PivotingSolver`3.Size">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.PivotingSolver`3.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.PivotingSolver`3.Item(SpiceSharp.Algebra.MatrixLocation)">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.PivotingSolver`3.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.PivotingSolver`3.Row">
            <summary>
            Gets the row translation.
            </summary>
            <value>
            The row translation.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.PivotingSolver`3.Column">
            <summary>
            Gets the column translation.
            </summary>
            <value>
            The column translation.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.PivotingSolver`3.Matrix">
            <summary>
            Gets the reordered equation matrix.
            </summary>
            <value>
            The reordered equation matrix.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.PivotingSolver`3.Vector">
            <summary>
            Gets the reordered right hand side vector.
            </summary>
            <value>
            The reordered right hand side vector.
            </value>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.PivotingSolver`3.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.Solve.PivotingSolver`3"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.PivotingSolver`3.Precondition(SpiceSharp.Algebra.PreconditioningMethod{`0,`1,`2})">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.PivotingSolver`3.SwapRows(System.Int32,System.Int32)">
            <summary>
            Swap two (internal) rows in the linear system. This method keeps
            the matrix and vector synchronized.
            </summary>
            <param name="row1">The first row index.</param>
            <param name="row2">The second row index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="row1"/> or <paramref name="row2"/> is not greater than 0.
            </exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.PivotingSolver`3.SwapColumns(System.Int32,System.Int32)">
            <summary>
            Swap two (internal) columns in the system.
            </summary>
            <param name="column1">The first column index.</param>
            <param name="column2">The second column index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="column1"/> or <paramref name="column2"/> is not greater than 0.
            </exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.PivotingSolver`3.Reset">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.PivotingSolver`3.Clear">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.PivotingSolver`3.ExternalToInternal(SpiceSharp.Algebra.MatrixLocation)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.PivotingSolver`3.InternalToExternal(SpiceSharp.Algebra.MatrixLocation)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.PivotingSolver`3.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.PivotingSolver`3.Factor">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.PivotingSolver`3.OrderAndFactor">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.PivotingSolver`3.SetParameter``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.PivotingSolver`3.ForwardSubstitute(SpiceSharp.Algebra.IVector{`2})">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.PivotingSolver`3.BackwardSubstitute(SpiceSharp.Algebra.IVector{`2})">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.PivotingSolver`3.ComputeDegenerateContribution(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.PivotingSolver`3.ForwardSubstituteTransposed(SpiceSharp.Algebra.IVector{`2})">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.PivotingSolver`3.BackwardSubstituteTransposed(SpiceSharp.Algebra.IVector{`2})">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.PivotingSolver`3.ComputeDegenerateContributionTransposed(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.PivotingSolver`3.PivotSearchReduction">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.PivotingSolver`3.Degeneracy">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Algebra.Solve.Translation">
            <summary>
            This class can map external to internal indices and vice-versa.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.Translation.Length">
            <summary>
            Gets the current length of the translation vector.
            </summary>
            <value>
            The length of the translation vector.
            </value>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Translation.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.Solve.Translation"/> class.
            </summary>
            <param name="size">The number of translations to be allocated.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="size"/> is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Translation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.Solve.Translation"/> class.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.Translation.Item(System.Int32)">
            <summary>
            Gets the internal index from an external index.
            </summary>
            <value>
            The internal index.
            </value>
            <param name="index">The external index.</param>
            <returns>
            The internal index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Translation.Reverse(System.Int32)">
            <summary>
            Gets the external index from an internal index.
            </summary>
            <param name="index">The internal index</param>
            <returns>
            The external index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Translation.Swap(System.Int32,System.Int32)">
            <summary>
            Swaps two (internal) indices, such that the external indices
            still point to the right ones.
            </summary>
            <param name="index1">First index.</param>
            <param name="index2">Second index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index1" /> or <paramref name="index2" /> is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Translation.Scramble``1(SpiceSharp.Algebra.IVector{``0},SpiceSharp.Algebra.IVector{``0})">
            <summary>
            Scramble a vector according to the map.
            </summary>
            <typeparam name="T">The value type of the vector.</typeparam>
            <param name="source">The source vector.</param>
            <param name="target">The target vector.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="target" /> does not have the same length as <paramref name="source" />.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source" /> or <paramref name="target" /> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Translation.Unscramble``1(``0[],SpiceSharp.Algebra.IVector{``0})">
            <summary>
            Unscramble a vector. The first index of the array is ignored.
            </summary>
            <typeparam name="T">The value type of the vector.</typeparam>
            <param name="source">The source vector.</param>
            <param name="target">The target vector.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="target" /> (including the trashcan element)
            does not have the same number of elements as <paramref name="source" />.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source" /> or <paramref name="target" /> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Translation.Clear">
            <summary>
            Clears all translations.
            </summary>
        </member>
        <member name="T:SpiceSharp.Algebra.DenseRealSolver">
            <summary>
            Class for solving dense sets of equations with real numbers.
            </summary>
            <seealso cref="T:SpiceSharp.Algebra.Solve.DenseLUSolver`1" />
        </member>
        <member name="M:SpiceSharp.Algebra.DenseRealSolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.DenseRealSolver"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseRealSolver.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.DenseRealSolver"/> class.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseRealSolver.ForwardSubstitute(SpiceSharp.Algebra.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Algebra.DenseRealSolver.ForwardSubstitute(SpiceSharp.Algebra.IVector{System.Double},System.Int32)">
            <summary>
            Applies forward substitution, but limits to the given size.
            </summary>
            <param name="solution">The solution.</param>
            <param name="size">The size.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="solution"/> is <c>null</c>.</exception>
            <exception cref="T:SpiceSharp.Algebra.AlgebraException">Thrown if the matrix is not yet factored.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the solution vector is not of size <see cref="P:SpiceSharp.Algebra.Solve.PivotingSolver`3.Size"/>.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseRealSolver.BackwardSubstitute(SpiceSharp.Algebra.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Algebra.DenseRealSolver.BackwardSubstitute(SpiceSharp.Algebra.IVector{System.Double},System.Int32)">
            <summary>
            Applies backward substitution.
            </summary>
            <param name="solution">The solution.</param>
            <param name="size">The maximum size.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseRealSolver.ComputeDegenerateContribution(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Algebra.DenseRealSolver.ForwardSubstituteTransposed(SpiceSharp.Algebra.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Algebra.DenseRealSolver.ForwardSubstituteTransposed(SpiceSharp.Algebra.IVector{System.Double},System.Int32)">
            <summary>
            Applies forward substitution of the adjoint matrix, but limits to the given size.
            </summary>
            <param name="solution">The solution vector.</param>
            <param name="steps">The steps to substitute.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="solution"/> is <c>null</c>.</exception>
            <exception cref="T:SpiceSharp.Algebra.AlgebraException">Thrown if the matrix is not yet factored.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the solution vector is not of size <see cref="P:SpiceSharp.Algebra.Solve.PivotingSolver`3.Size"/>.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseRealSolver.BackwardSubstituteTransposed(SpiceSharp.Algebra.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Algebra.DenseRealSolver.BackwardSubstituteTransposed(SpiceSharp.Algebra.IVector{System.Double},System.Int32)">
            <summary>
            Applies backward substitution on the adjoint matrix, but limits to the given size.
            </summary>
            <param name="solution">The solution vector.</param>
            <param name="steps">The steps to substitute.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseRealSolver.ComputeDegenerateContributionTransposed(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Algebra.DenseRealSolver.Eliminate(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Algebra.RookPivoting`1">
            <summary>
            Rook pivoting strategy.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
        </member>
        <member name="P:SpiceSharp.Algebra.RookPivoting`1.Magnitude">
            <summary>
            Gets the magnitude.
            </summary>
            <value>
            The magnitude.
            </value>
        </member>
        <member name="F:SpiceSharp.Algebra.RookPivoting`1._relativePivotThreshold">
            <summary>
            Gets or sets the relative pivot threshold.
            </summary>
            <value>
            The relative pivot threshold.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is not greater than 0.</exception>
        </member>
        <member name="F:SpiceSharp.Algebra.RookPivoting`1._absolutePivotThreshold">
            <summary>
            Gets or sets the absolute pivot threshold.
            </summary>
            <value>
            The absolute pivot threshold.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.RookPivoting`1.#ctor(System.Func{`0,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.RookPivoting`1"/> class.
            </summary>
            <param name="magnitude">The function for turning elements into a scalar.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="magnitude"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.RookPivoting`1.FindPivot(SpiceSharp.Algebra.IMatrix{`0},System.Int32,System.Int32)">
            <summary>
            Finds a pivot in the matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="eliminationStep">The elimination step.</param>
            <param name="max">The maximum row/column index.</param>
            <returns>The pivot.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="matrix"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.RookPivoting`1.IsValidPivot(SpiceSharp.Algebra.IMatrix{`0},System.Int32,System.Int32)">
            <summary>
            Determines whether the current pivot is valid.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="eliminationStep">The elimination step.</param>
            <param name="max">The maximum row/column index.</param>
            <returns>
              <c>true</c> if the pivot is valid; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="matrix" /> is <c>null</c>.</exception>
        </member>
        <member name="P:SpiceSharp.Algebra.RookPivoting`1.RelativePivotThreshold">
            <summary>
            Gets or sets the relative pivot threshold.
            </summary>
            <value>
            The relative pivot threshold.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is not greater than 0.</exception>
        </member>
        <member name="P:SpiceSharp.Algebra.RookPivoting`1.AbsolutePivotThreshold">
            <summary>
            Gets or sets the absolute pivot threshold.
            </summary>
            <value>
            The absolute pivot threshold.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is negative.</exception>
        </member>
        <member name="T:SpiceSharp.Algebra.ISparsePivotingSolver`1">
            <summary>
            A sparse solver that can use pivoting to solve equations.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <seealso cref="T:SpiceSharp.Algebra.ISparseSolver`1" />
            <seealso cref="T:SpiceSharp.Algebra.ISparseMatrix`1"/>
            <seealso cref="T:SpiceSharp.Algebra.ISparseVector`1"/>
            <seealso cref="T:SpiceSharp.Algebra.IPivotingSolver`3" />
        </member>
        <member name="T:SpiceSharp.Algebra.ISparseSolver`1">
            <summary>
            An <see cref="T:SpiceSharp.Algebra.ISolver`1"/> that uses sparse elements internally.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <seealso cref="T:SpiceSharp.Algebra.ISolver`1" />
        </member>
        <member name="M:SpiceSharp.Algebra.ISparseSolver`1.FindElement(SpiceSharp.Algebra.MatrixLocation)">
            <summary>
            Finds the element at the specified location in the matrix.
            </summary>
            <param name="location">The location.</param>
            <returns>
            The element if it exists; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.ISparseSolver`1.FindElement(System.Int32)">
            <summary>
            Finds the element at the specified position in the right-hand side vector.
            </summary>
            <param name="row">The row index.</param>
            <returns>
            The element if it exists; otherwise <c>null</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="row"/> is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.ISparseSolver`1.GetElement(SpiceSharp.Algebra.MatrixLocation)">
            <summary>
            Gets the element at the specified location in the matrix. A new element is
            created if it doesn't exist yet.
            </summary>
            <param name="location">The location.</param>
            <returns>
            The matrix element.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.ISparseSolver`1.GetElement(System.Int32)">
            <summary>
            Gets the element at the specified position in the right-hand side vector.
            A new element is created if it doesn't exist yet.
            </summary>
            <param name="row">The row.</param>
            <returns>
            The vector element.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="row"/> is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.ISparseSolver`1.RemoveElement(SpiceSharp.Algebra.MatrixLocation)">
            <summary>
            Removes a matrix element at the specified location.
            </summary>
            <param name="location">The location.</param>
            <returns>
            <c>true</c> if the element was removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.ISparseSolver`1.RemoveElement(System.Int32)">
            <summary>
            Removes a right-hand side vector element.
            </summary>
            <param name="row">The row.</param>
            <returns>
            <c>true</c> if the element was removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SpiceSharp.Algebra.SparseComplexSolver">
            <summary>
            Class for solving real matrices
            </summary>
            <seealso cref="T:SpiceSharp.Algebra.Solve.SparseLUSolver`1"/>
        </member>
        <member name="F:SpiceSharp.Algebra.SparseComplexSolver._intermediate">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseComplexSolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SparseComplexSolver"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseComplexSolver.ForwardSubstitute(SpiceSharp.Algebra.IVector{System.Numerics.Complex})">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Algebra.SparseComplexSolver.BackwardSubstitute(SpiceSharp.Algebra.IVector{System.Numerics.Complex})">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Algebra.SparseComplexSolver.ComputeDegenerateContribution(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Algebra.SparseComplexSolver.ForwardSubstituteTransposed(SpiceSharp.Algebra.IVector{System.Numerics.Complex})">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Algebra.SparseComplexSolver.BackwardSubstituteTransposed(SpiceSharp.Algebra.IVector{System.Numerics.Complex})">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseComplexSolver.ComputeDegenerateContributionTransposed(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Algebra.SparseComplexSolver.Eliminate(SpiceSharp.Algebra.ISparseMatrixElement{System.Numerics.Complex})">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseComplexSolver.Magnitude(System.Numerics.Complex)">
            <summary>
            Method for finding the magnitude of a complex value.
            </summary>
            <param name="value">The complex value.</param>
            <returns>
            A scalar indicating the magnitude of the complex value.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseComplexSolver.Inverse(System.Numerics.Complex)">
            <summary>
            Calculates the inverse of a complex number.
            </summary>
            <param name="value">The complex value.</param>
            <returns>
            The inverse value.
            </returns>
        </member>
        <member name="T:SpiceSharp.Algebra.SparseRealSolver">
            <summary>
            Class for solving sparse sets of equations with real numbers.
            </summary>
            <seealso cref="T:SpiceSharp.Algebra.Solve.SparseLUSolver`1" />
        </member>
        <member name="F:SpiceSharp.Algebra.SparseRealSolver._intermediate">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseRealSolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SparseRealSolver"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseRealSolver.ForwardSubstitute(SpiceSharp.Algebra.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Algebra.SparseRealSolver.BackwardSubstitute(SpiceSharp.Algebra.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Algebra.SparseRealSolver.ComputeDegenerateContribution(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Algebra.SparseRealSolver.ForwardSubstituteTransposed(SpiceSharp.Algebra.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Algebra.SparseRealSolver.BackwardSubstituteTransposed(SpiceSharp.Algebra.IVector{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseRealSolver.ComputeDegenerateContributionTransposed(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Algebra.SparseRealSolver.Eliminate(SpiceSharp.Algebra.ISparseMatrixElement{System.Double})">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Algebra.DenseVector`1">
            <summary>
            A vector with real values
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <remarks>
            <para>The element at index 0 is considered a "trashcan" element under the hood, consistent to <see cref="T:SpiceSharp.Algebra.SparseMatrix`1" />.
            This doesn't really make a difference for indexing the vector, but it does give different meanings to the length of
            the vector.</para>
            <para>This vector does not automatically expand size if necessary. Under the hood it is basically just an array.</para>
            </remarks>
        </member>
        <member name="P:SpiceSharp.Algebra.DenseVector`1.Length">
            <summary>
            Gets the length of the vector.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.DenseVector`1.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <value>
            The value.
            </value>
            <param name="index">The index.</param>
            <returns>The value.</returns>
        </member>
        <member name="F:SpiceSharp.Algebra.DenseVector`1._values">
            <summary>
            Values
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseVector`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.DenseVector`1"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseVector`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.DenseVector`1"/> class.
            </summary>
            <param name="length">The length of the vector.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseVector`1.GetVectorValue(System.Int32)">
            <summary>
            Gets the value of the vector at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>
            The value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is negative</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseVector`1.SetVectorValue(System.Int32,`0)">
            <summary>
            Sets the value of the vector at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseVector`1.SwapElements(System.Int32,System.Int32)">
            <summary>
            Swaps two elements in the vector.
            </summary>
            <param name="index1">The first index.</param>
            <param name="index2">The second index.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseVector`1.Reset">
            <summary>
            Resets all elements in the vector.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseVector`1.Clear">
            <summary>
            Clears all elements in the vector. The size of the vector becomes 0.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseVector`1.CopyTo(SpiceSharp.Algebra.IVector{`0})">
            <summary>
            Copies the contents of the vector to another one.
            </summary>
            <param name="target">The target vector.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseVector`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:SpiceSharp.Algebra.IVector`1">
            <summary>
            A description of a vector.
            </summary>
            <typeparam name="T">The base type.</typeparam>
        </member>
        <member name="P:SpiceSharp.Algebra.IVector`1.Length">
            <summary>
            Gets the length of the vector.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.IVector`1.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <value>
            The value.
            </value>
            <param name="index">The index.</param>
            <returns>The value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.IVector`1.SwapElements(System.Int32,System.Int32)">
            <summary>
            Swaps two elements in the vector.
            </summary>
            <param name="index1">The first index.</param>
            <param name="index2">The second index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index1"/> or <paramref name="index2"/> is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.IVector`1.CopyTo(SpiceSharp.Algebra.IVector{`0})">
            <summary>
            Copies the contents of the vector to another one.
            </summary>
            <param name="target">The target vector.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="target"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="target"/> does not have the same length as this vector.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.IVector`1.Reset">
            <summary>
            Resets all elements in the vector to their default value.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.IVector`1.Clear">
            <summary>
            Clears all elements in the vector. The size of the vector becomes 0.
            </summary>
        </member>
        <member name="T:SpiceSharp.Algebra.ISparseVector`1">
            <summary>
            Describes a vector that can be stepped through.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.ISparseVector`1.ElementCount">
            <summary>
            Gets the number of elements in the vector.
            </summary>
            <value>
            The element count.
            </value>
        </member>
        <member name="M:SpiceSharp.Algebra.ISparseVector`1.GetFirstInVector">
            <summary>
            Gets the first <see cref="T:SpiceSharp.Algebra.ISparseVectorElement`1"/> in the vector.
            </summary>
            <returns>The first element in the vector.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.ISparseVector`1.GetLastInVector">
            <summary>
            Gets the last <see cref="T:SpiceSharp.Algebra.ISparseVectorElement`1"/> in the vector.
            </summary>
            <returns>
            The last element in the vector.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.ISparseVector`1.GetElement(System.Int32)">
            <summary>
            Gets a vector element at the specified index. If
            it doesn't exist, a new one is created.
            </summary>
            <param name="index">The index.</param>
            <returns>
            The vector element.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.ISparseVector`1.RemoveElement(System.Int32)">
            <summary>
            Removes a vector element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>
            <c>true</c> if the element was removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.ISparseVector`1.FindElement(System.Int32)">
            <summary>
            Finds a vector element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>
            The vector element; otherwise <c>null</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is negative.</exception>
        </member>
        <member name="T:SpiceSharp.Algebra.ISparseVectorElement`1">
            <summary>
            A vector element for an <see cref="T:SpiceSharp.Algebra.ISparseVector`1"/>. This element has links
            to the next and previous elements.
            </summary>
            <typeparam name="T">The base type.</typeparam>
        </member>
        <member name="P:SpiceSharp.Algebra.ISparseVectorElement`1.Value">
            <summary>
            Gets or sets the value of the element.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.ISparseVectorElement`1.Index">
            <summary>
            Gets the index in the vector.
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.ISparseVectorElement`1.Above">
            <summary>
            Gets the nearest <see cref="T:SpiceSharp.Algebra.ISparseVectorElement`1"/> above this one.
            </summary>
            <value>
            The vector element.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.ISparseVectorElement`1.Below">
            <summary>
            Gets the nearest <see cref="T:SpiceSharp.Algebra.ISparseVectorElement`1"/> below this one.
            </summary>
            <value>
            The vector element.
            </value>
        </member>
        <member name="T:SpiceSharp.Algebra.SparseVector`1">
            <summary>
            A vector that uses sparse storage methods with doubly-linked elements.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <seealso cref="T:SpiceSharp.Algebra.ISparseVector`1" />
            <remarks>
            <para>The element at index 0 is considered a "trashcan" element under the hood, consistent to <see cref="T:SpiceSharp.Algebra.SparseMatrix`1" />.
            This doesn't really make a difference for indexing the vector though.
            </para>
            <para>This vector automatically expands size if necessary.</para>
            </remarks>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseVector`1.Length">
            <summary>
            Gets the length of the vector.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseVector`1.ElementCount">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseVector`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseVector`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SparseVector`1"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseVector`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SparseVector`1"/> class.
            </summary>
            <param name="length">The length of the vector.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="length"/> is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseVector`1.GetElement(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseVector`1.RemoveElement(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseVector`1.FindElement(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseVector`1.GetFirstInVector">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseVector`1.GetLastInVector">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseVector`1.CopyTo(SpiceSharp.Algebra.IVector{`0})">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseVector`1.SwapElements(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseVector`1.Reset">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseVector`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseVector`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:SpiceSharp.Algebra.SparseVector`1.Element">
            <summary>
            A vector element for <see cref="T:SpiceSharp.Algebra.SparseVector`1"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseVector`1.Element.Index">
            <summary>
            Gets or sets the index.
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseVector`1.Element.NextInVector">
            <summary>
            Gets or sets the next element in the vector.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseVector`1.Element.PreviousInVector">
            <summary>
            Gets or sets the previous element in the vector.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseVector`1.Element.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SparseVector`1.Element"/> class.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="T:SpiceSharp.Algebra.AlgebraException">
            <summary>
            Sparse matrix exception
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:SpiceSharp.Algebra.AlgebraException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.SpiceSharpException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context info.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.AlgebraException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.AlgebraException"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.AlgebraException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.AlgebraException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.AlgebraException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.AlgebraException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:SpiceSharp.Algebra.SingularException">
            <summary>
            Exception thrown when a matrix is singular.
            </summary>
            <seealso cref="T:SpiceSharp.Algebra.AlgebraException" />
        </member>
        <member name="P:SpiceSharp.Algebra.SingularException.Index">
            <summary>
            Gets the index where the first zero-diagonal element was found.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SingularException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SingularException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SingularException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The serialization info</param>
            <param name="context">The streaming context</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SingularException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SingularException"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SingularException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SingularException"/> class.
            </summary>
            <param name="index">The row/column index where the exception occurred.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SingularException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SingularException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SingularException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SingularException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:SpiceSharp.Attributes.AddBehaviorIfNoAttribute">
            <summary>
            Indicates that a behavior can be created if the specified behavior type
            is requested by the simulation, and if it wasn't created before.
            </summary>
        </member>
        <member name="P:SpiceSharp.Attributes.AddBehaviorIfNoAttribute.Target">
            <summary>
            Gets the target behavior type that needs to be checked.
            </summary>
            <value>
            The target type.
            </value>
        </member>
        <member name="M:SpiceSharp.Attributes.AddBehaviorIfNoAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.AddBehaviorIfNoAttribute"/> class.
            </summary>
            <param name="target">The target behavior.</param>
        </member>
        <member name="T:SpiceSharp.Attributes.AutoGeneratedBehaviorsAttribute">
            <summary>
            An attribute that can be used to indicate that an entity has an auto-generated CreateBehaviors method.
            </summary>
        </member>
        <member name="T:SpiceSharp.Attributes.BehaviorForAttribute">
            <summary>
            Describes a behavior that is created to work for a specified entity type.
            This attribute is used to specify for which entity the behavior is created.
            </summary>
        </member>
        <member name="P:SpiceSharp.Attributes.BehaviorForAttribute.EntityType">
            <summary>
            Gets the entity type that the behavior implementation is targeting.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="P:SpiceSharp.Attributes.BehaviorForAttribute.GenericTypeArguments">
            <summary>
            Gets the generic type arguments that should apply for this behavior when used for the specified entity.
            </summary>
            <value>
            The generic type arguments.
            </value>
        </member>
        <member name="M:SpiceSharp.Attributes.BehaviorForAttribute.#ctor(System.Type,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.BehaviorForAttribute"/> class.
            </summary>
            <param name="entityType">Type of the entity that the behavior is meant for.</param>
            <param name="genericTypeArguments">The generic type arguments if needed.</param>
        </member>
        <member name="M:SpiceSharp.Attributes.BehaviorForAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.BehaviorForAttribute"/> class.
            </summary>
            <param name="entityType">Type of the entity that the behavior is meant for.</param>
        </member>
        <member name="T:SpiceSharp.Attributes.BehaviorRequiresAttribute">
            <summary>
            Indicates that a behavior needs another behavior in order to work.
            </summary>
        </member>
        <member name="P:SpiceSharp.Attributes.BehaviorRequiresAttribute.RequiredBehavior">
            <summary>
            Gets the type of the required behavior.
            </summary>
            <value>
            The required behavior type.
            </value>
        </member>
        <member name="P:SpiceSharp.Attributes.BehaviorRequiresAttribute.GenericTypeParameters">
            <summary>
            Gets the generic parameters of the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Attributes.BehaviorRequiresAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.BehaviorRequiresAttribute"/> class.
            </summary>
            <param name="required">The required type.</param>
        </member>
        <member name="M:SpiceSharp.Attributes.BehaviorRequiresAttribute.#ctor(System.Type,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.BehaviorRequiresAttribute"/> class.
            </summary>
            <param name="required">The required type.</param>
            <param name="genericTypeParameters">The generic parameters.</param>
        </member>
        <member name="T:SpiceSharp.Attributes.SimulationBehaviorAttribute">
            <summary>
            An attribute that can be used to flag an interface as a behavior
            that is relevant for simulations.
            </summary>
        </member>
        <member name="T:SpiceSharp.Attributes.BindingContextForAttribute">
            <summary>
            Describes a binding context that is created to work for a specified entity type.
            This attribute is used to specify for which entity the binding context is created.
            </summary>
        </member>
        <member name="P:SpiceSharp.Attributes.BindingContextForAttribute.EntityType">
            <summary>
            Gets the entity type that the behavior implementation is targeting.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="P:SpiceSharp.Attributes.BindingContextForAttribute.GenericTypeArguments">
            <summary>
            Gets the generic type arguments that should apply for this behavior when used for the specified entity.
            </summary>
            <value>
            The generic type arguments.
            </value>
        </member>
        <member name="M:SpiceSharp.Attributes.BindingContextForAttribute.#ctor(System.Type,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.BehaviorForAttribute"/> class.
            </summary>
            <param name="entityType">Type of the entity that the behavior is meant for.</param>
            <param name="genericTypeArguments">The generic type arguments if needed.</param>
        </member>
        <member name="M:SpiceSharp.Attributes.BindingContextForAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.BehaviorForAttribute"/> class.
            </summary>
            <param name="entityType">Type of the entity that the behavior is meant for.</param>
        </member>
        <member name="T:SpiceSharp.Attributes.ConnectedAttribute">
            <summary>
            Indicates that two pins are connected by a finite impedance at DC. This attribute can be
            applied to an <see cref="T:SpiceSharp.Components.Component" /> to check for floating nodes.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:SpiceSharp.Attributes.ConnectedAttribute.Pin1">
            <summary>
            Gets the first connected pin index.
            </summary>
        </member>
        <member name="P:SpiceSharp.Attributes.ConnectedAttribute.Pin2">
            <summary>
            Gets the second connected pin index.
            </summary>
        </member>
        <member name="M:SpiceSharp.Attributes.ConnectedAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.ConnectedAttribute"/> class.
            </summary>
            <param name="pin1">The first pin index.</param>
            <param name="pin2">The second pin index.</param>
        </member>
        <member name="M:SpiceSharp.Attributes.ConnectedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.ConnectedAttribute"/> class.
            </summary>
        </member>
        <member name="T:SpiceSharp.Attributes.IndependentSourceAttribute">
            <summary>
            Indicates that the circuit component is an independent source. This attribute can
            be applied to a <see cref="T:SpiceSharp.Components.Component" /> to check for the existence of at
            least one independent source.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:SpiceSharp.Attributes.DerivedPropertyAttribute">
            <summary>
            Indicates that a property is derived from other properties.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:SpiceSharp.Attributes.FiniteAttribute">
            <summary>
            An attribute that indicates a finite value for a parameter. This means the value should not be NaN or infinity.
            </summary>
            <remarks>
            If this attribute is used on a private field, the source generator will automatically generate a property.
            </remarks>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:SpiceSharp.Attributes.FiniteAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.LessThanAttribute"/> class.
            </summary>
        </member>
        <member name="T:SpiceSharp.Attributes.GeneratedParametersAttribute">
            <summary>
            Indicates that the class contains parameters for which a set method should be implemented by the source generator.
            </summary>
            <remarks>
            This attribute is used by the SpiceSharpGenerator project to find out if 
            a class needs to be generated.
            </remarks>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:SpiceSharp.Attributes.GreaterThanAttribute">
            <summary>
            An attribute that indicates a minimum value for a parameter.
            </summary>
            <remarks>
            If this attribute is used on a private field, the source generator will automatically generate a property.
            </remarks>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:SpiceSharp.Attributes.GreaterThanAttribute.Minimum">
            <summary>
            Gets the minimum value.
            </summary>
            <value>
            The minimum.
            </value>
        </member>
        <member name="M:SpiceSharp.Attributes.GreaterThanAttribute.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.GreaterThanAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:SpiceSharp.Attributes.GreaterThanOrEqualsAttribute">
            <summary>
            An attribute that indicates a minimum value for a parameter.
            </summary>
            <remarks>
            If this attribute is used on a private field, the source generator will automatically generate a property.
            </remarks>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:SpiceSharp.Attributes.GreaterThanOrEqualsAttribute.Minimum">
            <summary>
            Gets the minimum value.
            </summary>
            <value>
            The minimum.
            </value>
        </member>
        <member name="M:SpiceSharp.Attributes.GreaterThanOrEqualsAttribute.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.GreaterThanAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:SpiceSharp.Attributes.LessThanAttribute">
            <summary>
            An attribute that indicates a maximum value for a parameter.
            </summary>
            <remarks>
            If this attribute is used on a private field, the source generator will automatically generate a property.
            </remarks>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:SpiceSharp.Attributes.LessThanAttribute.Maximum">
            <summary>
            Gets the minimum value.
            </summary>
            <value>
            The minimum.
            </value>
        </member>
        <member name="M:SpiceSharp.Attributes.LessThanAttribute.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.LessThanAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:SpiceSharp.Attributes.LessThanOrEqualsAttribute">
            <summary>
            An attribute that indicates a minimum value for a parameter.
            </summary>
            <remarks>
            If this attribute is used on a private field, the source generator will automatically generate a property.
            </remarks>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:SpiceSharp.Attributes.LessThanOrEqualsAttribute.Maximum">
            <summary>
            Gets the minimum value.
            </summary>
            <value>
            The minimum.
            </value>
        </member>
        <member name="M:SpiceSharp.Attributes.LessThanOrEqualsAttribute.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.LessThanOrEqualsAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:SpiceSharp.Attributes.LowerLimitAttribute">
            <summary>
            An attribute that indicates a minimum limit for a parameter value.
            </summary>
            <remarks>
            If this attribute is used on a private field, the source generator will automatically generate a property.
            </remarks>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:SpiceSharp.Attributes.LowerLimitAttribute.Minimum">
            <summary>
            Gets the minimum value.
            </summary>
            <value>
            The minimum.
            </value>
        </member>
        <member name="M:SpiceSharp.Attributes.LowerLimitAttribute.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.LowerLimitAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:SpiceSharp.Attributes.ParameterInfoAttribute">
            <summary>
            This attribute specifies a description and other metadata of a parameter. It can be applied to a field, property or method
            </summary>
            <remarks>
            If this attribute is used on a private field, the source generator will automatically generate a property.
            </remarks>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:SpiceSharp.Attributes.ParameterInfoAttribute.Description">
            <summary>
            Gets the parameter description.
            </summary>
        </member>
        <member name="P:SpiceSharp.Attributes.ParameterInfoAttribute.Interesting">
            <summary>
            Gets or sets whether or not this parameter is interesting. Defaults to true.
            </summary>
        </member>
        <member name="P:SpiceSharp.Attributes.ParameterInfoAttribute.IsPrincipal">
            <summary>
            Gets or sets whether or not this parameter is a principal design parameter. Defaults to false.
            </summary>
        </member>
        <member name="P:SpiceSharp.Attributes.ParameterInfoAttribute.Units">
            <summary>
            Gets or sets the units of the parameter.
            </summary>
            <value>
            The units.
            </value>
        </member>
        <member name="M:SpiceSharp.Attributes.ParameterInfoAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.ParameterInfoAttribute"/> class.
            </summary>
            <param name="description">The description of the parameter.</param>
        </member>
        <member name="T:SpiceSharp.Attributes.ParameterNameAttribute">
            <summary>
            Specifies the name for a member. It can be applied to properties or method. Multiple names are allowed.
            This attribute is used to find members using reflection.
            </summary>
            <remarks>
            If this attribute is used on a private field, the source generator will automatically generate a property.
            </remarks>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:SpiceSharp.Attributes.ParameterNameAttribute.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="M:SpiceSharp.Attributes.ParameterNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.ParameterNameAttribute"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="T:SpiceSharp.Attributes.UpperLimitAttribute">
            <summary>
            An attribute that indicates a minimum limit for a parameter value.
            </summary>
            <remarks>
            If this attribute is used on a private field, the source generator will automatically generate a property.
            </remarks>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:SpiceSharp.Attributes.UpperLimitAttribute.Maximum">
            <summary>
            Gets the minimum value.
            </summary>
            <value>
            The minimum.
            </value>
        </member>
        <member name="M:SpiceSharp.Attributes.UpperLimitAttribute.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.UpperLimitAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:SpiceSharp.Attributes.PinAttribute">
            <summary>
            Specifies the pins for a circuit component that extends <see cref="T:SpiceSharp.Components.IComponent" />.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:SpiceSharp.Attributes.PinAttribute.Index">
            <summary>
            The index of the pin.
            </summary>
        </member>
        <member name="P:SpiceSharp.Attributes.PinAttribute.Name">
            <summary>
            The name of the pin.
            </summary>
        </member>
        <member name="M:SpiceSharp.Attributes.PinAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.PinAttribute"/> class.
            </summary>
            <param name="index">The index of the pin.</param>
            <param name="name">The name of the pin.</param>
        </member>
        <member name="T:SpiceSharp.Attributes.VoltageDriverAttribute">
            <summary>
            Indicates that two nodes are driven by a voltage source. This attribute can
            be applied to a <see cref="T:SpiceSharp.Components.Component" /> to check for voltage loops.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:SpiceSharp.Attributes.VoltageDriverAttribute.Positive">
            <summary>
            The pin connected to the positive side of the voltage source.
            </summary>
        </member>
        <member name="P:SpiceSharp.Attributes.VoltageDriverAttribute.Negative">
            <summary>
            The pin connected to the negative side of the voltage source.
            </summary>
        </member>
        <member name="M:SpiceSharp.Attributes.VoltageDriverAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.VoltageDriverAttribute"/> class.
            </summary>
            <param name="positive">The positive pin of the source.</param>
            <param name="negative">The negative pin of the source.</param>
        </member>
        <member name="T:SpiceSharp.Components.Common.Contribution`1">
            <summary>
            A container for a contribution between two nodes.
            </summary>
            <remarks>
            Please be careful using this struct, as it is mutable. Its main
            use-case is to make code more readable by grouping variables
            for more complex models, because the conductance and equivalent current
            are often evaluated and passed around together.
            </remarks>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="F:SpiceSharp.Components.Common.Contribution`1.G">
            <summary>
            The equivalent conductance (Y-matrix contribution).
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Common.Contribution`1.C">
            <summary>
            The equivalent current.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Common.Contribution`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Common.Contribution`1"/> struct.
            </summary>
            <param name="g">The equivalent conductance.</param>
            <param name="ceq">The equivalent current.</param>
        </member>
        <member name="M:SpiceSharp.Components.Common.Contribution`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.Common.Contribution`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.Common.Contribution`1.op_Equality(SpiceSharp.Components.Common.Contribution{`0},SpiceSharp.Components.Common.Contribution{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.Common.Contribution`1.op_Inequality(SpiceSharp.Components.Common.Contribution{`0},SpiceSharp.Components.Common.Contribution{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.Common.IEntitiesBehavior">
            <summary>
            A description of a behavior that allows access to any local behaviors.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.IBehavior"/>
        </member>
        <member name="M:SpiceSharp.Components.Common.IEntitiesBehavior.GetState``1">
            <summary>
            Gets a simulation state from a potentially local simulation.
            </summary>
            <typeparam name="S">The simulation state type.</typeparam>
            <returns>The simulation state.</returns>
        </member>
        <member name="M:SpiceSharp.Components.Common.IEntitiesBehavior.TryGetState``1(``0@)">
            <summary>
            Tries to get a simulation state from a potentially local simulation.
            </summary>
            <typeparam name="S">The simulation state type.</typeparam>
            <param name="state">The simulation state.</param>
            <returns>Returns <c>true</c> if the state was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:SpiceSharp.Components.Common.IEntitiesBehavior.LocalBehaviors">
            <summary>
            Gets the local simulation behaviors.
            </summary>
            <value>
            The local behaviors.
            </value>
        </member>
        <member name="T:SpiceSharp.Components.Common.ParameterBehavior`1">
            <summary>
            A behavior with the sole purpose of providing a parameter set.
            </summary>
            <typeparam name="P">The parameter set type.</typeparam>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior" />
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1" />
        </member>
        <member name="P:SpiceSharp.Components.Common.ParameterBehavior`1.Parameters">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Common.ParameterBehavior`1.#ctor(SpiceSharp.Entities.IBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Common.ParameterBehavior`1"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.Components.Common.SimulationWrapper">
            <summary>
            A common wrapper for a simulation. It allows an extra layer of an <see cref="T:SpiceSharp.Simulations.ISimulation"/>.
            The wrapper can inject configurations, states, solved variables, etc.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.ISimulation" />
        </member>
        <member name="P:SpiceSharp.Components.Common.SimulationWrapper.Parent">
            <summary>
            Gets the parent simulation.
            </summary>
            <value>
            The parent simulation.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Common.SimulationWrapper.CurrentRun">
            <inheritdoc />
        </member>
        <member name="P:SpiceSharp.Components.Common.SimulationWrapper.Repeat">
            <inheritdoc />
        </member>
        <member name="P:SpiceSharp.Components.Common.SimulationWrapper.LocalStates">
            <summary>
            Gets the local states. These states are returned first!
            </summary>
            <value>
            The local states.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Common.SimulationWrapper.States">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Common.SimulationWrapper.Behaviors">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Common.SimulationWrapper.Name">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Common.SimulationWrapper.Status">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Common.SimulationWrapper.EntityBehaviors">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Common.SimulationWrapper.ParameterSets">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Common.SimulationWrapper.#ctor(SpiceSharp.Simulations.ISimulation,SpiceSharp.Behaviors.IBehaviorContainerCollection,SpiceSharp.General.ITypeSet{SpiceSharp.Simulations.ISimulationState})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Common.SimulationWrapper"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="behaviors">The behaviors.</param>
            <param name="states">The simulation states.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="parent"/>, <paramref name="behaviors"/> or <paramref name="states"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Common.SimulationWrapper.Run(SpiceSharp.Entities.IEntityCollection,System.Int32)">
            <inheritdoc/>
            <remarks>
            The behaviors are stored in the specified <see cref="P:SpiceSharp.Components.Common.SimulationWrapper.EntityBehaviors"/> of the <see cref="T:SpiceSharp.Components.Common.SimulationWrapper"/>.
            This can be a local collection, allowing you to keep a part of the behaviors separate.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.Common.SimulationWrapper.Rerun(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Common.SimulationWrapper.GetState``1">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Common.SimulationWrapper.TryGetState``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Common.SimulationWrapper.GetParentState``1">
            <summary>
            Gets the state of the parent simulation of the specified type, bypassing any local states.
            </summary>
            <typeparam name="S">The simulation state type.</typeparam>
            <returns>
            The state.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the simulation state is not defined.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Common.SimulationWrapper.TryGetParentState``1(``0@)">
            <summary>
            Tries the state of the get parent simulatio nof the specified type, bypassing any local states.
            </summary>
            <typeparam name="S">The simulation state type.</typeparam>
            <param name="state">The simulation state.</param>
            <returns>
              <c>true</c> if the simulation state exists; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.Common.SimulationWrapper.UsesState``1">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Common.SimulationWrapper.UsesBehaviors``1">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Common.SimulationWrapper.UsesBehavior(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Common.SimulationWrapper.GetParameterSet``1">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Common.SimulationWrapper.TryGetParameterSet``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Common.SimulationWrapper.SetParameter``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Common.SimulationWrapper.TrySetParameter``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Common.SimulationWrapper.GetProperty``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Common.SimulationWrapper.TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Common.SimulationWrapper.CreateParameterSetter``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Common.SimulationWrapper.CreatePropertyGetter``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.CommonBehaviors.CurrentControlledBindingContext">
            <summary>
            A binding context for controlled sources.
            </summary>
            <seealso cref="T:SpiceSharp.Components.ComponentBindingContext" />
            <seealso cref="T:SpiceSharp.Components.CommonBehaviors.ICurrentControlledBindingContext"/>
        </member>
        <member name="P:SpiceSharp.Components.CommonBehaviors.CurrentControlledBindingContext.ControlBehaviors">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.CurrentControlledBindingContext.#ctor(SpiceSharp.Components.ICurrentControllingComponent,SpiceSharp.Simulations.ISimulation,SpiceSharp.Behaviors.IBehaviorContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.CommonBehaviors.CurrentControlledBindingContext" /> class.
            </summary>
            <param name="component">The component that creates the behavior.</param>
            <param name="simulation">The simulation for which the behavior is created.</param>
            <param name="behaviors">The created behaviors.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="component"/> or <paramref name="simulation"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.Components.CommonBehaviors.ICurrentControlledBindingContext">
            <summary>
            An <see cref="T:SpiceSharp.Components.IComponentBindingContext"/> for a current-controlled component.
            </summary>
            <seealso cref="T:SpiceSharp.Components.IComponentBindingContext" />
        </member>
        <member name="P:SpiceSharp.Components.CommonBehaviors.ICurrentControlledBindingContext.ControlBehaviors">
            <summary>
            Gets the behaviors of the controlling source.
            </summary>
            <value>
            The behaviors of the controlling source, or <c>null</c> if it wasn't found.
            </value>
        </member>
        <member name="T:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters">
            <summary>
            Parameters that are common to an independent source.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet"/>
        </member>
        <member name="F:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters._dcValue">
            <summary>
            The DC value of the source.
            </summary>
            <value>
            The DC value.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters.Waveform">
            <summary>
            Gets or sets the waveform description.
            </summary>
            <value>
            The waveform description.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters._acMagnitude">
            <summary>
            Small-signal magnitude.
            </summary>
            <value>
            The small-signal magnitude.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters._acPhase">
            <summary>
            Small-signal phase.
            </summary>
            <value>
            The small-signal phase.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters.SetAc(System.Double[])">
            <summary>
            Sets the small-signal parameters of the source.
            </summary>
            <param name="ac">Parameters.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="ac"/> does not have 0-2 arguments.</exception>
        </member>
        <member name="P:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters.Phasor">
            <summary>
            Gets the phasor represented by the amplitude and phase.
            </summary>
            <value>
            The complex phasor.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters.UpdatePhasor">
            <summary>
            Updates the phasor.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters.Clone">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters.AcPhase">
            <summary>
            Small-signal phase.
            </summary>
            <value>
            The small-signal phase.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters.AcMagnitude">
            <summary>
            Small-signal magnitude.
            </summary>
            <value>
            The small-signal magnitude.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters.DcValue">
            <summary>
            The DC value of the source.
            </summary>
            <value>
            The DC value.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#Components#IWaveformDescription}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#Components#IWaveformDescription}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double[]}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#GivenParameter{System#Double}}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#GivenParameter{System#Double}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.CommonBehaviors.OnePort`1">
            <summary>
            A structure containing the unknowns for a one-port.
            </summary>
            <remarks>
            A one-port is a device with two pins, where the current into one pin
            is equal to the current out of the other.
            </remarks>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="F:SpiceSharp.Components.CommonBehaviors.OnePort`1.Positive">
            <summary>
            The positive node.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.CommonBehaviors.OnePort`1.Negative">
            <summary>
            The negative node.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.OnePort`1.#ctor(SpiceSharp.Simulations.IVariableFactory{SpiceSharp.Simulations.IVariable{`0}},SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.CommonBehaviors.OnePort`1"/> struct.
            </summary>
            <param name="factory">The factory.</param>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
            <exception cref="T:SpiceSharp.NodeMismatchException">Thrown if <paramref name="context"/> does not define exactly 2 nodes.</exception>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.OnePort`1.#ctor(SpiceSharp.Simulations.IVariable{`0},SpiceSharp.Simulations.IVariable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.CommonBehaviors.OnePort`1"/> struct.
            </summary>
            <param name="positive">The positive.</param>
            <param name="negative">The negative.</param>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.OnePort`1.GetMatrixLocations(SpiceSharp.Simulations.IVariableMap)">
            <summary>
            Gets the matrix locations in the order (Positive, Positive), (Positive, Negative), (Negative, Positive), (Negative, Negative).
            </summary>
            <param name="map">The map.</param>
            <returns>An array of matrix locations.</returns>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.OnePort`1.GetRhsIndices(SpiceSharp.Simulations.IVariableMap)">
            <summary>
            Gets the right-hand-side indices, in the order Positive, then Negative.
            </summary>
            <param name="map">The map.</param>
            <returns>An array with indices.</returns>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.OnePort`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.OnePort`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.OnePort`1.op_Equality(SpiceSharp.Components.CommonBehaviors.OnePort{`0},SpiceSharp.Components.CommonBehaviors.OnePort{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.OnePort`1.op_Inequality(SpiceSharp.Components.CommonBehaviors.OnePort{`0},SpiceSharp.Components.CommonBehaviors.OnePort{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.CommonBehaviors.TwoPort`1">
            <summary>
            A structure containing the unknowns for a two-port.
            </summary>
            <remarks>
            A two-port is a device with two ports. Each defined by a voltage over them, and where the current in one
            of the nodes is equal to the current out of the other one of the same port.
            </remarks>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="F:SpiceSharp.Components.CommonBehaviors.TwoPort`1.Left">
            <summary>
            The left port.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.CommonBehaviors.TwoPort`1.Right">
            <summary>
            The right port.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.TwoPort`1.#ctor(SpiceSharp.Simulations.IVariableFactory{SpiceSharp.Simulations.IVariable{`0}},SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.CommonBehaviors.TwoPort`1"/> struct.
            </summary>
            <param name="factory">The factory.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.TwoPort`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.TwoPort`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.TwoPort`1.op_Equality(SpiceSharp.Components.CommonBehaviors.TwoPort{`0},SpiceSharp.Components.CommonBehaviors.TwoPort{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.TwoPort`1.op_Inequality(SpiceSharp.Components.CommonBehaviors.TwoPort{`0},SpiceSharp.Components.CommonBehaviors.TwoPort{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.IBranchedBehavior`1">
            <summary>
            An interface describing a behavior with a branch equation.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.IBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.IBranchedBehavior`1.Branch">
            <summary>
            Gets the branch equation variable.
            </summary>
            <value>
            The branch equation variable.
            </value>
        </member>
        <member name="T:SpiceSharp.Components.ICurrentControllingComponent">
            <summary>
            Describes a component that is current-controlled.
            </summary>
            <seealso cref="T:SpiceSharp.Components.IComponent" />
        </member>
        <member name="P:SpiceSharp.Components.ICurrentControllingComponent.ControllingSource">
            <summary>
            Gets the name of the controlling source.
            </summary>
            <value>
            The controlling source.
            </value>
        </member>
        <member name="T:SpiceSharp.Components.Component">
            <summary>
            A class that represents a (Spice) component/device.
            </summary>
            <seealso cref="T:SpiceSharp.Entities.Entity"/>
            <seealso cref="T:SpiceSharp.Components.IComponent"/>
            <seealso cref="T:SpiceSharp.Validation.IRuleSubject"/>
        </member>
        <member name="P:SpiceSharp.Components.Component.Nodes">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Component.Model">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Component.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Component" /> class.
            </summary>
            <param name="name">The string of the entity.</param>
            <param name="nodeCount">The node count.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Component.Connect(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Component.SpiceSharp#Validation#IRuleSubject#Apply(SpiceSharp.Validation.IRules)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Component.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Component.Clone">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Component`1">
            <summary>
            A class that represents a (Spice) component/device with parameters.
            </summary>
            <typeparam name="P">The component parameter type.</typeparam>
        </member>
        <member name="P:SpiceSharp.Components.Component`1.Parameters">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Component`1.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Component`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="nodeCount">The node count.</param>
        </member>
        <member name="M:SpiceSharp.Components.Component`1.Clone">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.ComponentBindingContext">
            <summary>
            Context for binding an <see cref="T:SpiceSharp.Behaviors.IBehavior" /> created by an <see cref="T:SpiceSharp.Components.IComponent" /> to an <see cref="T:SpiceSharp.Simulations.ISimulation" />.
            </summary>
            <seealso cref="T:SpiceSharp.Entities.BindingContext" />
            <seealso cref="T:SpiceSharp.Components.IComponentBindingContext" />
        </member>
        <member name="P:SpiceSharp.Components.ComponentBindingContext.ModelBehaviors">
            <summary>
            Gets the model behaviors.
            </summary>
            <value>
            The model behaviors.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.ComponentBindingContext.Nodes">
            <summary>
            Gets the nodes that the component is connected to.
            </summary>
            <value>
            The pins.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.ComponentBindingContext.#ctor(SpiceSharp.Components.IComponent,SpiceSharp.Simulations.ISimulation,SpiceSharp.Behaviors.IBehaviorContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Entities.BindingContext"/> class.
            </summary>
            <param name="component">The component creating the behavior.</param>
            <param name="simulation">The simulation for which a behavior is created.</param>
            <param name="behaviors">The behaviors created by the entity.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="component"/> or <paramref name="simulation"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.Components.CurrentControlledCurrentSources.Biasing">
            <summary>
            DC biasing behavior for a <see cref="T:SpiceSharp.Components.CurrentControlledCurrentSource" />.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.IBiasingBehavior"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.CurrentControlledCurrentSources.Parameters"/>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledCurrentSources.Biasing.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledCurrentSources.Biasing.Current">
            <summary>Gets the DC or instantaneous current through the device.</summary><value>The DC or instantaneous current.</value>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledCurrentSources.Biasing.Voltage">
            <summary>Gets the DC or instantaneous voltage over the device.</summary><value>The DC or instantaneous voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledCurrentSources.Biasing.Power">
            <summary>Gets the DC or instantaneous power dissipation by the device.</summary><value>The DC or instantaneous power dissipation.</value>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSources.Biasing.#ctor(SpiceSharp.Components.CommonBehaviors.ICurrentControlledBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.CurrentControlledCurrentSources.Biasing" /> class.
            </summary>
            <param name="context">The context for the behavior.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the simulation does not define an <see cref="T:SpiceSharp.Simulations.IComplexSimulationState"/>.</exception>
            <exception cref="T:SpiceSharp.TypeNotFoundException">Thrown if the controlling entity does not have a behavior of type <see cref="T:SpiceSharp.Components.IBranchedBehavior`1"/>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSources.Biasing.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.CurrentControlledCurrentSources.Frequency">
            <summary>
            Frequency behavior for <see cref="T:SpiceSharp.Components.CurrentControlledCurrentSource"/>
            </summary>
            <seealso cref="T:SpiceSharp.Components.CurrentControlledCurrentSources.Biasing"/>
            <seealso cref="T:SpiceSharp.Behaviors.IFrequencyBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledCurrentSources.Frequency.ComplexVoltage">
            <summary>Gets the complex voltage over the device.</summary><value>The complex voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledCurrentSources.Frequency.ComplexCurrent">
            <summary>Gets the complex current through the device.</summary><value>The complex current.</value>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledCurrentSources.Frequency.ComplexPower">
            <summary>Gets the complex power dissipation by the device.</summary><value>The complex power dissipation.</value>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSources.Frequency.#ctor(SpiceSharp.Components.CommonBehaviors.ICurrentControlledBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.CurrentControlledCurrentSources.Frequency"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSources.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Numerics#Complex}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSources.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.CurrentControlledCurrentSources.Parameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.CurrentControlledCurrentSource"/>
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet"/>
        </member>
        <member name="F:SpiceSharp.Components.CurrentControlledCurrentSources.Parameters._coefficient">
            <summary>
            Gets or sets the current gain of the source.
            </summary>
            <value>
            The current gain.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.CurrentControlledCurrentSources.Parameters._parallelMultiplier">
            <summary>
            Gets or sets the number of resistors in parallel.
            </summary>
            <value>
            The number of resistors in parallel.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledCurrentSources.Parameters.Coefficient">
            <summary>
            Gets or sets the current gain of the source.
            </summary>
            <value>
            The current gain.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledCurrentSources.Parameters.ParallelMultiplier">
            <summary>
            Gets or sets the number of resistors in parallel.
            </summary>
            <value>
            The number of resistors in parallel.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSources.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSources.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.CurrentControlledCurrentSource">
            <summary>
            A current-controlled current source.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Component"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.CurrentControlledCurrentSources.Parameters"/>
            <seealso cref="T:SpiceSharp.Validation.IRuleSubject"/>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledCurrentSource.ControllingSource">
            <summary>
            Gets or sets the name of the controlling entity.
            </summary>
            <value>
            The name of the controlling entity.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.CurrentControlledCurrentSource.PinCount">
            <summary>
            The number of pins for a <see cref="T:SpiceSharp.Components.CurrentControlledCurrentSource"/>.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.CurrentControlledCurrentSource"/> class.
            </summary>
            <param name="name">The name of the current controlled current source.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSource.#ctor(System.String,System.String,System.String,System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.CurrentControlledCurrentSource"/> class.
            </summary>
            <param name="name">The name of the current controlled current source.</param>
            <param name="pos">The positive node.</param>
            <param name="neg">The negative node.</param>
            <param name="voltageSource">The name of the voltage source.</param>
            <param name="gain">The current gain.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSource.SpiceSharp#Validation#IRuleSubject#Apply(SpiceSharp.Validation.IRules)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSource.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.CurrentSources.Accept">
            <summary>
            Accept behavior for a <see cref="T:SpiceSharp.Components.CurrentSource"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.CurrentSources.Biasing"/>
            <seealso cref="T:SpiceSharp.Behaviors.IAcceptBehavior"/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSources.Accept.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.CurrentSources.Accept"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSources.Accept.SpiceSharp#Behaviors#IAcceptBehavior#Probe">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSources.Accept.SpiceSharp#Behaviors#IAcceptBehavior#Accept">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSources.Accept.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.CurrentSources.Biasing">
            <summary>
            DC biasing behavior for a <see cref="T:SpiceSharp.Components.CurrentSource" />.
            </summary>
            <remarks>
            This behavior also includes transient behavior logic. When transient analysis is
            performed, then waveforms need to be used to calculate the operating point anyway.
            </remarks>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.IBiasingBehavior"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters"/>
        </member>
        <member name="P:SpiceSharp.Components.CurrentSources.Biasing.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.CurrentSources.Biasing.Waveform">
            <summary>
            Gets the waveform.
            </summary>
            <value>
            The waveform.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.CurrentSources.Biasing.Voltage">
            <summary>Gets the DC or instantaneous voltage over the device.</summary><value>The DC or instantaneous voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.CurrentSources.Biasing.Power">
            <summary>Gets the DC or instantaneous power dissipation by the device.</summary><value>The DC or instantaneous power dissipation.</value>
        </member>
        <member name="P:SpiceSharp.Components.CurrentSources.Biasing.Current">
            <summary>Gets the DC or instantaneous current through the device.</summary><value>The DC or instantaneous current.</value>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSources.Biasing.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.CurrentSources.Biasing"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSources.Biasing.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSources.Biasing.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.CurrentSources.Frequency">
            <summary>
            Small-signal (AC) behavior for a <see cref="T:SpiceSharp.Components.CurrentSource"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.CurrentSources.Biasing"/>
            <seealso cref="T:SpiceSharp.Behaviors.IFrequencyBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.CurrentSources.Frequency.ComplexVoltage">
            <summary>Gets the complex voltage over the device.</summary><value>The complex voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.CurrentSources.Frequency.ComplexPower">
            <summary>Gets the complex power dissipation by the device.</summary><value>The complex power dissipation.</value>
        </member>
        <member name="P:SpiceSharp.Components.CurrentSources.Frequency.ComplexCurrent">
            <summary>Gets the complex current through the device.</summary><value>The complex current.</value>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSources.Frequency.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.CurrentSources.Frequency"/> class.
            </summary>
            <param name="context">The binding context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSources.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSources.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSources.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Numerics#Complex}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSources.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.CurrentSources.Parameters">
            <summary>
            Parameters for an independent current source.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.CurrentSources.Parameters._parallelMultiplier">
            <summary>
            Gets or sets the number of current sources in parallel.
            </summary>
            <value>
            The number of current sources in parallel.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSources.Parameters.SpiceSharp#ICloneable{SpiceSharp#Components#CurrentSources#Parameters}#Clone">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.CurrentSources.Parameters.ParallelMultiplier">
            <summary>
            Gets or sets the number of current sources in parallel.
            </summary>
            <value>
            The number of current sources in parallel.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSources.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSources.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSources.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#Components#IWaveformDescription}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSources.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#Components#IWaveformDescription}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSources.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double[]}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSources.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#GivenParameter{System#Double}}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSources.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#GivenParameter{System#Double}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.CurrentSource">
            <summary>
            An independent current source.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Component"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters"/>
            <seealso cref="T:SpiceSharp.Validation.IRuleSubject"/>
        </member>
        <member name="F:SpiceSharp.Components.CurrentSource.PinCount">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.CurrentSource"/> class.
            </summary>
            <param name="name">The name of the current source.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSource.#ctor(System.String,System.String,System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.CurrentSource"/> class.
            </summary>
            <param name="name">The name of the current source.</param>
            <param name="pos">The positive node.</param>
            <param name="neg">The negative node.</param>
            <param name="dc">The DC value.</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSource.#ctor(System.String,System.String,System.String,SpiceSharp.Components.IWaveformDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.CurrentSource"/> class.
            </summary>
            <param name="name">The name of the current source.</param>
            <param name="pos">The positive node.</param>
            <param name="neg">The negative node.</param>
            <param name="waveform">The Waveform-object.</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSource.SpiceSharp#Validation#IRuleSubject#Apply(SpiceSharp.Validation.IRules)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSource.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.VoltageControlledCurrentSources.BiasingBehavior">
            <summary>
            DC biasing behavior for a <see cref="T:SpiceSharp.Components.VoltageControlledCurrentSource" />.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.IBiasingBehavior"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.VoltageControlledCurrentSources.Parameters"/>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledCurrentSources.BiasingBehavior.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledCurrentSources.BiasingBehavior.Voltage">
            <summary>Gets the DC or instantaneous voltage over the device.</summary><value>The DC or instantaneous voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledCurrentSources.BiasingBehavior.Current">
            <summary>Gets the DC or instantaneous current through the device.</summary><value>The DC or instantaneous current.</value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledCurrentSources.BiasingBehavior.Power">
            <summary>Gets the DC or instantaneous power dissipation by the device.</summary><value>The DC or instantaneous power dissipation.</value>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSources.BiasingBehavior.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageControlledCurrentSources.BiasingBehavior"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSources.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSources.BiasingBehavior.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.VoltageControlledCurrentSources.FrequencyBehavior">
            <summary>
            AC behavior for a <see cref="T:SpiceSharp.Components.VoltageControlledCurrentSource"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.VoltageControlledCurrentSources.BiasingBehavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.IFrequencyBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledCurrentSources.FrequencyBehavior.ComplexVoltage">
            <summary>Gets the complex voltage over the device.</summary><value>The complex voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledCurrentSources.FrequencyBehavior.ComplexCurrent">
            <summary>Gets the complex current through the device.</summary><value>The complex current.</value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledCurrentSources.FrequencyBehavior.ComplexPower">
            <summary>Gets the complex power dissipation by the device.</summary><value>The complex power dissipation.</value>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSources.FrequencyBehavior.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageControlledCurrentSources.FrequencyBehavior"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSources.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSources.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSources.FrequencyBehavior.SpiceSharp#ParameterSets#IExportPropertySet{System#Numerics#Complex}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSources.FrequencyBehavior.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.VoltageControlledCurrentSources.Parameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.VoltageControlledCurrentSource"/>
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet"/>
        </member>
        <member name="F:SpiceSharp.Components.VoltageControlledCurrentSources.Parameters._transconductance">
            <summary>
            Gets or sets the transconductance gain.
            </summary>
            <value>
            The transconductance gain..
            </value>
        </member>
        <member name="F:SpiceSharp.Components.VoltageControlledCurrentSources.Parameters._parallelMultiplier">
            <summary>
            Gets or sets the number of current sources in parallel.
            </summary>
            <value>
            The number of current sources in parallel.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledCurrentSources.Parameters.Transconductance">
            <summary>
            Gets or sets the transconductance gain.
            </summary>
            <value>
            The transconductance gain..
            </value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledCurrentSources.Parameters.ParallelMultiplier">
            <summary>
            Gets or sets the number of current sources in parallel.
            </summary>
            <value>
            The number of current sources in parallel.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSources.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSources.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.VoltageControlledCurrentSource">
            <summary>
            A voltage-controlled current source.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Component"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Validation.IRuleSubject"/>
            <seealso cref="T:SpiceSharp.Components.VoltageControlledCurrentSources.Parameters"/>
        </member>
        <member name="F:SpiceSharp.Components.VoltageControlledCurrentSource.PinCount">
            <summary>
            The pin count for a voltage-controlled current source.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageControlledCurrentSource"/> class.
            </summary>
            <param name="name">The name of the voltage-controlled current source.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSource.#ctor(System.String,System.String,System.String,System.String,System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageControlledCurrentSource"/> class.
            </summary>
            <param name="name">The name of the voltage-controlled current source.</param>
            <param name="pos">The positive node.</param>
            <param name="neg">The negative node.</param>
            <param name="controlPos">The positive controlling node.</param>
            <param name="controlNeg">The negative controlling node.</param>
            <param name="gain">The transconductance gain.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSource.SpiceSharp#Validation#IRuleSubject#Apply(SpiceSharp.Validation.IRules)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSource.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.Distributed.DelayedSignal">
            <summary>
            This class will keep track of one or more signals and can calculate the delayed version of it.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.Distributed.DelayedSignal.Node">
            <summary>
            A node used for our linked list
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Distributed.DelayedSignal.Delay">
            <summary>
            Gets the delay.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Distributed.DelayedSignal.Size">
            <summary>
            Gets the number of values stored by the delayed signal.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Distributed.DelayedSignal.Item(System.Int32)">
            <summary>
            Gets the current value with the specified index.
            </summary>
            <value>
            The value.
            </value>
            <param name="index">The index.</param>
            <returns>The value.</returns>
        </member>
        <member name="P:SpiceSharp.Components.Distributed.DelayedSignal.InputDerivative">
            <summary>
            The derivative of the delayed signal with respect to the input.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Distributed.DelayedSignal.Values">
            <summary>
            Gets the values at the probed point.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Distributed.DelayedSignal.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Distributed.DelayedSignal"/> class.
            </summary>
            <param name="size">The number of elements to be stored.</param>
            <param name="delay">The amount of time to look back.</param>
        </member>
        <member name="M:SpiceSharp.Components.Distributed.DelayedSignal.Probe(System.Double,System.Boolean)">
            <summary>
            Probes the specified timepoint.
            </summary>
            <param name="time">The time.</param>
            <param name="breakpoint">If <c>true</c>, interpolation will be linear. Else cubic interpolation will be used if possible.</param>
        </member>
        <member name="M:SpiceSharp.Components.Distributed.DelayedSignal.SetProbedValues(System.Double[])">
            <summary>
            Sets the probed values.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:SpiceSharp.Components.Distributed.DelayedSignal.AcceptProbedValues">
            <summary>
            Accepts the last probed values.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Distributed.DelayedSignal.GetValue(System.Int32,System.Int32)">
            <summary>
            Get a tracked value.
            </summary>
            <param name="back">The number of points to go back in time.</param>
            <param name="index">The index.</param>
            <returns>The value in history.</returns>
        </member>
        <member name="M:SpiceSharp.Components.Distributed.DelayedSignal.GetTime(System.Int32)">
            <summary>
            Gets a tracked timepoint.
            </summary>
            <param name="back">The number of points to go back in time.</param>
            <returns>The time point in history.</returns>
        </member>
        <member name="M:SpiceSharp.Components.Distributed.DelayedSignal.MoveReferenceCloseTo(System.Double)">
            <summary>
            Moves the reference such that it has a point left and right of the specified time.
            </summary>
            <param name="time">The time.</param>
        </member>
        <member name="M:SpiceSharp.Components.Distributed.DelayedSignal.Clear">
            <summary>
            Clears any memory in the delayed signal.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.LosslessTransmissionLines.Accept">
            <summary>
            Accept behavior for a <see cref="T:SpiceSharp.Components.LosslessTransmissionLine" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.LosslessTransmissionLines.Time"/>
            <seealso cref="T:SpiceSharp.Behaviors.IAcceptBehavior"/>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLines.Accept.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.LosslessTransmissionLines.Accept"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLines.Accept.SpiceSharp#Behaviors#IAcceptBehavior#Probe">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLines.Accept.SpiceSharp#Behaviors#IAcceptBehavior#Accept">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLines.Accept.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.LosslessTransmissionLines.Biasing">
            <summary>
            Load behavior for a <see cref="T:SpiceSharp.Components.LosslessTransmissionLine" />.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.IBiasingBehavior"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="P:SpiceSharp.Components.LosslessTransmissionLines.Biasing.Parameters"/>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Biasing.BiasingElements">
            <summary>
            Gets the biasing elements.
            </summary>
            <value>
            The biasing elements.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Biasing.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Biasing.BiasingState">
            <summary>
            Gets the state of the biasing.
            </summary>
            <value>
            The state of the biasing.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Biasing.Internal1">
            <summary>
            Gets the left-side internal node.
            </summary>
            <value>
            The left internal node.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Biasing.Internal2">
            <summary>
            Gets the right-side internal node.
            </summary>
            <value>
            The right internal node.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Biasing.Branch1">
            <summary>
            Gets the left-side branch.
            </summary>
            <value>
            The left branch.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Biasing.Branch2">
            <summary>
            Gets the right-side branch.
            </summary>
            <value>
            The right branch.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Biasing.Voltage1">
            <summary>
            Gets the voltage on side 1.
            </summary>
            <value>
            The voltage on side 1.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Biasing.Voltage2">
            <summary>
            Gets the voltage on side 2.
            </summary>
            <value>
            The voltage on side 2.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Biasing.Current1">
            <summary>
            Gets the current on side 1.
            </summary>
            <value>
            The current on side 1.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Biasing.Current2">
            <summary>
            Gets the current on side 2.
            </summary>
            <value>
            The current on side 2.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Biasing.Power1">
            <summary>
            Gets the power on side 1.
            </summary>
            <value>
            The power on side 1.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Biasing.Power2">
            <summary>
            Gets the power on side 2.
            </summary>
            <value>
            The power on side 2.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLines.Biasing.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.LosslessTransmissionLines.Biasing"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLines.Biasing.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLines.Biasing.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.LosslessTransmissionLines.Frequency">
            <summary>
            Frequency behavior for a <see cref="T:SpiceSharp.Components.LosslessTransmissionLine" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.LosslessTransmissionLines.Biasing"/>
            <seealso cref="T:SpiceSharp.Behaviors.IFrequencyBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Frequency.Internal1">
            <summary>
            Gets the left-side internal node.
            </summary>
            <value>
            The left internal node.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Frequency.Internal2">
            <summary>
            Gets the right-side internal node.
            </summary>
            <value>
            The right internal node.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Frequency.Branch1">
            <summary>
            Gets the left-side branch.
            </summary>
            <value>
            The left branch.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Frequency.Branch2">
            <summary>
            Gets the right-side branch.
            </summary>
            <value>
            The right branch.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Frequency.ComplexVoltage1">
            <summary>
            Gets the voltage on side 1.
            </summary>
            <value>
            The voltage on side 1.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Frequency.ComplexVoltage2">
            <summary>
            Gets the voltage on side 2.
            </summary>
            <value>
            The voltage on side 2.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Frequency.ComplexCurrent1">
            <summary>
            Gets the current on side 1.
            </summary>
            <value>
            The current on side 1.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Frequency.ComplexCurrent2">
            <summary>
            Gets the current on side 2.
            </summary>
            <value>
            The current on side 2.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Frequency.ComplexPower1">
            <summary>
            Gets the power on side 1.
            </summary>
            <value>
            The power on side 1.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Frequency.ComplexPower2">
            <summary>
            Gets the power on side 2.
            </summary>
            <value>
            The power on side 2.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLines.Frequency.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.LosslessTransmissionLines.Frequency" /> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLines.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLines.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLines.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Numerics#Complex}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLines.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.LosslessTransmissionLines.Parameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.LosslessTransmissionLine" />.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
        </member>
        <member name="F:SpiceSharp.Components.LosslessTransmissionLines.Parameters._impedance">
            <summary>
            Gets or sets the characteristic impedance.
            </summary>
            <value>
            The characteristic impedance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.LosslessTransmissionLines.Parameters._frequency">
            <summary>
            Gets the frequency specification of the transmission line.
            </summary>
            <value>
            The frequency specification.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.LosslessTransmissionLines.Parameters._delay">
            <summary>
            Gets or sets the transmission delay of the transmission line.
            </summary>
            <value>
            The delay.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.LosslessTransmissionLines.Parameters._normalizedLength">
            <summary>
            Gets normalized length at the given <see cref="P:SpiceSharp.Components.LosslessTransmissionLines.Parameters.Frequency"/>.
            </summary>
            <value>
            The normalized length.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.LosslessTransmissionLines.Parameters._relativeTolerance">
            <summary>
            Gets or sets the relative tolerance used to determine if a breakpoint (where harsh nonlinear behavior occurs) needs to be added.
            </summary>
            <value>
            The relative tolerance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.LosslessTransmissionLines.Parameters._absoluteTolerance">
            <summary>
            Gets or sets the relative tolerance used to determine if a breakpoint (where harsh nonlinear behavior occurs) needs to be added.
            </summary>
            <value>
            The absolute tolerance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Parameters.Admittance">
            <summary>
            Gets the admittance (reciprocal of the impedance).
            </summary>
            <value>
            The admittance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.LosslessTransmissionLines.Parameters._parallelMultiplier">
            <summary>
            Gets or sets the number of transmission lines in parallel.
            </summary>
            <value>
            The number of transmission lines in parallel.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLines.Parameters.CalculateDefaults">
            <summary>
            Method for calculating the default values of derived parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Parameters.RelativeTolerance">
            <summary>
            Gets or sets the relative tolerance used to determine if a breakpoint (where harsh nonlinear behavior occurs) needs to be added.
            </summary>
            <value>
            The relative tolerance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Parameters.Impedance">
            <summary>
            Gets or sets the characteristic impedance.
            </summary>
            <value>
            The characteristic impedance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Parameters.AbsoluteTolerance">
            <summary>
            Gets or sets the relative tolerance used to determine if a breakpoint (where harsh nonlinear behavior occurs) needs to be added.
            </summary>
            <value>
            The absolute tolerance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Parameters.Delay">
            <summary>
            Gets or sets the transmission delay of the transmission line.
            </summary>
            <value>
            The delay.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Parameters.NormalizedLength">
            <summary>
            Gets normalized length at the given <see cref="P:SpiceSharp.Components.LosslessTransmissionLines.Parameters.Frequency"/>.
            </summary>
            <value>
            The normalized length.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Parameters.Frequency">
            <summary>
            Gets the frequency specification of the transmission line.
            </summary>
            <value>
            The frequency specification.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Parameters.ParallelMultiplier">
            <summary>
            Gets or sets the number of transmission lines in parallel.
            </summary>
            <value>
            The number of transmission lines in parallel.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLines.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLines.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLines.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#GivenParameter{System#Double}}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLines.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#GivenParameter{System#Double}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.LosslessTransmissionLines.Time">
            <summary>
            Transient behavior for a <see cref="T:SpiceSharp.Components.LosslessTransmissionLine" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.LosslessTransmissionLines.Biasing"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITimeBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLines.Time.Signals">
            <summary>
            Gets the delayed signals.
            </summary>
            <value>
            The signals.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLines.Time.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.LosslessTransmissionLines.Time" /> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLines.Time.SpiceSharp#Behaviors#ITimeBehavior#InitializeStates">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLines.Time.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.LosslessTransmissionLine">
            <summary>
            A lossless transmission line
            </summary>
            <seealso cref="T:SpiceSharp.Components.Component`1" />
            <seealso cref="T:SpiceSharp.Components.LosslessTransmissionLines.Parameters"/>
        </member>
        <member name="F:SpiceSharp.Components.LosslessTransmissionLine.PinCount">
            <summary>
            The number of pins for a lossless transmission line
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLine.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.LosslessTransmissionLine"/> class.
            </summary>
            <param name="name">The name of the entity.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLine.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.LosslessTransmissionLine"/> class.
            </summary>
            <param name="name">The name of the entity.</param>
            <param name="pos1">The positive terminal on one side.</param>
            <param name="neg1">The negative terminal on one side.</param>
            <param name="pos2">The positive terminal on the other side.</param>
            <param name="neg2">The negative terminal on the other side.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLine.#ctor(System.String,System.String,System.String,System.String,System.String,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.LosslessTransmissionLine"/> class.
            </summary>
            <param name="name">The name of the entity.</param>
            <param name="pos1">The positive terminal on one side.</param>
            <param name="neg1">The negative terminal on one side.</param>
            <param name="pos2">The positive terminal on the other side.</param>
            <param name="neg2">The negative terminal on the other side.</param>
            <param name="impedance">The characteristic impedance.</param>
            <param name="delay">The delay.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLine.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.VoltageDelays.Accept">
            <summary>
            Behavior for accepting time-points for a <see cref="T:SpiceSharp.Components.VoltageDelay"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.VoltageDelays.Time"/>
            <seealso cref="T:SpiceSharp.Behaviors.IAcceptBehavior"/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageDelays.Accept.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageDelays.Accept"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.VoltageDelays.Accept.SpiceSharp#Behaviors#IAcceptBehavior#Probe">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageDelays.Accept.SpiceSharp#Behaviors#IAcceptBehavior#Accept">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageDelays.Accept.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.VoltageDelays.Biasing">
            <summary>
            Biasing behavior for a <see cref="T:SpiceSharp.Components.VoltageDelay" />.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.IBiasingBehavior"/>
            <seealso cref="T:SpiceSharp.Components.IBranchedBehavior`1"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="P:SpiceSharp.Components.VoltageDelays.Biasing.Parameters"/>
        </member>
        <member name="P:SpiceSharp.Components.VoltageDelays.Biasing.Variables">
            <summary>
            Gets the variables.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageDelays.Biasing.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.VoltageDelays.Biasing.Branch">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.VoltageDelays.Biasing.BiasingElements">
            <summary>
            Gets the matrix elements.
            </summary>
            <value>
            The matrix elements.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageDelays.Biasing.Voltage">
            <summary>Gets the DC or instantaneous voltage over the device.</summary><value>The DC or instantaneous voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageDelays.Biasing.Power">
            <summary>Gets the DC or instantaneous power dissipation by the device.</summary><value>The DC or instantaneous power dissipation.</value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageDelays.Biasing.Current">
            <summary>Gets the DC or instantaneous current through the device.</summary><value>The DC or instantaneous current.</value>
        </member>
        <member name="M:SpiceSharp.Components.VoltageDelays.Biasing.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageDelays.Biasing"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.VoltageDelays.Biasing.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageDelays.Biasing.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.VoltageDelays.Frequency">
            <summary>
            Frequency behavior for a <see cref="T:SpiceSharp.Components.VoltageDelay" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.VoltageDelays.Biasing"/>
            <seealso cref="T:SpiceSharp.Behaviors.IFrequencyBehavior"/>
            <seealso cref="T:SpiceSharp.Components.IBranchedBehavior`1"/>
        </member>
        <member name="P:SpiceSharp.Components.VoltageDelays.Frequency.Branch">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.VoltageDelays.Frequency.ComplexVoltage">
            <summary>Gets the complex voltage over the device.</summary><value>The complex voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageDelays.Frequency.ComplexPower">
            <summary>Gets the complex power dissipation by the device.</summary><value>The complex power dissipation.</value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageDelays.Frequency.ComplexCurrent">
            <summary>Gets the complex current through the device.</summary><value>The complex current.</value>
        </member>
        <member name="M:SpiceSharp.Components.VoltageDelays.Frequency.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageDelays.Frequency"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.VoltageDelays.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageDelays.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageDelays.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Numerics#Complex}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageDelays.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.VoltageDelays.Parameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.VoltageDelay" />.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
        </member>
        <member name="F:SpiceSharp.Components.VoltageDelays.Parameters._delay">
            <summary>
            Gets or sets the delay in seconds.
            </summary>
            <value>
            The delay.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.VoltageDelays.Parameters._relativeTolerance">
            <summary>
            Gets or sets the relative tolerance to determine when a breakpoint (heavy nonlinear behavior occurs) needs to be added.
            </summary>
            <value>
            The relative tolerance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.VoltageDelays.Parameters._absoluteTolerance">
            <summary>
            Gets or sets the absolute tolerance to determine when a breakpoint (heavy nonlinear behavior occurs) needs to be added.
            </summary>
            <value>
            The absolute tolerance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageDelays.Parameters.AbsoluteTolerance">
            <summary>
            Gets or sets the absolute tolerance to determine when a breakpoint (heavy nonlinear behavior occurs) needs to be added.
            </summary>
            <value>
            The absolute tolerance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageDelays.Parameters.Delay">
            <summary>
            Gets or sets the delay in seconds.
            </summary>
            <value>
            The delay.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageDelays.Parameters.RelativeTolerance">
            <summary>
            Gets or sets the relative tolerance to determine when a breakpoint (heavy nonlinear behavior occurs) needs to be added.
            </summary>
            <value>
            The relative tolerance.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.VoltageDelays.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageDelays.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.VoltageDelays.Time">
            <summary>
            Time behavior for a <see cref="T:SpiceSharp.Components.VoltageDelay"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.VoltageDelays.Biasing"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITimeBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.VoltageDelays.Time.Signal">
            <summary>
            Gets the delayed signal.
            </summary>
            <value>
            The signal.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.VoltageDelays.Time.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageDelays.Time"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.VoltageDelays.Time.SpiceSharp#Behaviors#ITimeBehavior#InitializeStates">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageDelays.Time.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.VoltageDelay">
            <summary>
            A component that will drive an output to a delayed input voltage.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Component" />
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
        </member>
        <member name="F:SpiceSharp.Components.VoltageDelay.PinCount">
            <summary>
            The voltage delay pin count
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageDelay.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageDelay"/> class.
            </summary>
            <param name="name">The name of the entity.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.VoltageDelay.#ctor(System.String,System.String,System.String,System.String,System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageDelay"/> class.
            </summary>
            <param name="name">The name of the voltage-controlled voltage source.</param>
            <param name="pos">The positive node.</param>
            <param name="neg">The negative node.</param>
            <param name="controlPos">The positive controlling node.</param>
            <param name="controlNeg">The negative controlling node.</param>
            <param name="delay">The delay.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.VoltageDelay.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.IComponent">
            <summary>
            An interface that describes a component that can be connected in a circuit.
            </summary>
            <seealso cref="T:SpiceSharp.Entities.IEntity" />
        </member>
        <member name="P:SpiceSharp.Components.IComponent.Model">
            <summary>
            Gets or sets the name of the component model.
            </summary>
            <value>
            The name of the component model.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.IComponent.Nodes">
            <summary>
            Gets a list of all the nodes that the component is connected to.
            </summary>
            <value>
            The nodes.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.IComponent.Connect(System.String[])">
            <summary>
            Connects the component in the circuit.
            </summary>
            <param name="nodes">The node indices.</param>
            <returns>The instance calling the method for chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="nodes"/> or any of the nodes is <c>null</c>.</exception>
            <exception cref="T:SpiceSharp.NodeMismatchException">Thrown if the number of nodes does not match the pin count of the component.</exception>
        </member>
        <member name="T:SpiceSharp.Components.IComponentBindingContext">
            <summary>
            A template for a binding context to bind component behaviors to simulations.
            </summary>
            <seealso cref="T:SpiceSharp.Entities.IBindingContext" />
        </member>
        <member name="P:SpiceSharp.Components.IComponentBindingContext.ModelBehaviors">
            <summary>
            Gets the model behaviors.
            </summary>
            <value>
            The model behaviors.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.IComponentBindingContext.Nodes">
            <summary>
            Gets the nodes that the component is connected to.
            </summary>
            <value>
            The nodes.
            </value>
        </member>
        <member name="T:SpiceSharp.Components.NoiseSources.NoiseGain">
            <summary>
            Noise generator with fixed gain.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NoiseGain.#ctor(System.String,SpiceSharp.Simulations.IVariable{System.Numerics.Complex},SpiceSharp.Simulations.IVariable{System.Numerics.Complex})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.NoiseSources.NoiseGain" /> class.
            </summary>
            <param name="name">Name of the noise source.</param>
            <param name="pos">The positive node.</param>
            <param name="neg">The negative node.</param>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NoiseGain.Compute(System.Double)">
            <summary>
            Computes the noise density specified gain.
            </summary>
            <param name="gain">The gain.</param>
        </member>
        <member name="T:SpiceSharp.Components.NoiseSources.NoiseShot">
            <summary>
            A noise source that can be described using shot noise models.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.NoiseSource"/>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NoiseShot.#ctor(System.String,SpiceSharp.Simulations.IVariable{System.Numerics.Complex},SpiceSharp.Simulations.IVariable{System.Numerics.Complex})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.NoiseSources.NoiseShot" /> class.
            </summary>
            <param name="name">Name of the noise source.</param>
            <param name="pos">The positive node.</param>
            <param name="neg">The negative node.</param>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NoiseShot.Compute(System.Double)">
            <summary>
            Computes the noise density of shot noise.
            This is equal to 2 * q * I
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.NoiseSources.NoiseThermal">
            <summary>
            A noise source that can be described by Johnson noise (thermal noise) models.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.NoiseSource"/>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NoiseThermal.#ctor(System.String,SpiceSharp.Simulations.IVariable{System.Numerics.Complex},SpiceSharp.Simulations.IVariable{System.Numerics.Complex})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.NoiseSources.NoiseThermal" /> class.
            </summary>
            <param name="name">Name of the noise source.</param>
            <param name="pos">The positive node.</param>
            <param name="neg">The negative node.</param>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NoiseThermal.Compute(System.Double,System.Double)">
            <summary>
            Computes the Johnson or thermal noise output density.
            This is 4 * k * T * G.
            </summary>
            <param name="conductance">The conductance.</param>
            <param name="temperature">The temperature.</param>
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.Accept">
            <summary>
            An <see cref="T:SpiceSharp.Behaviors.IAcceptBehavior"/> for a <see cref="T:SpiceSharp.Components.Parallel"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior" />
            <seealso cref="T:SpiceSharp.Behaviors.IAcceptBehavior" />
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Accept.#ctor(SpiceSharp.Components.ParallelComponents.ParallelBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.ParallelComponents.Accept" /> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Accept.FetchBehaviors(SpiceSharp.Components.ParallelComponents.ParallelBindingContext)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Accept.SpiceSharp#Behaviors#IAcceptBehavior#Probe">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Accept.SpiceSharp#Behaviors#IAcceptBehavior#Accept">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.Biasing">
            <summary>
            An <see cref="T:SpiceSharp.Behaviors.IBiasingBehavior"/> for a <see cref="T:SpiceSharp.Components.Parallel"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior" />
            <seealso cref="T:SpiceSharp.Behaviors.IBiasingBehavior" />
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.Biasing.BiasingSimulationState">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.IBiasingSimulationState"/> that will insert a custom solver that allows concurrent write access.
            </summary>
            <seealso cref="T:SpiceSharp.Components.ParallelComponents.ParallelSolverState`2"/>
            <seealso cref="T:SpiceSharp.Simulations.IBiasingSimulationState" />
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.Biasing.BiasingSimulationState.OldSolution">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Biasing.BiasingSimulationState.#ctor(SpiceSharp.Simulations.IBiasingSimulationState)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.ParallelComponents.Biasing.BiasingSimulationState"/> class.
            </summary>
            <param name="parent">The parent biasing simulation state.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="parent"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Biasing.#ctor(SpiceSharp.Components.ParallelComponents.ParallelBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.ParallelComponents.Biasing" /> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Biasing.FetchBehaviors(SpiceSharp.Components.ParallelComponents.ParallelBindingContext)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Biasing.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.Biasing.IterationSimulationState">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.IIterationSimulationState"/> that allows concurrent access.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IIterationSimulationState" />
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.Biasing.IterationSimulationState.SpiceSharp#Simulations#IIterationSimulationState#Mode">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.Biasing.IterationSimulationState.SpiceSharp#Simulations#IIterationSimulationState#SourceFactor">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.Biasing.IterationSimulationState.SpiceSharp#Simulations#IIterationSimulationState#Gmin">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.Biasing.IterationSimulationState.SpiceSharp#Simulations#IIterationSimulationState#IsConvergent">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Biasing.IterationSimulationState.#ctor(SpiceSharp.Simulations.IIterationSimulationState)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.ParallelComponents.Biasing.IterationSimulationState"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="parent"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.BiasingUpdate">
            <summary>
            An <see cref="T:SpiceSharp.Behaviors.IBiasingUpdateBehavior"/> for a <see cref="T:SpiceSharp.Components.Parallel"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior" />
            <seealso cref="T:SpiceSharp.Behaviors.IBiasingUpdateBehavior" />
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.BiasingUpdate.#ctor(SpiceSharp.Components.ParallelComponents.ParallelBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.ParallelComponents.BiasingUpdate"/> class.
            </summary>
            <param name="context">The binding context.</param>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.BiasingUpdate.FetchBehaviors(SpiceSharp.Components.ParallelComponents.ParallelBindingContext)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.BiasingUpdate.SpiceSharp#Behaviors#IBiasingUpdateBehavior#Update">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.Convergence">
            <summary>
            An <see cref="T:SpiceSharp.Behaviors.IConvergenceBehavior"/> for a <see cref="T:SpiceSharp.Components.Parallel"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.ParallelComponents.Biasing" />
            <seealso cref="T:SpiceSharp.Behaviors.IConvergenceBehavior" />
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Convergence.#ctor(SpiceSharp.Components.ParallelComponents.ParallelBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.ParallelComponents.Convergence" /> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Convergence.FetchBehaviors(SpiceSharp.Components.ParallelComponents.ParallelBindingContext)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Convergence.SpiceSharp#Behaviors#IConvergenceBehavior#IsConvergent">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.EntitiesBehavior">
            <summary>
            A behavior that allows access to the entity behaviors inside the parallel component.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.EntitiesBehavior.GetState``1">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.EntitiesBehavior.TryGetState``1(``0@)">
            <inheritdoc />
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.EntitiesBehavior.LocalBehaviors">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.EntitiesBehavior.#ctor(SpiceSharp.Components.ParallelComponents.ParallelBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.ParallelComponents.EntitiesBehavior"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.EntitiesBehavior.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#Behaviors#IBehaviorContainerCollection}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.Frequency">
            <summary>
            An <see cref="T:SpiceSharp.Behaviors.IFrequencyBehavior" /> for a <see cref="T:SpiceSharp.Components.Parallel" />.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior" />
            <seealso cref="T:SpiceSharp.Behaviors.IFrequencyBehavior" />
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.Frequency.ComplexSimulationState">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.IComplexSimulationState"/> that will insert a custom solver that allows concurrent write access.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IComplexSimulationState" />
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.Frequency.ComplexSimulationState.SpiceSharp#Simulations#IComplexSimulationState#Laplace">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Frequency.ComplexSimulationState.#ctor(SpiceSharp.Simulations.IComplexSimulationState)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.ParallelComponents.Frequency.ComplexSimulationState"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="parent"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Frequency.#ctor(SpiceSharp.Components.ParallelComponents.ParallelBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.ParallelComponents.Frequency" /> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Frequency.FetchBehaviors(SpiceSharp.Components.ParallelComponents.ParallelBindingContext)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.FrequencyUpdate">
            <summary>
            An <see cref="T:SpiceSharp.Behaviors.IFrequencyUpdateBehavior"/> for a <see cref="T:SpiceSharp.Components.Parallel"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior" />
            <seealso cref="T:SpiceSharp.Behaviors.IFrequencyUpdateBehavior" />
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.FrequencyUpdate.#ctor(SpiceSharp.Components.ParallelComponents.ParallelBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.ParallelComponents.FrequencyUpdate" /> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.FrequencyUpdate.FetchBehaviors(SpiceSharp.Components.ParallelComponents.ParallelBindingContext)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.FrequencyUpdate.SpiceSharp#Behaviors#IFrequencyUpdateBehavior#Update">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.Noise">
            <summary>
            An <see cref="T:SpiceSharp.Behaviors.INoiseBehavior"/> for a <see cref="T:SpiceSharp.Components.Parallel"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior" />
            <seealso cref="T:SpiceSharp.Behaviors.INoiseBehavior" />
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.Noise.OutputNoiseDensity">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.Noise.TotalOutputNoise">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.Noise.TotalInputNoise">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Noise.#ctor(SpiceSharp.Components.ParallelComponents.ParallelBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.ParallelComponents.Noise" /> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Noise.FetchBehaviors(SpiceSharp.Components.ParallelComponents.ParallelBindingContext)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Noise.SpiceSharp#Simulations#INoiseSource#Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Noise.SpiceSharp#Behaviors#INoiseBehavior#Load">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Noise.SpiceSharp#Behaviors#INoiseBehavior#Compute">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.Noise.NoiseSimulationState">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.INoiseSimulationState"/> for a <see cref="N:SpiceSharp.Components.ParallelComponents"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.INoiseSimulationState" />
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.Noise.NoiseSimulationState.OutputNoiseDensity">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.Noise.NoiseSimulationState.TotalOutputNoise">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.Noise.NoiseSimulationState.TotalInputNoise">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.Noise.NoiseSimulationState.Point">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Noise.NoiseSimulationState.#ctor(SpiceSharp.Simulations.INoiseSimulationState)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.ParallelComponents.Noise.NoiseSimulationState"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="parent"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.Temperature">
            <summary>
            An <see cref="T:SpiceSharp.Behaviors.ITemperatureBehavior"/> for a <see cref="N:SpiceSharp.Components.ParallelComponents"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior" />
            <seealso cref="T:SpiceSharp.Behaviors.ITemperatureBehavior" />
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Temperature.#ctor(SpiceSharp.Components.ParallelComponents.ParallelBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.ParallelComponents.Temperature" /> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Temperature.FetchBehaviors(SpiceSharp.Components.ParallelComponents.ParallelBindingContext)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Temperature.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.Time">
            <summary>
            An <see cref="T:SpiceSharp.Behaviors.ITimeBehavior"/> for a <see cref="T:SpiceSharp.Components.Parallel"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.ParallelComponents.Convergence" />
            <seealso cref="T:SpiceSharp.Behaviors.ITimeBehavior" />
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Time.#ctor(SpiceSharp.Components.ParallelComponents.ParallelBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.ParallelComponents.Time" /> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Time.FetchBehaviors(SpiceSharp.Components.ParallelComponents.ParallelBindingContext)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Time.SpiceSharp#Behaviors#ITimeBehavior#InitializeStates">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.IParallelBehavior">
            <summary>
            Describes a behavior that can fetch behaviors after a local simulation has executed.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.IParallelBehavior.FetchBehaviors(SpiceSharp.Components.ParallelComponents.ParallelBindingContext)">
            <summary>
            Fetches the behaviors.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.ParallelBindingContext">
            <summary>
            The binding context for a <see cref="T:SpiceSharp.Components.Parallel"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Entities.BindingContext" />
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.ParallelBindingContext.LocalBehaviors">
            <summary>
            Gets the current simulation entity behaviors.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelBindingContext.#ctor(SpiceSharp.Entities.IEntity,SpiceSharp.Components.ParallelComponents.ParallelSimulation,SpiceSharp.Behaviors.IBehaviorContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.ParallelComponents.ParallelBindingContext"/> class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="simulation">The simulation for which behaviors are created.</param>
            <param name="behaviors">The behaviors created by the entity.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entity"/>, <paramref name="simulation"/> or <paramref name="behaviors"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelBindingContext.AddLocalState``1(``0)">
            <summary>
            Sets the state of the local simulation to another one.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <param name="state">The state.</param>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelBindingContext.GetBehaviors``1">
            <summary>
            Gets the behaviors from the local simulation.
            </summary>
            <typeparam name="B">The behavior type.</typeparam>
            <returns>The list of behaviors.</returns>
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.ParallelSimulation">
            <summary>
            A subcircuit simulation that captures created behaviors in a local container.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.ISimulation" />
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.ParallelSimulation.LocalParameters">
            <summary>
            Gets the local configurations.
            </summary>
            <value>
            The local configurations.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSimulation.#ctor(SpiceSharp.Simulations.ISimulation,SpiceSharp.ParameterSets.IParameterSetCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.ParallelComponents.ParallelSimulation"/> class.
            </summary>
            <param name="parent">The parent simulation.</param>
            <param name="parameters">The parallel component parameters.</param>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSimulation.GetState``1">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.ParallelSolver`1">
            <summary>
            An <see cref="T:SpiceSharp.Algebra.ISparseSolver`1"/> that only allows direct access to an element once. All subsequent calls will be
            through a local element.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <seealso cref="T:SpiceSharp.Algebra.ISparseSolver`1" />
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.SpiceSharp#ParameterSets#IParameterSetCollection#GetParameterSet``1">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.SpiceSharp#ParameterSets#IParameterSetCollection#TryGetParameterSet``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.SpiceSharp#ParameterSets#IParameterSetCollection#ParameterSets">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.Degeneracy">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">Thrown when trying to write in a parallel solver.</exception>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.PivotSearchReduction">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">Thrown when trying to write in a parallel solver.</exception>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.NeedsReordering">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">Thrown when trying to write in a parallel solver.</exception>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.IsFactored">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.SpiceSharp#Algebra#ISolver{T}#Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.SpiceSharp#Algebra#ISolver{T}#Item(SpiceSharp.Algebra.MatrixLocation)">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.SpiceSharp#Algebra#ISolver{T}#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.Size">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.#ctor(SpiceSharp.Algebra.ISparsePivotingSolver{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.ParallelComponents.ParallelSolver`1"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.SpiceSharp#Algebra#IPivotingSolver{SpiceSharp#Algebra#ISparseMatrix{T},SpiceSharp#Algebra#ISparseVector{T},T}#Precondition(SpiceSharp.Algebra.PreconditioningMethod{SpiceSharp.Algebra.ISparseMatrix{`0},SpiceSharp.Algebra.ISparseVector{`0},`0})">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.SpiceSharp#Algebra#ISolver{T}#Clear">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.SpiceSharp#Algebra#ISolver{T}#Factor">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.SpiceSharp#Algebra#IPivotingSolver{SpiceSharp#Algebra#ISparseMatrix{T},SpiceSharp#Algebra#ISparseVector{T},T}#OrderAndFactor">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.FindElement(SpiceSharp.Algebra.MatrixLocation)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.FindElement(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.GetElement(SpiceSharp.Algebra.MatrixLocation)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.RemoveElement(SpiceSharp.Algebra.MatrixLocation)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.GetElement(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.RemoveElement(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.Reset">
            <summary>
            Clears all matrix and vector elements.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.SpiceSharp#Algebra#ISolver{T}#ForwardSubstitute(SpiceSharp.Algebra.IVector{`0})">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.SpiceSharp#Algebra#ISolver{T}#BackwardSubstitute(SpiceSharp.Algebra.IVector{`0})">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.SpiceSharp#Algebra#ISolver{T}#ComputeDegenerateContribution(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.SpiceSharp#Algebra#ISolver{T}#ForwardSubstituteTransposed(SpiceSharp.Algebra.IVector{`0})">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.SpiceSharp#Algebra#ISolver{T}#BackwardSubstituteTransposed(SpiceSharp.Algebra.IVector{`0})">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.SpiceSharp#Algebra#ISolver{T}#ComputeDegenerateContributionTransposed(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.SpiceSharp#Algebra#IPivotingSolver{SpiceSharp#Algebra#ISparseMatrix{T},SpiceSharp#Algebra#ISparseVector{T},T}#InternalToExternal(SpiceSharp.Algebra.MatrixLocation)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.SpiceSharp#Algebra#IPivotingSolver{SpiceSharp#Algebra#ISparseMatrix{T},SpiceSharp#Algebra#ISparseVector{T},T}#ExternalToInternal(SpiceSharp.Algebra.MatrixLocation)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.Apply">
            <summary>
            Applies all bridge elements.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.SetParameter``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.TrySetParameter``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.GetProperty``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.CreateParameterSetter``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.CreatePropertyGetter``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.BridgeElement">
            <summary>
            A bridging element.
            </summary>
            <seealso cref="T:SpiceSharp.Algebra.ISparseSolver`1" />
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.BridgeElement.#ctor(SpiceSharp.Algebra.Element{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.BridgeElement"/> class.
            </summary>
            <param name="parent">The parent element.</param>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolver`1.BridgeElement.Apply">
            <summary>
            Applies the value to the parent element.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.ParallelSolverState`2">
            <summary>
            An abstract class with a default implementation for parallel access to solvers
            in parallel components.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <typeparam name="S">The base simulation state type.</typeparam>
            <seealso cref="T:SpiceSharp.Simulations.ISolverSimulationState`1" />
        </member>
        <member name="F:SpiceSharp.Components.ParallelComponents.ParallelSolverState`2.Parent">
            <summary>
            The parent simulation state.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.ParallelSolverState`2.Item(System.String)">
            <summary>
            Gets the variable with the specified name.
            </summary>
            <param name="name">The name of the variable.</param>
            <returns>The variable.</returns>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.ParallelSolverState`2.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.ParallelSolverState`2.Comparer">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.ParallelSolverState`2.Keys">
            <summary>
            Gets an enumerable collection that contains the keys in the dictionary.
            </summary>
            <value>
            The variable names.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.ParallelSolverState`2.Values">
            <summary>
            Gets an enumerable collection that contains the values in the dictionary.
            </summary>
            <value>
            The variables.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.ParallelSolverState`2.Solver">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.ParallelSolverState`2.Solution">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.ParallelSolverState`2.Map">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolverState`2.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.ParallelComponents.ParallelSolverState`2"/> class.
            </summary>
            <param name="parent">The parent simulation state.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="parent"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolverState`2.Reset">
            <summary>
            Resets all elements in the common solver.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolverState`2.Apply">
            <summary>
            Applies the changes to the common solver.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolverState`2.GetSharedVariable(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolverState`2.CreatePrivateVariable(System.String,SpiceSharp.Simulations.Variables.IUnit)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolverState`2.Add(System.String,SpiceSharp.Simulations.IVariable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolverState`2.ContainsKey(System.String)">
            <summary>
            Determines whether the dictionary contains an element that has the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>
              <c>true</c> if the dictionary contains an element that has the specified key; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolverState`2.TryGetValue(System.String,SpiceSharp.Simulations.IVariable{`0}@)">
            <summary>
            Gets the value that is associated with the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <returns>
              <c>true</c> if the dictionary contains a variable that has the specified key; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolverState`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.ParallelSolverState`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.Parameters">
            <summary>
            Base parameters for a <see cref="N:SpiceSharp.Components.ParallelComponents"/>.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.Parameters.Entities">
            <summary>
            Gets or sets the entities that should be run in parallel.
            </summary>
            <value>
            The entities.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.Parameters.WorkDistributors">
            <summary>
            Gets the work distributors.
            </summary>
            <value>
            The work distributors.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Parameters.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Parameters.SetWorkDistributor(System.Collections.Generic.KeyValuePair{System.Type,SpiceSharp.Components.IWorkDistributor})">
            <summary>
            Sets the work distributor for a specified type.
            </summary>
            <param name="pair">The key-value pair.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="pair"/> or the key is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#Entities#IEntityCollection}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#Entities#IEntityCollection}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Collections#Generic#Dictionary{System#Type,SpiceSharp#Components#IWorkDistributor}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Collections#Generic#KeyValuePair{System#Type,SpiceSharp#Components#IWorkDistributor}}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.TPLBooleanAndWorkDistributor">
            <summary>
            An <see cref="T:SpiceSharp.Components.IWorkDistributor`1"/> that combines the results using the boolean And operator.
            </summary>
            <seealso cref="T:SpiceSharp.Components.IWorkDistributor`1" />
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.TPLBooleanAndWorkDistributor.Execute(System.Collections.Generic.IReadOnlyList{System.Func{System.Boolean}})">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.TPLWorkDistributor">
            <summary>
            An <see cref="T:SpiceSharp.Components.IWorkDistributor"/> that simply gives each method its own task using the Task Parallel Library.
            </summary>
            <seealso cref="T:SpiceSharp.Components.IWorkDistributor" />
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.TPLWorkDistributor.Execute(System.Collections.Generic.IReadOnlyList{System.Action})">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.TPLWorkDistributor.Execute``1(System.Collections.Generic.IReadOnlyList{System.Func{``0}})">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.Workload">
            <summary>
            A piece of work that can be executed.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.Workload.Actions">
            <summary>
            Gets the actions.
            </summary>
            <value>
            The actions.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Workload.#ctor(SpiceSharp.Components.IWorkDistributor,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.ParallelComponents.Workload"/> class.
            </summary>
            <param name="distributor">The distributor.</param>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Workload.Execute">
            <summary>
            Executes the work.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.ParallelComponents.Workload`1">
            <summary>
            A piece of work that can be executed.
            </summary>
            <typeparam name="R">The return value.</typeparam>
        </member>
        <member name="P:SpiceSharp.Components.ParallelComponents.Workload`1.Functions">
            <summary>
            Gets the functions.
            </summary>
            <value>
            The functions.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Workload`1.#ctor(SpiceSharp.Components.IWorkDistributor{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.ParallelComponents.Workload`1"/> class.
            </summary>
            <param name="distributor">The distributor.</param>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="M:SpiceSharp.Components.ParallelComponents.Workload`1.Execute">
            <summary>
            Executes the work.
            </summary>
            <returns>The combined result.</returns>
        </member>
        <member name="T:SpiceSharp.Components.IWorkDistributor">
            <summary>
            A distributor of work that can be done in parallel.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.IWorkDistributor.Execute(System.Collections.Generic.IReadOnlyList{System.Action})">
            <summary>
            Executes the specified methods.
            </summary>
            <param name="methods">The methods to be executed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="methods"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.Components.IWorkDistributor`1">
            <summary>
            A distributor of work that can be done in parallel while needing to return a value.
            </summary>
            <typeparam name="R">The return type.</typeparam>
        </member>
        <member name="M:SpiceSharp.Components.IWorkDistributor`1.Execute(System.Collections.Generic.IReadOnlyList{System.Func{`0}})">
            <summary>
            Executes the specified methods and accumulates the result.
            </summary>
            <param name="methods">The methods to be executed.</param>
            <returns>The combined result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="methods"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.Components.Parallel">
            <summary>
            A component that can execute multiple behaviors created by <see cref="T:SpiceSharp.Entities.IEntity"/> instances in parallel.
            </summary>
            <remarks>
            <para>Running entity behaviors in parallel requires shared resources to be locked. Running entities
            in parallel are not a good idea if the entities spend a lot of time accessing these
            shared resources compared to the time they spend actually computing. Especially since
            there is also some overhead in setting up these resources and structures for executing
            behaviors in parallel.</para>
            <para>It is possible to combine entities into a <see cref="T:SpiceSharp.Components.Subcircuit"/> first, and having them use
            a local solver. This keeps the shared resources very limited, allowing each subcircuit to do
            its work without interference from read-write locking. This option is very advantageous if the
            subcircuits are large, but have only a few voltage nodes common with the outside.</para>
            </remarks>
            <seealso cref="T:SpiceSharp.Entities.Entity" />
            <seealso cref="T:SpiceSharp.Components.IComponent" />
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.ParallelComponents.Parameters"/>
        </member>
        <member name="M:SpiceSharp.Components.Parallel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Parallel"/> class.
            </summary>
            <param name="name">The name of the component.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Parallel.#ctor(System.String,SpiceSharp.Entities.IEntity[])">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Parallel"/> class.
            </summary>
            <param name="name">The name of the component.</param>
            <param name="entities">The components that can be executed in parallel.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Parallel.#ctor(System.String,System.Collections.Generic.IEnumerable{SpiceSharp.Entities.IEntity})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Parallel"/> class.
            </summary>
            <param name="name">The name of the component.</param>
            <param name="entities">The components that can be executed in parallel.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Parallel.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Parallel.Apply(SpiceSharp.Validation.IRules)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Capacitor">
            <summary>
            A capacitor
            </summary>
            <seealso cref="T:SpiceSharp.Components.Component"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.Capacitors.Parameters"/>
            <seealso cref="T:SpiceSharp.Validation.IRuleSubject"/>
        </member>
        <member name="F:SpiceSharp.Components.Capacitor.PinCount">
            <summary>
            Gets the pin count.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Capacitor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Capacitor"/> class.
            </summary>
            <param name="name">The name of the capacitor.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Capacitor.#ctor(System.String,System.String,System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Capacitor"/> class.
            </summary>
            <param name="name">The name of the capacitor.</param>
            <param name="pos">The positive node.</param>
            <param name="neg">The negative node.</param>
            <param name="cap">The capacitance value.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> or any node is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Capacitor.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Capacitor"/> class.
            </summary>
            <param name="name">The name of the capacitor.</param>
            <param name="pos">The positive node.</param>
            <param name="neg">The negative node.</param>
            <param name="model">The model name.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> or any node is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Capacitor.SpiceSharp#Validation#IRuleSubject#Apply(SpiceSharp.Validation.IRules)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Capacitor.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.CapacitorModel">
            <summary>
            A model for a semiconductor <see cref="T:SpiceSharp.Components.Capacitor"/>
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.Capacitors.ModelParameters"/>
        </member>
        <member name="M:SpiceSharp.Components.CapacitorModel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.CapacitorModel"/> class.
            </summary>
            <param name="name">The name of the capacitor model.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.CapacitorModel.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.Capacitors.Frequency">
            <summary>
            Frequency behavior for a <see cref="T:SpiceSharp.Components.Capacitor"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Capacitors.Temperature"/>
            <seealso cref="T:SpiceSharp.Behaviors.IFrequencyBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.Capacitors.Frequency.ComplexVoltage">
            <summary>Gets the complex voltage over the device.</summary><value>The complex voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.Capacitors.Frequency.ComplexCurrent">
            <summary>Gets the complex current through the device.</summary><value>The complex current.</value>
        </member>
        <member name="P:SpiceSharp.Components.Capacitors.Frequency.ComplexPower">
            <summary>Gets the complex power dissipation by the device.</summary><value>The complex power dissipation.</value>
        </member>
        <member name="M:SpiceSharp.Components.Capacitors.Frequency.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Capacitors.Frequency"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Capacitors.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Capacitors.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Capacitors.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Numerics#Complex}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Capacitors.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Capacitors.ModelParameters">
            <summary>
            Parameters for a <see cref="T:SpiceSharp.Components.CapacitorModel"/>.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
        </member>
        <member name="F:SpiceSharp.Components.Capacitors.ModelParameters._junctionCap">
            <summary>
            Gets the bottom junction capacitance parameter.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Capacitors.ModelParameters._junctionCapSidewall">
            <summary>
            Gets the junction sidewall capacitance parameter.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Capacitors.ModelParameters._defaultWidth">
            <summary>
            Gets or sets the default width parameter.
            </summary>
            <value>
            The default width.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Capacitors.ModelParameters.Narrow">
            <summary>
            Gets the width correction factor parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Capacitors.ModelParameters.TemperatureCoefficient1">
            <summary>
            Gets the first-order temperature coefficient parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Capacitors.ModelParameters.TemperatureCoefficient2">
            <summary>
            Gets the second-order temperature coefficient parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Capacitors.ModelParameters.NominalTemperatureCelsius">
            <summary>
            Gets or sets the nominal temperature in degrees Celsius.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Capacitors.ModelParameters._nominalTemperature">
            <summary>
            Gets the nominal temperature parameter in degrees Kelvin.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Capacitors.ModelParameters.JunctionCapSidewall">
            <summary>
            Gets the junction sidewall capacitance parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Capacitors.ModelParameters.DefaultWidth">
            <summary>
            Gets or sets the default width parameter.
            </summary>
            <value>
            The default width.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Capacitors.ModelParameters.JunctionCap">
            <summary>
            Gets the bottom junction capacitance parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Capacitors.ModelParameters.NominalTemperature">
            <summary>
            Gets the nominal temperature parameter in degrees Kelvin.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Capacitors.ModelParameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Capacitors.ModelParameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Capacitors.Parameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.Capacitor"/>.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet"/>
        </member>
        <member name="F:SpiceSharp.Components.Capacitors.Parameters._capacitance">
            <summary>
            Gets the capacitance parameter.
            </summary>
            <value>
            The capacitance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Capacitors.Parameters._initialCondition">
            <summary>
            Gets the initial voltage parameter.
            </summary>
            <value>
            The initial voltage.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Capacitors.Parameters._width">
            <summary>
            Gets the width of the capacitor.
            </summary>
            <value>
            The width of the capacitor.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Capacitors.Parameters._length">
            <summary>
            Gets the length of the capacitor.
            </summary>
            <value>
            The length of the capacitor.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Capacitors.Parameters._parallelMultiplier">
            <summary>
            Gets or sets the parallel multiplier.
            </summary>
            <value>
            The parallel multiplier.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Capacitors.Parameters.TemperatureCelsius">
            <summary>
            Gets or sets the temperature in degrees Celsius.
            </summary>
            <value>
            The temperature celsius.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Capacitors.Parameters._temperature">
            <summary>
            Gets the temperature parameter (in degrees Kelvin).
            </summary>
            <value>
            The temperature in Kelvin.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Capacitors.Parameters.InitialCondition">
            <summary>
            Gets the initial voltage parameter.
            </summary>
            <value>
            The initial voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Capacitors.Parameters.Width">
            <summary>
            Gets the width of the capacitor.
            </summary>
            <value>
            The width of the capacitor.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Capacitors.Parameters.Temperature">
            <summary>
            Gets the temperature parameter (in degrees Kelvin).
            </summary>
            <value>
            The temperature in Kelvin.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Capacitors.Parameters.Length">
            <summary>
            Gets the length of the capacitor.
            </summary>
            <value>
            The length of the capacitor.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Capacitors.Parameters.ParallelMultiplier">
            <summary>
            Gets or sets the parallel multiplier.
            </summary>
            <value>
            The parallel multiplier.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Capacitors.Parameters.Capacitance">
            <summary>
            Gets the capacitance parameter.
            </summary>
            <value>
            The capacitance.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Capacitors.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Capacitors.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Capacitors.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#GivenParameter{System#Double}}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Capacitors.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#GivenParameter{System#Double}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Capacitors.Temperature">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.Capacitor" />.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITemperatureBehavior"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.Capacitors.Parameters"/>
        </member>
        <member name="P:SpiceSharp.Components.Capacitors.Temperature.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Capacitors.Temperature.Capacitance">
            <summary>
            Gets the capacitance.
            </summary>
            <value>
            The capacitance.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Capacitors.Temperature.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Capacitors.Temperature"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Capacitors.Temperature.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Capacitors.Temperature.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Capacitors.Time">
            <summary>
            Transient behavior for a <see cref="T:SpiceSharp.Components.Capacitor" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Capacitors.Temperature" />
            <seealso cref="T:SpiceSharp.Behaviors.ITimeBehavior" />
        </member>
        <member name="P:SpiceSharp.Components.Capacitors.Time.Current">
            <summary>Gets the DC or instantaneous current through the device.</summary><value>The DC or instantaneous current.</value>
        </member>
        <member name="P:SpiceSharp.Components.Capacitors.Time.Power">
            <summary>Gets the DC or instantaneous power dissipation by the device.</summary><value>The DC or instantaneous power dissipation.</value>
        </member>
        <member name="P:SpiceSharp.Components.Capacitors.Time.Voltage">
            <summary>Gets the DC or instantaneous voltage over the device.</summary><value>The DC or instantaneous voltage.</value>
        </member>
        <member name="M:SpiceSharp.Components.Capacitors.Time.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Capacitors.Time"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Capacitors.Time.SpiceSharp#Behaviors#ITimeBehavior#InitializeStates">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Capacitors.Time.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Capacitors.Time.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Inductors.Biasing">
            <summary>
            DC biasing behavior for an <see cref="T:SpiceSharp.Components.Inductor" />
            </summary>
            <seealso cref="T:SpiceSharp.Components.Inductors.Temperature"/>
            <seealso cref="T:SpiceSharp.Behaviors.IBiasingBehavior" />
            <seealso cref="T:SpiceSharp.Components.IBranchedBehavior`1" />
        </member>
        <member name="P:SpiceSharp.Components.Inductors.Biasing.Branch">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Inductors.Biasing.Current">
            <summary>Gets the DC or instantaneous current through the device.</summary><value>The DC or instantaneous current.</value>
        </member>
        <member name="P:SpiceSharp.Components.Inductors.Biasing.Voltage">
            <summary>Gets the DC or instantaneous voltage over the device.</summary><value>The DC or instantaneous voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.Inductors.Biasing.Power">
            <summary>Gets the DC or instantaneous power dissipation by the device.</summary><value>The DC or instantaneous power dissipation.</value>
        </member>
        <member name="M:SpiceSharp.Components.Inductors.Biasing.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Inductors.Biasing"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Inductors.Biasing.Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Inductors.Biasing.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Inductors.Frequency">
            <summary>
            Frequency behavior for <see cref="T:SpiceSharp.Components.Inductor"/>
            </summary>
            <seealso cref="T:SpiceSharp.Components.Inductors.Biasing"/>
            <seealso cref="T:SpiceSharp.Behaviors.IFrequencyBehavior"/>
            <seealso cref="T:SpiceSharp.Components.IBranchedBehavior`1"/>
        </member>
        <member name="P:SpiceSharp.Components.Inductors.Frequency.ComplexVoltage">
            <summary>Gets the complex voltage over the device.</summary><value>The complex voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.Inductors.Frequency.ComplexCurrent">
            <summary>Gets the complex current through the device.</summary><value>The complex current.</value>
        </member>
        <member name="P:SpiceSharp.Components.Inductors.Frequency.ComplexPower">
            <summary>Gets the complex power dissipation by the device.</summary><value>The complex power dissipation.</value>
        </member>
        <member name="P:SpiceSharp.Components.Inductors.Frequency.Branch">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Inductors.Frequency.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Inductors.Frequency"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Inductors.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Inductors.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Inductors.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Numerics#Complex}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Inductors.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Inductors.Parameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.Inductor" />
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
        </member>
        <member name="F:SpiceSharp.Components.Inductors.Parameters._inductance">
            <summary>
            Gets the inductance parameter.
            </summary>
            <value>
            The inductance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Inductors.Parameters._initialCondition">
            <summary>
            Gets the initial current parameter.
            </summary>
            <value>
            The initial current.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Inductors.Parameters._parallelMultiplier">
            <summary>
            Gets or sets the parallel multiplier.
            </summary>
            <value>
            The parallel multiplier.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Inductors.Parameters._seriesMultiplier">
            <summary>
            Gets or sets the series multiplier.
            </summary>
            <value>
            The series multiplier.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Inductors.Parameters.InitialCondition">
            <summary>
            Gets the initial current parameter.
            </summary>
            <value>
            The initial current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Inductors.Parameters.Inductance">
            <summary>
            Gets the inductance parameter.
            </summary>
            <value>
            The inductance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Inductors.Parameters.ParallelMultiplier">
            <summary>
            Gets or sets the parallel multiplier.
            </summary>
            <value>
            The parallel multiplier.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Inductors.Parameters.SeriesMultiplier">
            <summary>
            Gets or sets the series multiplier.
            </summary>
            <value>
            The series multiplier.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Inductors.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Inductors.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Inductors.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#GivenParameter{System#Double}}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Inductors.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#GivenParameter{System#Double}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Inductors.Temperature">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.Inductor"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITemperatureBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.Inductors.Temperature.Inductance">
            <summary>
            Gets the inductance of the inductor.
            </summary>
            <value>
            The inductance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Inductors.Temperature.Parameters">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Inductors.Temperature.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Inductors.Temperature"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Inductors.Temperature.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Inductors.Temperature.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Inductors.Time">
            <summary>
            Transient behavior for an <see cref="T:SpiceSharp.Components.Inductor" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Inductors.Biasing"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITimeBehavior"/>
        </member>
        <member name="E:SpiceSharp.Components.Inductors.Time.UpdateFlux">
            <summary>
            Occurs when flux can be updated.
            </summary>
            <remarks>
            This event is used by <see cref="T:SpiceSharp.Components.MutualInductance"/> to couple
            inductors.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Components.Inductors.Time.Flux">
            <summary>
            Gets the flux of the inductor.
            </summary>
            <value>
            The flux of the inductor.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Inductors.Time.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Inductors.Time"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Inductors.Time.SpiceSharp#Behaviors#ITimeBehavior#InitializeStates">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Inductors.Time.Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Inductors.Time.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Inductors.UpdateFluxEventArgs">
            <summary>
            Event arguments used to modify flux through an <see cref="T:SpiceSharp.Components.Inductor"/>.
            </summary>
            <seealso cref="T:System.EventArgs"/>
        </member>
        <member name="P:SpiceSharp.Components.Inductors.UpdateFluxEventArgs.Inductance">
            <summary>
            Gets the inductance of the inductor
            </summary>
            <value>
            The inductance of the inductor.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Inductors.UpdateFluxEventArgs.OriginalFlux">
            <summary>
            Gets the original flux through the inductor
            </summary>
            <value>
            The original flux through the inductor.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Inductors.UpdateFluxEventArgs.Current">
            <summary>
            Gets the original current through the inductor
            </summary>
            <value>
            The original current through the inductor.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Inductors.UpdateFluxEventArgs.Flux">
            <summary>
            Gets the <see cref="T:SpiceSharp.Simulations.IDerivative"/> that represents the flux through the inductor (initially set to the original flux).
            </summary>
            <value>
            The flux of the inductor.
            </value>
            <remarks>
            Change this value if you want to change the flux through the inductor.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.Inductors.UpdateFluxEventArgs.#ctor(System.Double,System.Double,SpiceSharp.Simulations.IDerivative)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Inductors.UpdateFluxEventArgs"/> class.
            </summary>
            <param name="inductance">The current inductance.</param>
            <param name="current">The current.</param>
            <param name="flux">Flux</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="flux"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.Components.Inductor">
            <summary>
            An inductor.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Component"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.Inductors.Parameters"/>
            <seealso cref="T:SpiceSharp.Validation.IRuleSubject"/>
        </member>
        <member name="F:SpiceSharp.Components.Inductor.InductorPinCount">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Inductor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Inductor"/> class.
            </summary>
            <param name="name">The name of the inductor.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Inductor.#ctor(System.String,System.String,System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Inductor"/> class.
            </summary>
            <param name="name">The name of the inductor.</param>
            <param name="pos">The positive node.</param>
            <param name="neg">The negative node.</param>
            <param name="inductance">The inductance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> or any node is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Inductor.SpiceSharp#Validation#IRuleSubject#Apply(SpiceSharp.Validation.IRules)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Inductor.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.MutualInductances.BindingContext">
            <summary>
            Binding context for a <see cref="T:SpiceSharp.Components.MutualInductance"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Entities.BindingContext" />
        </member>
        <member name="P:SpiceSharp.Components.MutualInductances.BindingContext.Inductor1Behaviors">
            <summary>
            Gets the primary inductor behaviors.
            </summary>
            <value>
            The primary inductor behaviors.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.MutualInductances.BindingContext.Inductor2Behaviors">
            <summary>
            Gets the secondary inductor behaviors.
            </summary>
            <value>
            The secondary inductor behaviors.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductances.BindingContext.#ctor(SpiceSharp.Components.MutualInductance,SpiceSharp.Simulations.ISimulation,SpiceSharp.Behaviors.IBehaviorContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.MutualInductances.BindingContext" /> class.
            </summary>
            <param name="component">The component that creates the behavior.</param>
            <param name="simulation">The simulation for which the behavior is created.</param>
            <param name="behaviors">The created behaviors.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="component"/>, <paramref name="simulation"/> or <paramref name="behaviors"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.Components.MutualInductances.Frequency">
            <summary>
            Small-signal behavior for <see cref="T:SpiceSharp.Components.MutualInductance"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.MutualInductances.Temperature"/>
            <seealso cref="T:SpiceSharp.Behaviors.IFrequencyBehavior"/>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductances.Frequency.#ctor(SpiceSharp.Components.MutualInductances.BindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.MutualInductances.Frequency"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductances.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductances.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.MutualInductances.Parameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.MutualInductance"/>
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet"/>
        </member>
        <member name="F:SpiceSharp.Components.MutualInductances.Parameters._coupling">
            <summary>
            Gets or sets the coupling coefficient.
            </summary>
            <value>
            The coupling coefficient.
            </value>
            <remarks>
            A value of 1.0 indicates perfect coupling, and 0.0 will result in no coupling between
            the inductors. The mutual inductance can be computed using M = k*sqrt(L1*L2).
            </remarks>
        </member>
        <member name="P:SpiceSharp.Components.MutualInductances.Parameters.Coupling">
            <summary>
            Gets or sets the coupling coefficient.
            </summary>
            <value>
            The coupling coefficient.
            </value>
            <remarks>
            A value of 1.0 indicates perfect coupling, and 0.0 will result in no coupling between
            the inductors. The mutual inductance can be computed using M = k*sqrt(L1*L2).
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductances.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductances.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductances.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#GivenParameter{System#Double}}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductances.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#GivenParameter{System#Double}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.MutualInductances.Temperature">
            <summary>
            Temperature-dependent calculations for a <see cref="T:SpiceSharp.Components.MutualInductance"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITemperatureBehavior"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.MutualInductances.Parameters"/>
        </member>
        <member name="P:SpiceSharp.Components.MutualInductances.Temperature.Factor">
            <summary>
            Gets the coupling factor.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MutualInductances.Temperature.Parameters">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductances.Temperature.#ctor(SpiceSharp.Components.MutualInductances.BindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.MutualInductances.Temperature"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductances.Temperature.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.MutualInductances.Time">
            <summary>
            Transient behavior for a <see cref="T:SpiceSharp.Components.MutualInductance"/>
            </summary>
            <seealso cref="T:SpiceSharp.Components.MutualInductances.Temperature"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITimeBehavior"/>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductances.Time.#ctor(SpiceSharp.Components.MutualInductances.BindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.MutualInductances.Time"/> class.
            </summary>
            <param name="context">The binding context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductances.Time.UpdateFlux2(System.Object,SpiceSharp.Components.Inductors.UpdateFluxEventArgs)">
            <summary>
            Update the flux through the secondary inductor.
            </summary>
            <param name="sender">Sender</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductances.Time.UpdateFlux1(System.Object,SpiceSharp.Components.Inductors.UpdateFluxEventArgs)">
            <summary>
            Update the flux through the primary inductor.
            </summary>
            <param name="sender">Sender</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductances.Time.SpiceSharp#Behaviors#ITimeBehavior#InitializeStates">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductances.Time.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.MutualInductance">
            <summary>
            A mutual inductance between two inductors.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Component"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.MutualInductances.Parameters"/>
        </member>
        <member name="P:SpiceSharp.Components.MutualInductance.InductorName1">
            <summary>
            Gets or sets the name of the first/primary inductor.
            </summary>
            <value>
            The name of the first/primary inductor.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.MutualInductance.InductorName2">
            <summary>
            Gets or sets the name of the second/secondary inductor.
            </summary>
            <value>
            The name of the second/secondary inductor.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductance.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.MutualInductance"/> class.
            </summary>
            <param name="name">The name of the mutual inductance specification.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductance.#ctor(System.String,System.String,System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.MutualInductance"/> class.
            </summary>
            <param name="name">The name of the mutual inductance specification.</param>
            <param name="inductorName1">The name of the first/primary inductor.</param>
            <param name="inductorName2">The name of the second/secondary inductor.</param>
            <param name="coupling">The coupling coefficient.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductance.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.Resistors.Biasing">
            <summary>
            Biasing behavior for <see cref="T:SpiceSharp.Components.Resistor"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Resistors.Temperature"/>
            <seealso cref="T:SpiceSharp.Behaviors.IBiasingBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.Biasing.Voltage">
            <summary>Gets the DC or instantaneous voltage over the device.</summary><value>The DC or instantaneous voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.Biasing.Current">
            <summary>Gets the DC or instantaneous current through the device.</summary><value>The DC or instantaneous current.</value>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.Biasing.Power">
            <summary>Gets the DC or instantaneous power dissipation by the device.</summary><value>The DC or instantaneous power dissipation.</value>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.Biasing.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Resistors.Biasing"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.Biasing.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.Biasing.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Resistors.Frequency">
            <summary>
            Small-signal behavior for <see cref="T:SpiceSharp.Components.Resistor"/>
            </summary>
            <seealso cref="T:SpiceSharp.Components.Resistors.Biasing"/>
            <seealso cref="T:SpiceSharp.Behaviors.IFrequencyBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.Frequency.ComplexVoltage">
            <summary>Gets the complex voltage over the device.</summary><value>The complex voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.Frequency.ComplexCurrent">
            <summary>Gets the complex current through the device.</summary><value>The complex current.</value>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.Frequency.ComplexPower">
            <summary>Gets the complex power dissipation by the device.</summary><value>The complex power dissipation.</value>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.Frequency.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Resistors.Frequency"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Numerics#Complex}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Resistors.ModelParameters">
            <summary>
            Parameters for a <see cref="T:SpiceSharp.Components.ResistorModel"/>.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet"/>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.ModelParameters.NominalTemperatureCelsius">
            <summary>
            Gets or sets the nominal temperature in degrees Celsius.
            </summary>
            <value>
            The nominal temperature in degrees Celsius.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Resistors.ModelParameters._nominalTemperature">
            <summary>
            Gets or sets the nominal temperature parameter in degrees Kelvin.
            </summary>
            <value>
            The nominal temperature in degrees Kelvin.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.ModelParameters.TemperatureCoefficient1">
            <summary>
            Gets or sets the first-order temperature coefficient parameter.
            </summary>
            <value>
            The temperature coefficient 1.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.ModelParameters.TemperatureCoefficient2">
            <summary>
            Gets or sets the second-order temperature coefficient parameter.
            </summary>
            <value>
            The temperature coefficient 2.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.ModelParameters.ExponentialCoefficient">
            <summary>
            Gets or sets the exponential temperature coefficient parameter.
            </summary>
            <value>
            The exponential temperature coefficient parameter.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.ModelParameters.SheetResistance">
            <summary>
            Gets or sets the sheet resistance.
            </summary>
            <value>
            The sheet resistance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Resistors.ModelParameters._defaultWidth">
            <summary>
            Gets or sets the default width.
            </summary>
            <value>
            The default width.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.ModelParameters.Narrow">
            <summary>
            Gets or sets the narrowing coefficient.
            </summary>
            <value>
            The narrowing coefficient.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.ModelParameters.DefaultWidth">
            <summary>
            Gets or sets the default width.
            </summary>
            <value>
            The default width.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.ModelParameters.NominalTemperature">
            <summary>
            Gets or sets the nominal temperature parameter in degrees Kelvin.
            </summary>
            <value>
            The nominal temperature in degrees Kelvin.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.ModelParameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.ModelParameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.ModelParameters.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#GivenParameter{System#Double}}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.ModelParameters.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#GivenParameter{System#Double}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Resistors.Noise">
            <summary>
            Noise behavior for a <see cref="T:SpiceSharp.Components.Resistor"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Resistors.Frequency"/>
            <seealso cref="T:SpiceSharp.Behaviors.INoiseBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.Noise.OutputNoiseDensity">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.Noise.TotalOutputNoise">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.Noise.TotalInputNoise">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.Noise.Thermal">
            <summary>
            Gets the thermal noise source of the resistor.
            </summary>
            <value>
            The thermal noise source.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.Noise.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Resistors.Noise"/> class.
            </summary>
            <param name="context">The binding context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.Noise.SpiceSharp#Simulations#INoiseSource#Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.Noise.SpiceSharp#Behaviors#INoiseBehavior#Load">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Components.Resistors.Noise.SpiceSharp#Behaviors#INoiseBehavior#Compute">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.Noise.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#Simulations#INoiseSource}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.Noise.SpiceSharp#ParameterSets#IExportPropertySet{System#Numerics#Complex}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.Noise.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Resistors.Parameters">
            <summary>
            Parameters for a <see cref="T:SpiceSharp.Components.Resistor" />.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet"/>
        </member>
        <member name="F:SpiceSharp.Components.Resistors.Parameters.MinimumResistance">
            <summary>
            The minimum resistance for any resistor.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Resistors.Parameters._temperature">
            <summary>
            Gets or sets the temperature parameter in degrees Kelvin.
            </summary>
            <value>
            The temperature of the resistor.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Resistors.Parameters._resistance">
            <summary>
            Gets or sets the resistance of the resistor.
            </summary>
            <value>
            The resistance.
            </value>
            <remarks>
            If the resistance is limited to <see cref="F:SpiceSharp.Components.Resistors.Parameters.MinimumResistance" /> to avoid numerical instability issues. 
            If a 0 Ohm resistance is wanted, consider using an ideal voltage source instead.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.Parameters.TemperatureCelsius">
            <summary>
            Gets or sets the resistor operating temperature in degrees Celsius.
            </summary>
            <value>
            The resistor operating temperature in degrees Celsius.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Resistors.Parameters._width">
            <summary>
            Gets or sets the width of the resistor.
            </summary>
            <value>
            The width of the resistor.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Resistors.Parameters._length">
            <summary>
            Gets or sets the length of the resistor.
            </summary>
            <value>
            The length of the resistor.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Resistors.Parameters._parallelMultiplier">
            <summary>
            Gets or sets the number of resistors in parallel.
            </summary>
            <value>
            The number of resistors in parallel.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Resistors.Parameters._seriesMultiplier">
            <summary>
            Gets or sets the number of resistors in series.
            </summary>
            <value>
            The number of resistors in series.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.Parameters.Temperature">
            <summary>
            Gets or sets the temperature parameter in degrees Kelvin.
            </summary>
            <value>
            The temperature of the resistor.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.Parameters.ParallelMultiplier">
            <summary>
            Gets or sets the number of resistors in parallel.
            </summary>
            <value>
            The number of resistors in parallel.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.Parameters.SeriesMultiplier">
            <summary>
            Gets or sets the number of resistors in series.
            </summary>
            <value>
            The number of resistors in series.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.Parameters.Length">
            <summary>
            Gets or sets the length of the resistor.
            </summary>
            <value>
            The length of the resistor.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.Parameters.Width">
            <summary>
            Gets or sets the width of the resistor.
            </summary>
            <value>
            The width of the resistor.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.Parameters.Resistance">
            <summary>
            Gets or sets the resistance of the resistor.
            </summary>
            <value>
            The resistance.
            </value>
            <remarks>
            If the resistance is limited to <see cref="F:SpiceSharp.Components.Resistors.Parameters.MinimumResistance" /> to avoid numerical instability issues.
            If a 0 Ohm resistance is wanted, consider using an ideal voltage source instead.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#GivenParameter{System#Double}}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#GivenParameter{System#Double}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Resistors.Temperature">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.Resistor"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITemperatureBehavior"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="P:SpiceSharp.Components.Resistors.Temperature.Parameters"/>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.Temperature.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Resistors.Temperature.Conductance">
            <summary>
            Gets the conductance for this resistor.
            </summary>
            <value>
            The conductance.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.Temperature.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Resistors.Temperature"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.Temperature.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Resistors.Temperature.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Resistor">
            <summary>
            A resistor.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Component"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
        </member>
        <member name="F:SpiceSharp.Components.Resistor.ResistorPinCount">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Resistor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Resistor"/> class.
            </summary>
            <param name="name">The name of the resistor.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Resistor.#ctor(System.String,System.String,System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Resistor"/> class.
            </summary>
            <param name="name">The name of the resistor.</param>
            <param name="pos">The positive node.</param>
            <param name="neg">The negative node.</param>
            <param name="res">The resistance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> or any node is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Resistor.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Resistor"/> class.
            </summary>
            <param name="name">The name of the resistor.</param>
            <param name="pos">The positive node.</param>
            <param name="neg">The negative node.</param>
            <param name="model">The model name.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> or any node is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Resistor.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.ResistorModel">
            <summary>
            A model for semiconductor <see cref="T:SpiceSharp.Components.Resistor" />
            </summary>
            <seealso cref="T:SpiceSharp.Entities.Entity" />
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1" />
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1" />
            <seealso cref="T:SpiceSharp.Components.Resistors.ModelParameters" />
        </member>
        <member name="M:SpiceSharp.Components.ResistorModel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.ResistorModel"/> class.
            </summary>
            <param name="name">The name of the model.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.ResistorModel.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.SamplerBehaviors.Accept">
            <summary>
            Time-dependent behavior for a <see cref="T:SpiceSharp.Components.Sampler"/>.
            </summary>
            <remarks>
            This behavior does strictly speaking not need to implement <see cref="T:SpiceSharp.Behaviors.ITimeBehavior"/>, however if
            we don't then will also create the more generic sampler behavior.
            </remarks>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITimeBehavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITruncatingBehavior"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
        </member>
        <member name="P:SpiceSharp.Components.SamplerBehaviors.Accept.Parameters">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Components.SamplerBehaviors.Accept.#ctor(SpiceSharp.Entities.IBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.SamplerBehaviors.Accept"/> class.
            </summary>
            <param name="context">The sampler binding context.</param>
        </member>
        <member name="M:SpiceSharp.Components.SamplerBehaviors.Accept.SpiceSharp#Behaviors#ITimeBehavior#InitializeStates">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.SamplerBehaviors.Accept.SpiceSharp#Behaviors#IAcceptBehavior#Accept">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Components.SamplerBehaviors.Accept.SpiceSharp#Behaviors#ITruncatingBehavior#Evaluate">
            <inheritdoc/>
            <remarks>
            For our sampler, we don't care about truncation errors.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.SamplerBehaviors.Accept.SpiceSharp#Behaviors#ITruncatingBehavior#Prepare">
            <inheritdoc/>
            <remarks>
            Here is where we have a soft-limit to our next timepoint.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.SamplerBehaviors.Accept.SpiceSharp#Behaviors#IAcceptBehavior#Probe">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.SamplerBehaviors.Parameters">
            <summary>
            The parameters for a <see cref="T:SpiceSharp.Components.Sampler"/>.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet"/>
        </member>
        <member name="E:SpiceSharp.Components.SamplerBehaviors.Parameters.ExportSimulationData">
            <summary>
            Occurs when data can be exported.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SamplerBehaviors.Parameters.Points">
            <summary>
            Gets or sets the time-points that need to be hit.
            </summary>
            <value>
            The time-points to be hit.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.SamplerBehaviors.Parameters._minDelta">
            <summary>
            Gets or sets the minimum timestep that needs to be respected by the sampler.
            </summary>
            <value>
            The minimum timestep.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.SamplerBehaviors.Parameters.Export(System.Object,System.EventArgs)">
            <summary>
            Calls the <see cref="E:SpiceSharp.Components.SamplerBehaviors.Parameters.ExportSimulationData"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The argument.</param>
        </member>
        <member name="P:SpiceSharp.Components.SamplerBehaviors.Parameters.MinDelta">
            <summary>
            Gets or sets the minimum timestep that needs to be respected by the sampler.
            </summary>
            <value>
            The minimum timestep.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.SamplerBehaviors.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Collections#Generic#IEnumerable{System#Double}}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.SamplerBehaviors.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Collections#Generic#IEnumerable{System#Double}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.SamplerBehaviors.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.SamplerBehaviors.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Sampler">
            <summary>
            A sampler that forces a time simulation to hit certain time-points
            using timestep truncation.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.SamplerBehaviors.Parameters"/>
        </member>
        <member name="M:SpiceSharp.Components.Sampler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Sampler"/> class.
            </summary>
            <param name="name">The name of the sampler.</param>
        </member>
        <member name="M:SpiceSharp.Components.Sampler.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Sampler"/> class.
            </summary>
            <param name="name">The name of the sampler.</param>
            <param name="timepoints">The timepoints to hit.</param>
        </member>
        <member name="M:SpiceSharp.Components.Sampler.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Double},System.EventHandler{System.EventArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Sampler"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="timepoints">The timepoint.</param>
            <param name="callback">The callback method.</param>
        </member>
        <member name="M:SpiceSharp.Components.Sampler.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.Bipolars.Biasing">
            <summary>
            DC biasing behavior for a <see cref="T:SpiceSharp.Components.BipolarJunctionTransistor" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Bipolars.Temperature"/>
            <seealso cref="T:SpiceSharp.Behaviors.IBiasingBehavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.IConvergenceBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Biasing.BaseConfiguration">
            <summary>
            Gets the base configuration of the simulation.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Biasing.VoltageBe">
            <summary>
            Gets the base-emitter voltage.
            </summary>
            <value>
            The base-emitter voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Biasing.VoltageBc">
            <summary>
            Gets the base-collector voltage.
            </summary>
            <value>
            The base-collector voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Biasing.CollectorCurrent">
            <summary>
            Gets the collector current.
            </summary>
            <value>
            The collector current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Biasing.BaseCurrent">
            <summary>
            Gets the base current.
            </summary>
            <value>
            The base current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Biasing.ConductancePi">
            <summary>
            Gets the small signal input conductance - pi.
            </summary>
            <value>
            The small signal input conductance - pi.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Biasing.ConductanceMu">
            <summary>
            Gets the small signal conductance mu.
            </summary>
            <value>
            The small signal conductance mu.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Biasing.Transconductance">
            <summary>
            Gets the transconductance.
            </summary>
            <value>
            The transconductance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Biasing.OutputConductance">
            <summary>
            Gets the output conductance.
            </summary>
            <value>
            The output conductance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Biasing.ConductanceX">
            <summary>
            Gets the conductance - X.
            </summary>
            <value>
            The conductance - X.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Biasing.Power">
            <summary>
            Gets the instantaneously dissipated power.
            </summary>
            <value>
            The instantaneously dissipated power.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Biasing.CollectorPrime">
            <summary>
            Gets the internal collector node.
            </summary>
            <value>
            The internal collector node.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Biasing.BasePrime">
            <summary>
            Gets the internal base node.
            </summary>
            <value>
            The internal base node.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Biasing.EmitterPrime">
            <summary>
            Gets the internal emitter node.
            </summary>
            <value>
            The internal emitter node.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Biasing.CurrentBe">
            <summary>
            Gets the base-emitter current.
            </summary>
            <value>
            The base-emitter current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Biasing.CurrentBc">
            <summary>
            Gets the base-collector current.
            </summary>
            <value>
            The base-collector current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Biasing.CondBe">
            <summary>
            Gets the base-emitter conductance.
            </summary>
            <value>
            The base-emitter conductance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Biasing.CondBc">
            <summary>
            Gets the base-collector conductance.
            </summary>
            <value>
            The base-collector conductance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Biasing.BaseCharge">
            <summary>
            Gets the base charge.
            </summary>
            <value>
            The base charge.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Biasing.Dqbdvc">
            <summary>
            TODO: Try to factor out this part of the biasing behavior.
            Gets or sets the charge to collector voltage derivative.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Biasing.Dqbdve">
            <summary>
            TODO: Try to factor our this part of the biasing behavior.
            Gets or sets the charge to emitter voltage derivative.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Biasing.Iteration">
            <summary>
            Gets the iteration.
            </summary>
            <value>
            The iteration.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Biasing.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Bipolars.Biasing"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Biasing.Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Biasing.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Biasing.ExcessPhaseCalculation(System.Double@,System.Double@,System.Double@)">
            <summary>
            Excess phase calculation.
            </summary>
            <param name="cc">The collector current.</param>
            <param name="cex">The excess phase current.</param>
            <param name="gex">The excess phase conductance.</param>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Biasing.Initialize(System.Double@,System.Double@)">
            <summary>
            Initializes the voltages for the current iteration.
            </summary>
            <param name="vbe">The base-emitter voltage.</param>
            <param name="vbc">The base-collector voltage.</param>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Biasing.SpiceSharp#Behaviors#IConvergenceBehavior#IsConvergent">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Biasing.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Bipolars.Dynamic">
            <summary>
            Common dynamic (time-dependent) parameter logic for a <see cref="T:SpiceSharp.Components.BipolarJunctionTransistor" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Bipolars.Biasing" />
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Dynamic.CapBe">
            <summary>
            Gets the internal base-emitter capacitance.
            </summary>
            <value>
            The internal base-emitter capacitance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Dynamic.CapBc">
            <summary>
            Gets the internal base-collector capacitance.
            </summary>
            <value>
            The internal base-collector capacitance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Dynamic.CapBx">
            <summary>
            Gets the base-collector capacitance.
            </summary>
            <value>
            The base-collector capacitance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Dynamic.CapCs">
            <summary>
            Gets the collector-substrate capacitance.
            </summary>
            <value>
            The collector-substrate capacitance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Dynamic.ChargeBe">
            <summary>
            Gets or sets the base-emitter charge storage.
            </summary>
            <value>
            The base-emitter charge storage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Dynamic.ChargeBc">
            <summary>
            Gets or sets the base-collector charge storage.
            </summary>
            <value>
            The base-collector charge storage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Dynamic.ChargeBx">
            <summary>
            Gets or sets the base-X charge storage.
            </summary>
            <value>
            The base-X charge storage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Dynamic.ChargeCs">
            <summary>
            Gets or sets the collector-substract charge storage.
            </summary>
            <value>
            The collector-substrate charge storage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Dynamic.Geqcb">
            <summary>
            Gets the small-signal equivalent collector-bulk conductance.
            </summary>
            <value>
            The small-signal equivalent collector-bulk conductance.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Dynamic.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Bipolars.Dynamic"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Dynamic.CalculateCapacitances(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the capacitances.
            </summary>
            <param name="vbe">The base-emitter voltage.</param>
            <param name="vbc">The base-collector voltage.</param>
            <param name="vbx">The base-X voltage.</param>
            <param name="vcs">The collector-substrate voltage.</param>
        </member>
        <member name="T:SpiceSharp.Components.Bipolars.ExcessPhaseEventArgs">
            <summary>
            Event arguments for modifying charges and currents
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ExcessPhaseEventArgs.CollectorCurrent">
            <summary>
            Collector current
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ExcessPhaseEventArgs.BaseCharge">
            <summary>
            Charges on the base
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ExcessPhaseEventArgs.ExcessPhaseCurrent">
            <summary>
            Excess phase current
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ExcessPhaseEventArgs.ExcessPhaseConduct">
            <summary>
            Excess phase conductance
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.Bipolars.Frequency">
            <summary>
            Small-signal behavior for <see cref="T:SpiceSharp.Components.BipolarJunctionTransistor"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Bipolars.Dynamic"/>
            <seealso cref="T:SpiceSharp.Behaviors.IFrequencyBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Frequency.CollectorPrime">
            <summary>
            Gets the internal collector node.
            </summary>
            <value>
            The internal collector node.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Frequency.BasePrime">
            <summary>
            Gets the internal base node.
            </summary>
            <value>
            The internal base node.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Frequency.EmitterPrime">
            <summary>
            Gets the internal emitter node.
            </summary>
            <value>
            The internal emitter node.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Frequency.ComplexVoltageBe">
            <summary>
            Gets the base-emitter voltage.
            </summary>
            <value>
            The base-emitter voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Frequency.ComplexVoltageBc">
            <summary>
            Gets the base-collector voltage.
            </summary>
            <value>
            The base-collector voltage.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Frequency.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Bipolars.Frequency"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Bipolars.ModelParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.BipolarJunctionTransistorModel"/>
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet"/>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters.Npn">
            <summary>
            Scalar used for NPN transistors.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters.Pnp">
            <summary>
            Scalar used for PNP transistors.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.ModelParameters.SetNpn(System.Boolean)">
            <summary>
            Set the model to be an NPN transistor.
            </summary>
            <param name="value">If set to <c>true</c>, the model is set to describe an NPN transistor.</param>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.ModelParameters.SetPnp(System.Boolean)">
            <summary>
            Set the model to be a PNP transistor.
            </summary>
            <param name="value">If set to <c>true</c>, the model is set to describe a PNP transistor.</param>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.TypeName">
            <summary>
            Gets the type of the model ("npn" or "pnp").
            </summary>
            <value>
            The name of the type.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.BipolarType">
            <summary>
            Gets or sets the scalar bipolar type (1.0 for NPN or -1.0 for PNP).
            </summary>
            <value>
            The type of the bipolar.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.NominalTemperatureCelsius">
            <summary>
            Gets or sets the nominal temperature in degrees Celsius.
            </summary>
            <value>
            The nominal temperature in degrees Celsius.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._nominalTemperature">
            <summary>
            Gets or sets the nominal temperature parameter in degrees Kelvin.
            </summary>
            <value>
            The nominal temperature in degrees Kelvin.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._satCur">
            <summary>
            Gets or sets the saturation current.
            </summary>
            <value>
            The saturation current.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._betaF">
            <summary>
            Gets or sets the ideal forward beta parameter.
            </summary>
            <value>
            The ideal forward beta parameter.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._emissionCoefficientForward">
            <summary>
            Gets or sets the forward emission coefficient.
            </summary>
            <value>
            The forward emission coefficient.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._earlyVoltageForward">
            <summary>
            Gets or sets the forward Early voltage.
            </summary>
            <value>
            The forward Early voltage.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._rollOffForward">
            <summary>
            Gets or sets the forward beta roll-off corner current.
            </summary>
            <value>
            The forward beta roll-off corner current.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._leakBeCurrent">
            <summary>
            Gets or sets the base-emitter saturation current.
            </summary>
            <value>
            The base-emitter leakage saturation current.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._leakBeEmissionCoefficient">
            <summary>
            Gets or sets the base-emitter emission coefficient.
            </summary>
            <value>
            The base-emitter emission coefficient.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._betaR">
            <summary>
            Gets or sets the ideal reverse beta parameter.
            </summary>
            <value>
            The ideal reverse beta parameter.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._emissionCoefficientReverse">
            <summary>
            Gets or sets the reverse emission coefficient.
            </summary>
            <value>
            The reverse emission coefficient.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._earlyVoltageReverse">
            <summary>
            Gets or sets the reverse Early voltage.
            </summary>
            <value>
            The reverse Early voltage.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._rollOffReverse">
            <summary>
            Gets or sets the reverse beta roll-off corner current.
            </summary>
            <value>
            The reverse beta roll-off corner current.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._leakBcCurrent">
            <summary>
            Gets or sets the base-collector saturation current.
            </summary>
            <value>
            The base-collector saturation current.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._leakBcEmissionCoefficient">
            <summary>
            Gets or sets the base-collector emission coefficient parameter.
            </summary>
            <value>
            The base-collector emission coefficient.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._baseResist">
            <summary>
            Gets or sets the zero-bias base resistance.
            </summary>
            <value>
            The zero-bias base resistance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._baseCurrentHalfResist">
            <summary>
            Gets or sets the current for base resistance (rb + rbm) / 2.
            </summary>
            <value>
            The current for base resistance = (rb + rbm) / 2.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._minimumBaseResistance">
            <summary>
            Gets or sets the minimum base resistance.
            </summary>
            <value>
            The minimum base resistance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._emitterResistance">
            <summary>
            Gets or sets the emitter resistance.
            </summary>
            <value>
            The emitter resistance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._collectorResistance">
            <summary>
            Gets or sets the collector resistance.
            </summary>
            <value>
            The collector resistance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._depletionCapBe">
            <summary>
            Gets or sets the zero-bias base-emitter depletion capacitance parameter.
            </summary>
            <value>
            The zero-bias base-emitter depletion capacitance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._potentialBe">
            <summary>
            Gets the base-emitter built-in potential.
            </summary>
            <value>
            Gets or sets the base-emitter built-in potential.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._junctionExpBe">
            <summary>
            Gets or sets the base-emitter junction grading coefficient.
            </summary>
            <value>
            The base-emitter junction grading coefficient.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._transitTimeForward">
            <summary>
            Gets or sets the ideal forward transit time.
            </summary>
            <value>
            The ideal forward transit time.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._transitTimeBiasCoefficientForward">
            <summary>
            Gets or sets the coefficient for bias dependence parameter of the forward transit time.
            </summary>
            <value>
            The coefficient for bias dependence of the forward transit time.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._transitTimeForwardVoltageBc">
            <summary>
            Gets or sets the voltage giving the base-collector voltage dependence of the forward transit time.
            </summary>
            <value>
            The voltage giving the base-collector voltage dependence of the forward transit time.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._transitTimeHighCurrentForward">
            <summary>
            Gets the high-current dependence of the forward transit time.
            </summary>
            <value>
            The high-current dependence of the forward transit time.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._excessPhase">
            <summary>
            Gets or sets the excess phase.
            </summary>
            <value>
            The excess phase.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._depletionCapBc">
            <summary>
            Gets or sets the zero-bias base-collector depletion capacitance.
            </summary>
            <value>
            The zero-bias base-collector depletion capacitance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._potentialBc">
            <summary>
            Gets or sets the base-collector built-in potential.
            </summary>
            <value>
            The base-collector built-in potential.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._junctionExpBc">
            <summary>
            Gets or sets the base-collector junction grading coefficient parameter.
            </summary>
            <value>
            The base-collector junction grading coefficient.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._baseFractionBcCap">
            <summary>
            Gets or sets the fraction of base-collector capacitance to the internal base.
            </summary>
            <value>
            The fraction of base-collector capacitance to the internal base.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._transitTimeReverse">
            <summary>
            Gets or sets the ideal reverse transit time.
            </summary>
            <value>
            The ideal reverse transit time.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._capCs">
            <summary>
            Gets the zero-bias collector-substrate capacitance.
            </summary>
            <value>
            The zero-bias collector-substrate capacitance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._potentialSubstrate">
            <summary>
            Gets or sets the substrate junction built-in potential.
            </summary>
            <value>
            The substrate junction built-in potential.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._exponentialSubstrate">
            <summary>
            Gets or sets the substrate junction grading coefficient.
            </summary>
            <value>
            The substrate junction grading coefficient.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._betaExponent">
            <summary>
            Gets or sets the forward and reverse beta temperature exponent.
            </summary>
            <value>
            The forward and reverse beta temperature exponent.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._energyGap">
            <summary>
            Gets the energy gap for saturation current temperature dependency.
            </summary>
            <value>
            The energy gap for saturation current temperature dependency.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._tempExpIs">
            <summary>
            Gets the temperature exponent for the saturation current.
            </summary>
            <value>
            The temperature exponent for the saturation current.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._depletionCapCoefficient">
            <summary>
            Gets the forward bias junction fit parameter.
            </summary>
            <value>
            The forward bias junction fit parameter.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._c2">
            <summary>
            Gets or sets a parameter that is not accessible in Spice 3f5
            </summary>
            <value>
            The scaling parameter c2.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._c4">
            <summary>
            Gets or sets a parameter that is not accessible in Spice 3f5
            </summary>
            <value>
            The scaling parameter c4.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._flickerNoiseCoefficient">
            <summary>
            Gets or sets the flicker noise coefficient.
            </summary>
            <value>
            The flicker noise coefficient.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.ModelParameters._flickerNoiseExponent">
            <summary>
            Gets or sets the flicker noise exponent.
            </summary>
            <value>
            The flicker noise exponent.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.TempExpIs">
            <summary>
            Gets the temperature exponent for the saturation current.
            </summary>
            <value>
            The temperature exponent for the saturation current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.FlickerNoiseExponent">
            <summary>
            Gets or sets the flicker noise exponent.
            </summary>
            <value>
            The flicker noise exponent.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.C4">
            <summary>
            Gets or sets a parameter that is not accessible in Spice 3f5
            </summary>
            <value>
            The scaling parameter c4.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.TransitTimeReverse">
            <summary>
            Gets or sets the ideal reverse transit time.
            </summary>
            <value>
            The ideal reverse transit time.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.BaseCurrentHalfResist">
            <summary>
            Gets or sets the current for base resistance (rb + rbm) / 2.
            </summary>
            <value>
            The current for base resistance = (rb + rbm) / 2.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.LeakBcCurrent">
            <summary>
            Gets or sets the base-collector saturation current.
            </summary>
            <value>
            The base-collector saturation current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.DepletionCapBc">
            <summary>
            Gets or sets the zero-bias base-collector depletion capacitance.
            </summary>
            <value>
            The zero-bias base-collector depletion capacitance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.LeakBeCurrent">
            <summary>
            Gets or sets the base-emitter saturation current.
            </summary>
            <value>
            The base-emitter leakage saturation current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.C2">
            <summary>
            Gets or sets a parameter that is not accessible in Spice 3f5
            </summary>
            <value>
            The scaling parameter c2.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.BaseFractionBcCap">
            <summary>
            Gets or sets the fraction of base-collector capacitance to the internal base.
            </summary>
            <value>
            The fraction of base-collector capacitance to the internal base.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.ExcessPhase">
            <summary>
            Gets or sets the excess phase.
            </summary>
            <value>
            The excess phase.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.TransitTimeForwardVoltageBc">
            <summary>
            Gets or sets the voltage giving the base-collector voltage dependence of the forward transit time.
            </summary>
            <value>
            The voltage giving the base-collector voltage dependence of the forward transit time.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.MinimumBaseResistance">
            <summary>
            Gets or sets the minimum base resistance.
            </summary>
            <value>
            The minimum base resistance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.ExponentialSubstrate">
            <summary>
            Gets or sets the substrate junction grading coefficient.
            </summary>
            <value>
            The substrate junction grading coefficient.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.TransitTimeHighCurrentForward">
            <summary>
            Gets the high-current dependence of the forward transit time.
            </summary>
            <value>
            The high-current dependence of the forward transit time.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.RollOffForward">
            <summary>
            Gets or sets the forward beta roll-off corner current.
            </summary>
            <value>
            The forward beta roll-off corner current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.CollectorResistance">
            <summary>
            Gets or sets the collector resistance.
            </summary>
            <value>
            The collector resistance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.EarlyVoltageForward">
            <summary>
            Gets or sets the forward Early voltage.
            </summary>
            <value>
            The forward Early voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.LeakBcEmissionCoefficient">
            <summary>
            Gets or sets the base-collector emission coefficient parameter.
            </summary>
            <value>
            The base-collector emission coefficient.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.EmissionCoefficientForward">
            <summary>
            Gets or sets the forward emission coefficient.
            </summary>
            <value>
            The forward emission coefficient.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.JunctionExpBc">
            <summary>
            Gets or sets the base-collector junction grading coefficient parameter.
            </summary>
            <value>
            The base-collector junction grading coefficient.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.BaseResist">
            <summary>
            Gets or sets the zero-bias base resistance.
            </summary>
            <value>
            The zero-bias base resistance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.JunctionExpBe">
            <summary>
            Gets or sets the base-emitter junction grading coefficient.
            </summary>
            <value>
            The base-emitter junction grading coefficient.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.BetaF">
            <summary>
            Gets or sets the ideal forward beta parameter.
            </summary>
            <value>
            The ideal forward beta parameter.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.TransitTimeBiasCoefficientForward">
            <summary>
            Gets or sets the coefficient for bias dependence parameter of the forward transit time.
            </summary>
            <value>
            The coefficient for bias dependence of the forward transit time.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.CapCs">
            <summary>
            Gets the zero-bias collector-substrate capacitance.
            </summary>
            <value>
            The zero-bias collector-substrate capacitance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.NominalTemperature">
            <summary>
            Gets or sets the nominal temperature parameter in degrees Kelvin.
            </summary>
            <value>
            The nominal temperature in degrees Kelvin.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.DepletionCapBe">
            <summary>
            Gets or sets the zero-bias base-emitter depletion capacitance parameter.
            </summary>
            <value>
            The zero-bias base-emitter depletion capacitance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.EnergyGap">
            <summary>
            Gets the energy gap for saturation current temperature dependency.
            </summary>
            <value>
            The energy gap for saturation current temperature dependency.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.EmitterResistance">
            <summary>
            Gets or sets the emitter resistance.
            </summary>
            <value>
            The emitter resistance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.BetaExponent">
            <summary>
            Gets or sets the forward and reverse beta temperature exponent.
            </summary>
            <value>
            The forward and reverse beta temperature exponent.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.PotentialBe">
            <summary>
            Gets the base-emitter built-in potential.
            </summary>
            <value>
            Gets or sets the base-emitter built-in potential.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.EmissionCoefficientReverse">
            <summary>
            Gets or sets the reverse emission coefficient.
            </summary>
            <value>
            The reverse emission coefficient.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.TransitTimeForward">
            <summary>
            Gets or sets the ideal forward transit time.
            </summary>
            <value>
            The ideal forward transit time.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.BetaR">
            <summary>
            Gets or sets the ideal reverse beta parameter.
            </summary>
            <value>
            The ideal reverse beta parameter.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.PotentialSubstrate">
            <summary>
            Gets or sets the substrate junction built-in potential.
            </summary>
            <value>
            The substrate junction built-in potential.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.DepletionCapCoefficient">
            <summary>
            Gets the forward bias junction fit parameter.
            </summary>
            <value>
            The forward bias junction fit parameter.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.SatCur">
            <summary>
            Gets or sets the saturation current.
            </summary>
            <value>
            The saturation current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.RollOffReverse">
            <summary>
            Gets or sets the reverse beta roll-off corner current.
            </summary>
            <value>
            The reverse beta roll-off corner current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.EarlyVoltageReverse">
            <summary>
            Gets or sets the reverse Early voltage.
            </summary>
            <value>
            The reverse Early voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.PotentialBc">
            <summary>
            Gets or sets the base-collector built-in potential.
            </summary>
            <value>
            The base-collector built-in potential.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.FlickerNoiseCoefficient">
            <summary>
            Gets or sets the flicker noise coefficient.
            </summary>
            <value>
            The flicker noise coefficient.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelParameters.LeakBeEmissionCoefficient">
            <summary>
            Gets or sets the base-emitter emission coefficient.
            </summary>
            <value>
            The base-emitter emission coefficient.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.ModelParameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Boolean}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.ModelParameters.SpiceSharp#ParameterSets#IExportPropertySet{System#String}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.ModelParameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.ModelParameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.ModelParameters.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#GivenParameter{System#Double}}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.ModelParameters.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#GivenParameter{System#Double}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Bipolars.ModelTemperature">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.BipolarJunctionTransistorModel"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITemperatureBehavior"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.Bipolars.ModelParameters"/>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelTemperature.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelTemperature.InverseEarlyVoltForward">
            <summary>
            Gets the inverse forward Early voltage.
            </summary>
            <value>
            The inverse forward Early voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelTemperature.InverseEarlyVoltReverse">
            <summary>
            Gets the inverse reverse Early voltage.
            </summary>
            <value>
            The inverse reverse Early voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelTemperature.InverseRollOffForward">
            <summary>
            Gets the inverse forward roll-off current.
            </summary>
            <value>
            The inverse forward roll-off current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelTemperature.InverseRollOffReverse">
            <summary>
            Gets the inverse reverse roll-off current.
            </summary>
            <value>
            The inverse reverse roll-off current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelTemperature.CollectorConduct">
            <summary>
            Gets the collector conductance.
            </summary>
            <value>
            The collector conductance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelTemperature.EmitterConduct">
            <summary>
            Gets the emitter conductance.
            </summary>
            <value>
            The emitter conductance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelTemperature.TransitTimeVoltageBcFactor">
            <summary>
            Gets the transit time base-collector voltage factor.
            </summary>
            <value>
            The transit time base-collector factor.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelTemperature.ExcessPhaseFactor">
            <summary>
            Gets the excess phase factor.
            </summary>
            <value>
            The excess phase factor.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelTemperature.Factor1">
            <summary>
            Gets generic factor 1.
            </summary>
            <value>
            The factor1.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelTemperature.Xfc">
            <summary>
            Gets ???.
            </summary>
            <value>
            The XFC.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelTemperature.F2">
            <summary>
            Gets implementation-specific factor 2.
            </summary>
            <value>
            The f2.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelTemperature.F3">
            <summary>
            Gets implementation-specific factor 3.
            </summary>
            <value>
            The f3.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelTemperature.F6">
            <summary>
            Gets implementation-specific factor 6.
            </summary>
            <value>
            The f6.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.ModelTemperature.F7">
            <summary>
            Gets implementation-specific 7.
            </summary>
            <value>
            The f7.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.ModelTemperature.#ctor(SpiceSharp.Entities.IBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Bipolars.ModelTemperature"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.ModelTemperature.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Bipolars.Noise">
            <summary>
            Noise behavior for <see cref="T:SpiceSharp.Components.BipolarJunctionTransistor"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Noise.OutputNoiseDensity">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Noise.TotalOutputNoise">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Noise.TotalInputNoise">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Noise.ThermalCollectorResistor">
            <summary>
            Gets the thermal noise source of the resistor at the collector.
            </summary>
            <value>
            The thermal noise source.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Noise.ThermalBaseResistor">
            <summary>
            Gets the thermal noise source of the resistor at the base.
            </summary>
            <value>
            The thermal noise source.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Noise.ThermalEmitterResistor">
            <summary>
            Gets the thermal noise source of the resistor at the emitter.
            </summary>
            <value>
            The thermal noise source.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Noise.ShotCollectorCurrent">
            <summary>
            Gets the shot noise source of the collector-emitter current.
            </summary>
            <value>
            The shot noise source.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Noise.ShotBaseCurrent">
            <summary>
            Gets the shot noise of the base-emitter current.
            </summary>
            <value>
            The shot noise source.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Noise.Flicker">
            <summary>
            Gets the flicker noise source.
            </summary>
            <value>
            The flicker noise source.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Noise.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Bipolars.Noise"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Noise.SpiceSharp#Simulations#INoiseSource#Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Noise.SpiceSharp#Behaviors#INoiseBehavior#Load">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Noise.SpiceSharp#Behaviors#INoiseBehavior#Compute">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Bipolars.Parameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.BipolarJunctionTransistor"/>.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet"/>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Parameters.TemperatureCelsius">
            <summary>
            Gets or sets the temperature in degrees Celsius.
            </summary>
            <value>
            The temperature in degrees Celsius.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.Parameters._temperature">
            <summary>
            Gets or sets the temperature parameter in degrees Kelvin.
            </summary>
            <value>
            The temperature in degrees Kelvin.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.Parameters._area">
            <summary>
            Gets or sets the area of the transistor.
            </summary>
            <value>
            The area of the transistor.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Parameters.Off">
            <summary>
            Gets or sets whether or not the device is initially off (non-conducting).
            </summary>
            <value>
              <c>true</c> if the device is initially off; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.Parameters._initialVoltageBe">
            <summary>
            Gets the initial base-emitter voltage parameter.
            </summary>
            <value>
            The initial base-emitter voltage.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.Parameters._initialVoltageCe">
            <summary>
            Gets the initial collector-emitter voltage parameter.
            </summary>
            <value>
            The initial collector-emitter voltage.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Bipolars.Parameters._parallelMultiplier">
            <summary>
            Gets or sets the number of bipolar transistors in parallel.
            </summary>
            <value>
            The number of bipolar transistors in parallel.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Parameters.SetIc(System.Double[])">
            <summary>
            Set initial conditions of the device.
            </summary>
            <param name="value">The initial voltages (Vce, Vbe) or just (Vbe).</param>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Parameters.Area">
            <summary>
            Gets or sets the area of the transistor.
            </summary>
            <value>
            The area of the transistor.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Parameters.InitialVoltageBe">
            <summary>
            Gets the initial base-emitter voltage parameter.
            </summary>
            <value>
            The initial base-emitter voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Parameters.Temperature">
            <summary>
            Gets or sets the temperature parameter in degrees Kelvin.
            </summary>
            <value>
            The temperature in degrees Kelvin.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Parameters.InitialVoltageCe">
            <summary>
            Gets the initial collector-emitter voltage parameter.
            </summary>
            <value>
            The initial collector-emitter voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Parameters.ParallelMultiplier">
            <summary>
            Gets or sets the number of bipolar transistors in parallel.
            </summary>
            <value>
            The number of bipolar transistors in parallel.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Boolean}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Boolean}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double[]}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#GivenParameter{System#Double}}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#GivenParameter{System#Double}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Bipolars.Temperature">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.BipolarJunctionTransistor" />.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior" />
            <seealso cref="T:SpiceSharp.Behaviors.ITemperatureBehavior" />
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1" />
            <seealso cref="T:SpiceSharp.Components.Bipolars.Parameters"/>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Temperature.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Temperature.ModelParameters">
            <summary>
            Gets the model parameters.
            </summary>
            <value>
            The model parameters.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Temperature.ModelTemperature">
            <summary>
            Gets the model temperature behavior.
            </summary>
            <value>
            The model temperature behavior.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Temperature.TempSaturationCurrent">
            <summary>
            Gets the temperature-modified saturation current.
            </summary>
            <value>
            The temperature-modified saturation current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Temperature.TempBetaForward">
            <summary>
            Gets the temperature-modified forward beta.
            </summary>
            <value>
            The temperature-modified forward beta.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Temperature.TempBetaReverse">
            <summary>
            Gets the temperature-modified reverse beta.
            </summary>
            <value>
            The temperature-modified reverse beta.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Temperature.TempBeLeakageCurrent">
            <summary>
            Gets the temperature-modified base-emitter saturation current.
            </summary>
            <value>
            the temperature-modified base-emitter saturation current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Temperature.TempBcLeakageCurrent">
            <summary>
            Gets the temperature-modified base-collector saturation current.
            </summary>
            <value>
            The temperature-modified base-collector saturation current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Temperature.TempBeCap">
            <summary>
            Gets the temperature-modified base-emitter capacitance.
            </summary>
            <value>
            The temperature-modified base-emitter capacitance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Temperature.TempBePotential">
            <summary>
            Gets the temperature-modified base-emitter built-in potential.
            </summary>
            <value>
            The temperature-modified base-emitter built-in potential.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Temperature.TempBcCap">
            <summary>
            Gets the temperature-modified base-collector capacitance.
            </summary>
            <value>
            The temperature-modified base-collector capacitance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Temperature.TempBcPotential">
            <summary>
            Gets the temperature-modified base-collector built-in potential.
            </summary>
            <value>
            The temperature-modified base-collector built-in potential.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Temperature.TempDepletionCap">
            <summary>
            Gets the temperature-modified depletion capacitance.
            </summary>
            <value>
            The temperature-modified depletion capacitance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Temperature.TempFactor1">
            <summary>
            Gets the temperature-modified implementation-specific factor 1.
            </summary>
            <value>
            The temperature-modified implementation-specific factor 1.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Temperature.TempFactor4">
            <summary>
            Gets the temperature-modified implementation-specific factor 4.
            </summary>
            <value>
            The temperature-modified implementation-specific factor 4.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Temperature.TempFactor5">
            <summary>
            Gets the temperature-modified implementation-specific factor 5.
            </summary>
            <value>
            The temperature-modified implementation-specific factor 5.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Temperature.TempVCritical">
            <summary>
            Gets the temperature-modified critical voltage.
            </summary>
            <value>
            The temperature-modified critical voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Temperature.Vt">
            <summary>
            Gets the thermal voltage.
            </summary>
            <value>
            The thermal voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Temperature.BiasingState">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Temperature.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Bipolars.Temperature"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Temperature.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Bipolars.Time">
            <summary>
            Transient behavior for a <see cref="T:SpiceSharp.Components.BipolarJunctionTransistor"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Bipolars.Dynamic"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITimeBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Time.CapCurrentBe">
            <summary>
            Gets the base-emitter capacitor current.
            </summary>
            <value>
            The base-emitter capacitor current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Time.CapCurrentBc">
            <summary>
            Gets the base-collector capacitor current.
            </summary>
            <value>
            The base-collector capacitor current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Time.CapCurrentCs">
            <summary>
            Gets the collector-substrate capacitor current.
            </summary>
            <value>
            The collector-substrate capacitor current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Time.CapCurrentBx">
            <summary>
            Gets the base-X capacitor current.
            </summary>
            <value>
            The base-X capacitor current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Time.CurrentExBc">
            <summary>
            Gets the excess phase base-X capacitor current.
            </summary>
            <value>
            The excess phase base-X capacitor current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Time.ChargeBe">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Time.ChargeBc">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Time.ChargeCs">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Bipolars.Time.ChargeBx">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Time.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Bipolars.Time"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Time.SpiceSharp#Behaviors#ITimeBehavior#InitializeStates">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Time.Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Time.Initialize(System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Time.ExcessPhaseCalculation(System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Bipolars.Time.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.BipolarJunctionTransistor">
            <summary>
            A bipolar junction transistor (BJT).
            </summary>
            <seealso cref="T:SpiceSharp.Components.Component"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.Bipolars.Parameters"/>
        </member>
        <member name="F:SpiceSharp.Components.BipolarJunctionTransistor.PinCount">
            <summary>
            The pin count for a bipolar junction transistor.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.BipolarJunctionTransistor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.BipolarJunctionTransistor"/> class.
            </summary>
            <param name="name">The name of the device.</param>
        </member>
        <member name="M:SpiceSharp.Components.BipolarJunctionTransistor.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.BipolarJunctionTransistor"/> class.
            </summary>
            <param name="name">The name of the device.</param>
            <param name="c">The collector node.</param>
            <param name="b">The base node.</param>
            <param name="e">The emitter node.</param>
            <param name="s">The substrate node.</param>
            <param name="model">The model.</param>
        </member>
        <member name="M:SpiceSharp.Components.BipolarJunctionTransistor.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.BipolarJunctionTransistorModel">
            <summary>
            A model for a <see cref="T:SpiceSharp.Components.BipolarJunctionTransistor" />.
            </summary>
            <seealso cref="T:SpiceSharp.Entities.Entity" />
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1" />
            <seealso cref="T:SpiceSharp.Components.Bipolars.ModelParameters" />
        </member>
        <member name="M:SpiceSharp.Components.BipolarJunctionTransistorModel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.BipolarJunctionTransistorModel"/> class.
            </summary>
            <param name="name">The name of the device.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.BipolarJunctionTransistorModel.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.Diodes.Biasing">
            <summary>
            DC biasing behavior for a <see cref="T:SpiceSharp.Components.Diode" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Diodes.Temperature"/>
            <seealso cref="T:SpiceSharp.Behaviors.IBiasingBehavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.IConvergenceBehavior"/>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.Biasing.Variables">
            <summary>
            The variables used by the behavior.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.Biasing.Elements">
            <summary>
            The matrix elements.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Biasing.Voltage">
            <summary>Gets the DC or instantaneous voltage over the device.</summary><value>The DC or instantaneous voltage.</value>
            <remarks>
            If the series multiplier is set, then this voltage is the sum of all voltage drops over all the
            diodes in series.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Biasing.Current">
            <summary>Gets the DC or instantaneous current through the device.</summary><value>The DC or instantaneous current.</value>
            <remarks>
            If the parallel multiplier is set, then this current is the sum of all currents through all the
            diodes in parallel.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Biasing.Conductance">
            <summary>
            Gets the small-signal conductance.
            </summary>
            <value>
            The small-signal conductance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Biasing.Power">
            <summary>Gets the DC or instantaneous power dissipation by the device.</summary><value>The DC or instantaneous power dissipation.</value>
            <remarks>
            The power does not take into account losses by parasitic series resistors.
            </remarks>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.Biasing.LocalVoltage">
            <summary>
            The voltage across a single diode (not including parallel or series multipliers).
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.Biasing.LocalCurrent">
            <summary>
            The current through a single diode (not including parallel or series multipliers).
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.Biasing.LocalConductance">
            <summary>
            The conductance through a single diode (not including paralle or series multipliers).
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Biasing.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Diodes.Biasing"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Biasing.Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Biasing.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Biasing.Initialize(System.Double@,System.Boolean@)">
            <summary>
            Initialize the device based on the current iteration state.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Biasing.SpiceSharp#Behaviors#IConvergenceBehavior#IsConvergent">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Biasing.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Diodes.DiodeVariables`1">
            <summary>
            Variables for a diode.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.DiodeVariables`1.Positive">
            <summary>
            The positive node.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.DiodeVariables`1.PosPrime">
            <summary>
            The internal positive node.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.DiodeVariables`1.Negative">
            <summary>
            The negative node.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.DiodeVariables`1.#ctor(System.String,SpiceSharp.Simulations.IVariableFactory{SpiceSharp.Simulations.IVariable{`0}},SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Diodes.DiodeVariables`1"/> struct.
            </summary>
            <param name="name">The name.</param>
            <param name="factory">The factory.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.DiodeVariables`1.GetMatrixLocations(SpiceSharp.Simulations.IVariableMap)">
            <summary>
            Gets the matrix locations.
            </summary>
            <param name="map">The map.</param>
            <returns>The matrix locations.</returns>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.DiodeVariables`1.GetRhsIndicies(SpiceSharp.Simulations.IVariableMap)">
            <summary>
            Gets the right hand side vector indicies.
            </summary>
            <param name="map">The map.</param>
            <returns>The right hand side vector indices.</returns>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.DiodeVariables`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.DiodeVariables`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.DiodeVariables`1.op_Equality(SpiceSharp.Components.Diodes.DiodeVariables{`0},SpiceSharp.Components.Diodes.DiodeVariables{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.DiodeVariables`1.op_Inequality(SpiceSharp.Components.Diodes.DiodeVariables{`0},SpiceSharp.Components.Diodes.DiodeVariables{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.Diodes.Dynamic">
            <summary>
            Common logic for dynamic (time-dependent) parameters of a <see cref="T:SpiceSharp.Components.Diode" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Diodes.Biasing" />
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Dynamic.Capacitance">
            <summary>
            Diode capacitance
            </summary>
            <value>
            The capacitance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.Dynamic.LocalCapacitance">
            <summary>
            The junction capacitance of a single diode (not including parallel or series multipliers).
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Dynamic.CapCharge">
            <summary>
            Gets or sets the capacitor charge.
            </summary>
            <value>
            The capacitor charge.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.Dynamic.LocalCapCharge">
            <summary>
            The charge on the junction capacitance of a single diode (not including parallel or series multipliers).
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Dynamic.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Diodes.Dynamic"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Dynamic.CalculateCapacitance(System.Double)">
            <summary>
            Calculates the capacitance based on the current voltage.
            </summary>
            <param name="vd">The diode voltage.</param>
        </member>
        <member name="T:SpiceSharp.Components.Diodes.Frequency">
            <summary>
            Small-signal behavior for <see cref="T:SpiceSharp.Components.Diode"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Diodes.Dynamic"/>
            <seealso cref="T:SpiceSharp.Behaviors.IFrequencyBehavior"/>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.Frequency.ComplexVariables">
            <summary>
            The complex variables used by the behavior.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Frequency.ComplexVoltage">
            <summary>Gets the complex voltage over the device.</summary><value>The complex voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Frequency.ComplexCurrent">
            <summary>Gets the complex current through the device.</summary><value>The complex current.</value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Frequency.ComplexPower">
            <summary>Gets the complex power dissipation by the device.</summary><value>The complex power dissipation.</value>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Frequency.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Diodes.Frequency"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Numerics#Complex}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Diodes.ModelParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.DiodeModel" />
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
        </member>
        <member name="F:SpiceSharp.Components.Diodes.ModelParameters._saturationCurrent">
            <summary>
            Gets or sets the saturation current.
            </summary>
            <value>
            The saturation current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.ModelParameters.NominalTemperatureCelsius">
            <summary>
            Gets or sets the nominal temperature in degrees Celsius.
            </summary>
            <value>
            The nominal temperature in degrees Celsius.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.ModelParameters._nominalTemperature">
            <summary>
            Gets the nominal temperature in degrees Kelvin.
            </summary>
            <value>
            The nominal temperature in degrees Kelvin.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.ModelParameters._resistance">
            <summary>
            Gets or sets the ohmic resistance.
            </summary>
            <value>
            The ohmic resistance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.ModelParameters._emissionCoefficient">
            <summary>
            Gets or sets the emission coefficient.
            </summary>
            <value>
            The emission coefficient.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.ModelParameters._transitTime">
            <summary>
            Gets or sets the transit time.
            </summary>
            <value>
            The transit time.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.ModelParameters._junctionCap">
            <summary>
            Gets or sets the junction capacitance.
            </summary>
            <value>
            The junction capacitance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.ModelParameters._junctionPotential">
            <summary>
            Gets or sets the junction built-in potential.
            </summary>
            <value>
            The junction built-in potential.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.ModelParameters._gradingCoefficient">
            <summary>
            Gets or sets the grading coefficient.
            </summary>
            <value>
            The grading coefficient.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.ModelParameters._activationEnergy">
            <summary>
            Gets or sets the activation energy.
            </summary>
            <value>
            The activation energy.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.ModelParameters._saturationCurrentExp">
            <summary>
            Gets the saturation current temperature exponent.
            </summary>
            <value>
            The saturation current temperature exponent.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.ModelParameters._depletionCapCoefficient">
            <summary>
            Gets the forward bias junction fit parameter.
            </summary>
            <value>
            The forward bias junction fit parameter.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.ModelParameters._breakdownVoltage">
            <summary>
            Gets or sets the reverse breakdown voltage.
            </summary>
            <value>
            The breakdown voltage.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.ModelParameters._breakdownCurrent">
            <summary>
            Gets the current at the reverse breakdown voltage.
            </summary>
            <value>
            The breakdown current.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.ModelParameters._flickerNoiseCoefficient">
            <summary>
            Gets or sets the flicker noise coefficient.
            </summary>
            <value>
            The flicker noise coefficient.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.ModelParameters._flickerNoiseExponent">
            <summary>
            Gets or sets the flicker noise exponent.
            </summary>
            <value>
            The flicker noise exponent.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.ModelParameters.ActivationEnergy">
            <summary>
            Gets or sets the activation energy.
            </summary>
            <value>
            The activation energy.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.ModelParameters.EmissionCoefficient">
            <summary>
            Gets or sets the emission coefficient.
            </summary>
            <value>
            The emission coefficient.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.ModelParameters.FlickerNoiseCoefficient">
            <summary>
            Gets or sets the flicker noise coefficient.
            </summary>
            <value>
            The flicker noise coefficient.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.ModelParameters.NominalTemperature">
            <summary>
            Gets the nominal temperature in degrees Kelvin.
            </summary>
            <value>
            The nominal temperature in degrees Kelvin.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.ModelParameters.SaturationCurrentExp">
            <summary>
            Gets the saturation current temperature exponent.
            </summary>
            <value>
            The saturation current temperature exponent.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.ModelParameters.TransitTime">
            <summary>
            Gets or sets the transit time.
            </summary>
            <value>
            The transit time.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.ModelParameters.DepletionCapCoefficient">
            <summary>
            Gets the forward bias junction fit parameter.
            </summary>
            <value>
            The forward bias junction fit parameter.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.ModelParameters.JunctionCap">
            <summary>
            Gets or sets the junction capacitance.
            </summary>
            <value>
            The junction capacitance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.ModelParameters.GradingCoefficient">
            <summary>
            Gets or sets the grading coefficient.
            </summary>
            <value>
            The grading coefficient.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.ModelParameters.BreakdownVoltage">
            <summary>
            Gets or sets the reverse breakdown voltage.
            </summary>
            <value>
            The breakdown voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.ModelParameters.JunctionPotential">
            <summary>
            Gets or sets the junction built-in potential.
            </summary>
            <value>
            The junction built-in potential.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.ModelParameters.FlickerNoiseExponent">
            <summary>
            Gets or sets the flicker noise exponent.
            </summary>
            <value>
            The flicker noise exponent.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.ModelParameters.SaturationCurrent">
            <summary>
            Gets or sets the saturation current.
            </summary>
            <value>
            The saturation current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.ModelParameters.Resistance">
            <summary>
            Gets or sets the ohmic resistance.
            </summary>
            <value>
            The ohmic resistance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.ModelParameters.BreakdownCurrent">
            <summary>
            Gets the current at the reverse breakdown voltage.
            </summary>
            <value>
            The breakdown current.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.ModelParameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.ModelParameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.ModelParameters.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#GivenParameter{System#Double}}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.ModelParameters.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#GivenParameter{System#Double}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Diodes.ModelTemperature">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.DiodeModel"/>
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITemperatureBehavior"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.Diodes.ModelParameters"/>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.ModelTemperature.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.ModelTemperature.Conductance">
            <summary>
            The ohmic conductance.
            </summary>
            <value>
            The ohmic conductance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.ModelTemperature.VtNominal">
            <summary>
            Gets the nominal thermal voltage.
            </summary>
            <value>
            The nominal thermal voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.ModelTemperature.Xfc">
            <summary>
            Gets ???
            </summary>
            <value>
            The XFC.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.ModelTemperature.F2">
            <summary>
            Gets the implementation-specific factor 2.
            </summary>
            <value>
            The f2.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.ModelTemperature.F3">
            <summary>
            Gets the implementation-specific factor 3.
            </summary>
            <value>
            The f3.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.ModelTemperature.#ctor(SpiceSharp.Entities.IBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Diodes.ModelTemperature"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.ModelTemperature.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Diodes.Noise">
            <summary>
            Noise behavior for <see cref="T:SpiceSharp.Components.Diode"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Diodes.Frequency"/>
            <seealso cref="T:SpiceSharp.Behaviors.INoiseBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Noise.OutputNoiseDensity">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Noise.TotalOutputNoise">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Noise.TotalInputNoise">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Noise.ThermalResistance">
            <summary>
            Gets the thermal noise source of the series resistance.
            </summary>
            <value>
            The thermal noise source.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Noise.ShotCurrent">
            <summary>
            Gets the shot noise source of the diode current.
            </summary>
            <value>
            The shot noise source.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Noise.Flicker">
            <summary>
            Gets the flicker noise source.
            </summary>
            <value>
            The flicker noise source.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Noise.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Diodes.Noise"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Noise.SpiceSharp#Simulations#INoiseSource#Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Noise.SpiceSharp#Behaviors#INoiseBehavior#Load">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Noise.SpiceSharp#Behaviors#INoiseBehavior#Compute">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Noise.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#Simulations#INoiseSource}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Noise.SpiceSharp#ParameterSets#IExportPropertySet{System#Numerics#Complex}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Noise.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Diodes.Parameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.Diode" />
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
        </member>
        <member name="F:SpiceSharp.Components.Diodes.Parameters._area">
            <summary>
            Gets or sets the area.
            </summary>
            <value>
            The area of the diode.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Parameters.Off">
            <summary>
            Gets or sets whether or not the diode is initially off (non-conducting).
            </summary>
            <value>
              <c>true</c> if the diode is initially off; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.Parameters._initCond">
            <summary>
            Gets or sets the initial condition.
            </summary>
            <value>
            The initial voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Parameters.TemperatureCelsius">
            <summary>
            Gets or sets the temperature in degrees Celsius.
            </summary>
            <value>
            The temperature in degrees Celsius.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.Parameters._temperature">
            <summary>
            Gets the temperature parameter in degrees Kelvin.
            </summary>
            <value>
            The temperature in degrees Kelvin.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.Parameters._parallelMultiplier">
            <summary>
            Gets or sets the number of diodes in parallel.
            </summary>
            <value>
            The number of diodes in parallel.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Diodes.Parameters._seriesMultiplier">
            <summary>
            Gets or sets the number of diodes in series.
            </summary>
            <value>
            The number of diodes in series.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Parameters.SeriesMultiplier">
            <summary>
            Gets or sets the number of diodes in series.
            </summary>
            <value>
            The number of diodes in series.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Parameters.Temperature">
            <summary>
            Gets the temperature parameter in degrees Kelvin.
            </summary>
            <value>
            The temperature in degrees Kelvin.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Parameters.ParallelMultiplier">
            <summary>
            Gets or sets the number of diodes in parallel.
            </summary>
            <value>
            The number of diodes in parallel.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Parameters.Area">
            <summary>
            Gets or sets the area.
            </summary>
            <value>
            The area of the diode.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Parameters.InitCond">
            <summary>
            Gets or sets the initial condition.
            </summary>
            <value>
            The initial voltage.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Boolean}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Boolean}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#GivenParameter{System#Double}}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#GivenParameter{System#Double}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Diodes.Temperature">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.Diode" />.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITemperatureBehavior"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.Diodes.Parameters"/>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Temperature.BiasingParameters">
            <summary>
            Gets the biasing parameters.
            </summary>
            <value>
            The biasing parameters.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Temperature.ModelParameters">
            <summary>
            Gets the model parameters.
            </summary>
            <value>
            The model parameters.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Temperature.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Temperature.ModelTemperature">
            <summary>
            Gets the model temperature behavior.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Temperature.TempJunctionCap">
            <summary>
            Gets the temperature-modified junction capacitance.
            </summary>
            <value>
            The temperature-modified junction capacitance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Temperature.TempJunctionPot">
            <summary>
            Gets the temperature-modified junction built-in potential.
            </summary>
            <value>
            The temperature-modified junction built-in potential.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Temperature.TempSaturationCurrent">
            <summary>
            Gets the temperature-modified saturation current.
            </summary>
            <value>
            The temperature-modified saturation current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Temperature.TempFactor1">
            <summary>
            Gets the temperature-modified implementation-specific factor 1.
            </summary>
            <value>
            The temperature-modified implementation-specific factor 1.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Temperature.TempDepletionCap">
            <summary>
            Gets the temperature-modified depletion capacitance.
            </summary>
            <value>
            The temperature-modified depletion capacitance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Temperature.TempVCritical">
            <summary>
            Gets the temperature-modified critical voltage.
            </summary>
            <value>
            The temperature-modified critical voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Temperature.TempBreakdownVoltage">
            <summary>
            Gets the temperature-modified breakdown voltage.
            </summary>
            <value>
            The temperature-modified breakdown voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Temperature.Vt">
            <summary>
            Gets the thermal voltage.
            </summary>
            <value>
            The thermal voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Temperature.Vte">
            <summary>
            Gets the temperature-modified and emission-modified thermal voltage.
            </summary>
            <value>
            The temperature-modified and emission-modified thermal voltage.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Temperature.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Diodes.Temperature"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Temperature.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Diodes.Time">
            <summary>
            Transient behavior for a <see cref="T:SpiceSharp.Components.Diode"/>
            </summary>
            <seealso cref="T:SpiceSharp.Components.Diodes.Dynamic"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITimeBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.Diodes.Time.CapCurrent">
            <summary>
            Gets the diode capacitor current.
            </summary>
            <value>
            The diode capacitor current.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Time.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Diodes.Time"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Time.SpiceSharp#Behaviors#ITimeBehavior#InitializeStates">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Time.Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Diodes.Time.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Diode">
            <summary>
            A diode.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Component"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.Diodes.Parameters"/>
        </member>
        <member name="F:SpiceSharp.Components.Diode.PinCount">
            <summary>
            The pin count for diodes.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Diode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Diode"/> class.
            </summary>
            <param name="name">The name of the device.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Diode.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Diode"/> class.
            </summary>
            <param name="name">The name of the device.</param>
            <param name="anode">The anode.</param>
            <param name="cathode">The cathode.</param>
            <param name="model">The model.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Diode.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.DiodeModel">
            <summary>
            A model for a <see cref="T:SpiceSharp.Components.Diode"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Entities.Entity"/>
            <seealso cref="T:SpiceSharp.Entities.BindingContext"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.Diodes.ModelParameters"/>
        </member>
        <member name="M:SpiceSharp.Components.DiodeModel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.DiodeModel"/> class.
            </summary>
            <param name="name">The name of the diode model.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.DiodeModel.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.JFETs.Biasing">
            <summary>
            Biasing behavior for a <see cref="T:SpiceSharp.Components.JFET" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.JFETs.Temperature"/>
            <seealso cref="T:SpiceSharp.Behaviors.IBiasingBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Biasing.BiasingParameters">
            <summary>
            Gets the biasing parameters.
            </summary>
            <value>
            The biasing parameters.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Biasing.DrainPrime">
            <summary>
            Gets the internal drain node.
            </summary>
            <value>
            The internal drain node.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Biasing.SourcePrime">
            <summary>
            Gets the internal source node.
            </summary>
            <value>
            The internal source node.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Biasing.Vgs">
            <summary>
            Gets the gate-source voltage.
            </summary>
            <value>
            The gate-source voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Biasing.Vgd">
            <summary>
            Gets the gate-drain voltage.
            </summary>
            <value>
            The gate-drain voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Biasing.Cg">
            <summary>
            Gets the gate current.
            </summary>
            <value>
            The gate current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Biasing.Cd">
            <summary>
            Gets the drain current.
            </summary>
            <value>
            The drain current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Biasing.Cgd">
            <summary>
            Gets the gate-drain current.
            </summary>
            <value>
            The gate-drain current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Biasing.Gm">
            <summary>
            Gets the small-signal transconductance.
            </summary>
            <value>
            The small-signal transconductance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Biasing.Gds">
            <summary>
            Gets the small-signal drain-source conductance.
            </summary>
            <value>
            The small-signal drain-source conductance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Biasing.Ggs">
            <summary>
            Gets the small-signal gate-source conductance.
            </summary>
            <value>
            The small-signal gate-source conductance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Biasing.Ggd">
            <summary>
            Gets the small-signal gate-drain conductance.
            </summary>
            <value>
            The small-signal gate-drain conductance.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.Biasing.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.JFETs.Biasing"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.Biasing.Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.Biasing.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.Biasing.Initialize(System.Double@,System.Double@,System.Boolean@)">
            <summary>
            Initializes the voltages for the current iteration.
            </summary>
            <param name="vgs">The gate-source voltage.</param>
            <param name="vgd">The gate-drain voltage.</param>
            <param name="check">If set to <c>true</c>, the voltages were limited to avoid blowing up of the currents.</param>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.Biasing.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.JFETs.Frequency">
            <summary>
            Frequency behavior for a <see cref="T:SpiceSharp.Components.JFET" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.JFETs.Biasing" />
            <seealso cref="T:SpiceSharp.Behaviors.IFrequencyBehavior" />
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Frequency.CapGs">
            <summary>
            Gets the gate-source capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Frequency.CapGd">
            <summary>
            Gets the gate-drain capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Frequency.ComplexElements">
            <summary>
            Gets the complex matrix elements.
            </summary>
            <value>
            The complex matrix elements.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Frequency.ComplexState">
            <summary>
            Gets the complex state.
            </summary>
            <value>
            The complex state.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Frequency.DrainPrime">
            <summary>
            Gets the internal drain node.
            </summary>
            <value>
            The internal drain node.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Frequency.SourcePrime">
            <summary>
            Gets the internal source node.
            </summary>
            <value>
            The internal source node.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.Frequency.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.JFETs.Frequency"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.JFETs.ModelParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.JFETModel" />.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelParameters.NominalTemperatureCelsius">
            <summary>
            Gets or sets the measurement temperature in degrees celsius.
            </summary>
            <value>
            The measurement temperature in degrees celsius.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.JFETs.ModelParameters._nominalTemperature">
            <summary>
            Gets the measurement temperature in Kelvin.
            </summary>
            <value>
            The measurement temperature in Kelvin.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.JFETs.ModelParameters._threshold">
            <summary>
            Gets or sets the threshold voltage.
            </summary>
            <value>
            The threshold voltage.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.JFETs.ModelParameters._beta">
            <summary>
            Gets or sets the transconductance.
            </summary>
            <value>
            The transconductance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.JFETs.ModelParameters._lModulation">
            <summary>
            Gets or sets the channel length modulation parameter.
            </summary>
            <value>
            The channel length modulation parameter.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.JFETs.ModelParameters._drainResistance">
            <summary>
            Gets or sets the drain resistance.
            </summary>
            <value>
            The drain resistance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.JFETs.ModelParameters._sourceResistance">
            <summary>
            Gets or sets the source resistance.
            </summary>
            <value>
            The source resistance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.JFETs.ModelParameters._capGs">
            <summary>
            Gets or sets the gate-source junction capacitance.
            </summary>
            <value>
            The gate-source junction capacitance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.JFETs.ModelParameters._capGd">
            <summary>
            Gets or sets the gate-drain junction capacitance.
            </summary>
            <value>
            The gate-drain junction capacitance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.JFETs.ModelParameters._gatePotential">
            <summary>
            Gets or sets the gate junction potential.
            </summary>
            <value>
            The gate junction potential.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.JFETs.ModelParameters._gateSaturationCurrent">
            <summary>
            Gets or sets the gate saturation current.
            </summary>
            <value>
            The gate saturation current.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.JFETs.ModelParameters._depletionCapCoefficient">
            <summary>
            Gets or sets the forward bias junction fitting parameter.
            </summary>
            <value>
            he forward bias junction fitting parameter.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.JFETs.ModelParameters._b">
            <summary>
            Gets the doping tail parameter.
            </summary>
            <value>
            The doping tail parameter.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelParameters.JFETType">
            <summary>
            Gets or sets the type of the JFET.
            </summary>
            <value>
            The type of the JFET.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelParameters.DrainConductance">
            <summary>
            Gets the drain conductance.
            </summary>
            <value>
            The drain conductance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelParameters.SourceConductance">
            <summary>
            Gets the source conductance.
            </summary>
            <value>
            The source conductance.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.ModelParameters.SetNjf(System.Boolean)">
            <summary>
            Sets the model to be n-type.
            </summary>
            <param name="flag">if set to <c>true</c> n-type is set.</param>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.ModelParameters.SetPjf(System.Boolean)">
            <summary>
            Sets the model to be p-type.
            </summary>
            <param name="flag">if set to <c>true</c> p-type is set.</param>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelParameters.TypeName">
            <summary>
            Gets the name of the type.
            </summary>
            <value>
            The name of the type.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.JFETs.ModelParameters._fnCoefficient">
            <summary>
            Gets or sets the flicker noise coefficient.
            </summary>
            <value>
            The flicker noise coefficient.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.JFETs.ModelParameters._fnExponent">
            <summary>
            Gets or sets the flicker noise exponent.
            </summary>
            <value>
            The flicker noise exponent.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.ModelParameters.CalculateDefaults">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelParameters.FnExponent">
            <summary>
            Gets or sets the flicker noise exponent.
            </summary>
            <value>
            The flicker noise exponent.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelParameters.Beta">
            <summary>
            Gets or sets the transconductance.
            </summary>
            <value>
            The transconductance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelParameters.Threshold">
            <summary>
            Gets or sets the threshold voltage.
            </summary>
            <value>
            The threshold voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelParameters.SourceResistance">
            <summary>
            Gets or sets the source resistance.
            </summary>
            <value>
            The source resistance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelParameters.CapGd">
            <summary>
            Gets or sets the gate-drain junction capacitance.
            </summary>
            <value>
            The gate-drain junction capacitance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelParameters.DepletionCapCoefficient">
            <summary>
            Gets or sets the forward bias junction fitting parameter.
            </summary>
            <value>
            he forward bias junction fitting parameter.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelParameters.B">
            <summary>
            Gets the doping tail parameter.
            </summary>
            <value>
            The doping tail parameter.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelParameters.DrainResistance">
            <summary>
            Gets or sets the drain resistance.
            </summary>
            <value>
            The drain resistance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelParameters.GateSaturationCurrent">
            <summary>
            Gets or sets the gate saturation current.
            </summary>
            <value>
            The gate saturation current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelParameters.NominalTemperature">
            <summary>
            Gets the measurement temperature in Kelvin.
            </summary>
            <value>
            The measurement temperature in Kelvin.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelParameters.GatePotential">
            <summary>
            Gets or sets the gate junction potential.
            </summary>
            <value>
            The gate junction potential.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelParameters.FnCoefficient">
            <summary>
            Gets or sets the flicker noise coefficient.
            </summary>
            <value>
            The flicker noise coefficient.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelParameters.LModulation">
            <summary>
            Gets or sets the channel length modulation parameter.
            </summary>
            <value>
            The channel length modulation parameter.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelParameters.CapGs">
            <summary>
            Gets or sets the gate-source junction capacitance.
            </summary>
            <value>
            The gate-source junction capacitance.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.ModelParameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.ModelParameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.ModelParameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Boolean}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.ModelParameters.SpiceSharp#ParameterSets#IExportPropertySet{System#String}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.JFETs.ModelTemperature">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.JFETModel" />.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITemperatureBehavior"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.JFETs.ModelParameters"/>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelTemperature.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelTemperature.F2">
            <summary>
            Gets the implementation-specific factor 2.
            </summary>
            <value>
            The f2.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelTemperature.F3">
            <summary>
            Gets the implementation-specific factor 3.
            </summary>
            <value>
            The f3.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelTemperature.BFactor">
            <summary>
            Gets the bulk factor.
            </summary>
            <value>
            The bulk factor.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelTemperature.Pbo">
            <summary>
            Gets the implementation-specific factor Pbo.
            </summary>
            <value>
            The pbo.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelTemperature.Xfc">
            <summary>
            Gets ???
            </summary>
            <value>
            The XFC.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelTemperature.Cjfact">
            <summary>
            Gets the junction capacitance factor.
            </summary>
            <value>
            The cjfact.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.ModelTemperature.BiasingState">
            <summary>
            Gets the biasing simulation state.
            </summary>
            <value>
            The biasing simulation state.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.ModelTemperature.#ctor(SpiceSharp.Entities.IBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.JFETs.ModelTemperature"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.ModelTemperature.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.JFETs.Parameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.JFET" />.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Parameters.TemperatureCelsius">
            <summary>
            Gets or sets the temperature in degrees celsius.
            </summary>
            <value>
            The temperature in degrees Celsius.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.JFETs.Parameters._temperature">
            <summary>
            Gets or sets the temperature in Kelvin.
            </summary>
            <value>
            The temperature in degrees Kelvin.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.JFETs.Parameters._area">
            <summary>
            Gets or sets the area.
            </summary>
            <value>
            The area.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.JFETs.Parameters._initialVds">
            <summary>
            Gets or sets the initial drain-source voltage.
            </summary>
            <value>
            The initial drain-source voltage.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.JFETs.Parameters._initialVgs">
            <summary>
            Gets or sets the initial gate-source voltage.
            </summary>
            <value>
            The initial gate-source voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Parameters.Off">
            <summary>
            Gets or sets a value indicating whether this instance is off.
            </summary>
            <value>
              <c>true</c> if the JFET is initially off; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.JFETs.Parameters._parallelMultiplier">
            <summary>
            Gets or sets the number of JFETs in parallel.
            </summary>
            <value>
            The number of JFETs in parallel.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.Parameters.SetIc(System.Double[])">
            <summary>
            Sets the initial conditions of the JFET.
            </summary>
            <param name="ic">The initial conditions.</param>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Parameters.Area">
            <summary>
            Gets or sets the area.
            </summary>
            <value>
            The area.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Parameters.InitialVgs">
            <summary>
            Gets or sets the initial gate-source voltage.
            </summary>
            <value>
            The initial gate-source voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Parameters.ParallelMultiplier">
            <summary>
            Gets or sets the number of JFETs in parallel.
            </summary>
            <value>
            The number of JFETs in parallel.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Parameters.Temperature">
            <summary>
            Gets or sets the temperature in Kelvin.
            </summary>
            <value>
            The temperature in degrees Kelvin.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Parameters.InitialVds">
            <summary>
            Gets or sets the initial drain-source voltage.
            </summary>
            <value>
            The initial drain-source voltage.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Boolean}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Boolean}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double[]}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#GivenParameter{System#Double}}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#GivenParameter{System#Double}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.JFETs.Temperature">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.JFET" />.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.JFETs.Parameters"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITemperatureBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Temperature.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Temperature.ModelParameters">
            <summary>
            Gets the model parameters.
            </summary>
            <value>
            The model parameters.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Temperature.ModelTemperature">
            <summary>
            Gets the model temperature behavior.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Temperature.TempSaturationCurrent">
            <summary>
            Gets the temperature-modified saturation current.
            </summary>
            <value>
            The temperature-modified saturation current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Temperature.TempCapGs">
            <summary>
            Gets the temperature-modified gate-source capacitance.
            </summary>
            <value>
            The temperature-modified gate-source capacitance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Temperature.TempCapGd">
            <summary>
            Gets the temperature-modified gate-drain capacitance.
            </summary>
            <value>
            The temperature-modified gate-drain capacitance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Temperature.TempGatePotential">
            <summary>
            Gets the temperature-modified gate potential.
            </summary>
            <value>
            The temperature-modified gate potential.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Temperature.CorDepCap">
            <summary>
            Gets the temperature-modified depletion capacitance correction.
            </summary>
            <value>
            The temperature-modified depletion capacitance correction.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Temperature.F1">
            <summary>
            Gets the implementation-specific factor 1.
            </summary>
            <value>
            The f1.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Temperature.Vcrit">
            <summary>
            Gets the temperature-modified critical voltage.
            </summary>
            <value>
            The temperature-modified critical voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Temperature.BiasingState">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.Temperature.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.JFETs.Temperature"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.Temperature.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.JFETs.Time">
            <summary>
            Transient behavior for a <see cref="T:SpiceSharp.Components.JFET" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.JFETs.Biasing"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITimeBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Time.CapGs">
            <summary>
            Gets the gate-source capacitance.
            </summary>
            <value>
            The gate-source capacitance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.JFETs.Time.CapGd">
            <summary>
            Gets the gate-drain capacitance.
            </summary>
            <value>
            The gate-drain capacitance.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.Time.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.JFETs.Time"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.Time.SpiceSharp#Behaviors#ITimeBehavior#InitializeStates">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.Time.Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.JFETs.Time.CalculateStates(System.Double,System.Double)">
            <summary>
            Calculates the states.
            </summary>
            <param name="vgs">The gate-source voltage.</param>
            <param name="vgd">The gate-drain voltage.</param>
        </member>
        <member name="T:SpiceSharp.Components.JFET">
            <summary>
            A junction field-effect transistor.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Component" />
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.JFETs.Parameters"/>
        </member>
        <member name="F:SpiceSharp.Components.JFET.PinCount">
            <summary>
            The pin count for JFETs.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.JFET.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.JFET"/> class.
            </summary>
            <param name="name">The string of the entity.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.JFET.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.JFET"/> class.
            </summary>
            <param name="name">The name of the component.</param>
            <param name="drain">The drain node.</param>
            <param name="gate">The gate node.</param>
            <param name="source">The source node.</param>
            <param name="model">The model name.</param>
        </member>
        <member name="M:SpiceSharp.Components.JFET.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.JFETModel">
            <summary>
            Model for a <see cref="T:SpiceSharp.Components.JFET" />.
            </summary>
            <seealso cref="T:SpiceSharp.Entities.Entity"/>
            <seealso cref="T:SpiceSharp.Entities.BindingContext"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.JFETs.ModelParameters"/>
        </member>
        <member name="M:SpiceSharp.Components.JFETModel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.JFETModel"/> class.
            </summary>
            <param name="name">The name of the model.</param>
        </member>
        <member name="M:SpiceSharp.Components.JFETModel.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Charges">
            <summary>
            The charges on transistors.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Mosfets.MosfetCharges" />
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Charges.Calculate(SpiceSharp.Components.Mosfets.IMosfetBiasingBehavior,SpiceSharp.Components.Mosfets.ModelParameters)">
            <summary>
            Calculates the charges and capacitances for the specified voltages.
            </summary>
            <param name="behavior">The biasing behavior.</param>
            <param name="mp">The model parameters.</param>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Contributions`1">
            <summary>
            Contributions for loading a mosfet.
            </summary>
            <remarks>
            Please be careful using this struct, as it is mutable. It was created to be
            used to group the contribution variables for a mosfet with 4 terminals.
            </remarks>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Contributions`1.Gd">
            <summary>
            The gate-drain contribution.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Contributions`1.Gs">
            <summary>
            The gate-source contribution.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Contributions`1.Gb">
            <summary>
            The gate-bulk contribution.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Contributions`1.Bd">
            <summary>
            The bulk-drain contribution.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Contributions`1.Bs">
            <summary>
            The bulk-source contribution.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Contributions`1.Ds">
            <summary>
            The drain-source contribution.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Contributions`1.Reset">
            <summary>
            Reset all the contributions.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Frequency">
            <summary>
            Small-signal behavior for a <see cref="T:SpiceSharp.Components.Mosfet1" />.
            </summary>
            <seealso cref="F:SpiceSharp.Components.Mosfets.Frequency.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.IFrequencyBehavior"/>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Frequency.ModelParameters">
            <summary>
            The model parameters.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Frequency.Behavior">
            <summary>
            The behavior that biased the mosfet.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Frequency.Variables">
            <summary>
            The variables used by the transistor.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Frequency.Cgs">
            <summary>Gets the gate-source capacitance (cgs).</summary><value>The gate-source capacitance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Frequency.Cgd">
            <summary>Gets the gate-drain capacitance (cgd).</summary><value>The gate-drain capacitance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Frequency.Cgb">
            <summary>Gets the gate-bulk capacitance (cgb).</summary><value>The gate-bulk capacitance.</value>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Frequency.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfets.Frequency"/> class.
            </summary>
            <param name="context">The binding context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.IMosfetBiasingBehavior">
            <summary>
            A biasing behavior for a mosfet.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.IMosfetBiasingBehavior.Properties">
            <summary>
            Gets the temperature-dependent properties.
            </summary>
            <value>
            The temperature-dependent properties.
            </value>
        </member>
        <member name="E:SpiceSharp.Components.Mosfets.IMosfetBiasingBehavior.UpdateContributions">
            <summary>
            Occurs when the contributions can be updated.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.IMosfetBiasingBehavior.Id">
            <summary>Gets the drain current.</summary><value>The drain current.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.IMosfetBiasingBehavior.Ibs">
            <summary>Gets the bulk-source current.</summary><value>The bulk-source current.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.IMosfetBiasingBehavior.Ibd">
            <summary>Gets the bulk-drain current.</summary><value>The bulk-drain current.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.IMosfetBiasingBehavior.Gm">
            <summary>Gets the small-signal transconductance (gm).</summary><value>The small-signal transconductance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.IMosfetBiasingBehavior.Gmbs">
            <summary>Gets the small-signal bulk-source transconductance (gmb).</summary><value>The small-signal bulk-source transconductance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.IMosfetBiasingBehavior.Gds">
            <summary>Gets the small-signal drain-source conductance (gds).</summary><value>The small-signal drain-source conductance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.IMosfetBiasingBehavior.Gbs">
            <summary>Gets the small-signal bulk-source conductance (gbs).</summary><value>The small-signal bulk-source conductance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.IMosfetBiasingBehavior.Gbd">
            <summary>Gets the small-signal bulk-drain conductance (gbd).</summary><value>The small-signal bulk-drain conductance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.IMosfetBiasingBehavior.Von">
            <!-- No matching elements were found for the following include tag --><include file="docs.xml" path="docs/members/von/*" />
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.IMosfetBiasingBehavior.Vdsat">
            <summary>Gets the saturation voltage (vdsat).</summary><remarks>If vds is larger than vdsat, then the transistor can be considered to be in the saturation region.</remarks><value>The saturation voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.IMosfetBiasingBehavior.Mode">
            <summary>Gets the current mode of operation. A value of -1.0 means that the source and drain have switched.</summary><value>The current mode of operation.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.IMosfetBiasingBehavior.Vgs">
            <summary>Gets the gate-source voltage (vgs).</summary><value>The gate-source voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.IMosfetBiasingBehavior.Vds">
            <summary>Gets the drain-source voltage (vds).</summary><value>The drain-source voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.IMosfetBiasingBehavior.Vbs">
            <summary>Gets the bulk-source voltage (vbs).</summary><value>The bulk-source voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.IMosfetBiasingBehavior.Vbd">
            <summary>Gets the bulk-drain voltage (vbd).</summary><value>The bulk-drain voltage.</value>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.ModelParameters">
            <summary>
            Common model parameters for mosfets.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._width">
            <summary>
            Gets or sets the default width for transistors using this model.
            </summary>
            <value>
            The default width for transistors.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._length">
            <summary>
            Gets or sets the default length for transistors using this model.
            </summary>
            <value>
            The default length for transistors.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.NominalTemperatureCelsius">
            <summary>
            Gets or sets the nominal temperature in degrees celsius.
            </summary>
            <value>
            The nominal temperature in degrees Celsius.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._vt0">
            <summary>
            Gets or sets the base threshold voltage.
            </summary>
            <value>
            The base threshold voltage.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._transconductance">
            <summary>
            Gets or sets the transconductance.
            </summary>
            <value>
            The transconductance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._gamma">
            <summary>
            Gets or sets the bulk threshold parameter.
            </summary>
            <value>
            The bulk threshold parameter.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._phi">
            <summary>
            Gets or sets the surface potential.
            </summary>
            <value>
            The surface potential.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._drainResistance">
            <summary>
            Gets or sets the drain ohmic resistance.
            </summary>
            <value>
            The drain ohmic resistance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._sourceResistance">
            <summary>
            Gets or sets the source ohmic resistance.
            </summary>
            <value>
            The source ohmic resistance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._capBd">
            <summary>
            Gets or sets the bulk-drain junction capacitance.
            </summary>
            <value>
            The bulk-drain junction capacitance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._capBs">
            <summary>
            Gets or sets the bulk-source junction capacitance
            </summary>
            <value>
            The bulk-source junction capacitance
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._junctionSatCur">
            <summary>
            Gets or sets the bulk junction saturation current.
            </summary>
            <value>
            The bulk junction saturation current.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._bulkJunctionPotential">
            <summary>
            Gets or sets the bulk junction potential.
            </summary>
            <value>
            The bulk junction potential.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._gateSourceOverlapCapFactor">
            <summary>
            Gets or sets the gate-source overlap capacitance.
            </summary>
            <value>
            The gate-source overlap capacitance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._gateDrainOverlapCapFactor">
            <summary>
            Gets or sets the gate-drain overlap capacitance.
            </summary>
            <value>
            The gate-drain overlap capacitance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._gateBulkOverlapCapFactor">
            <summary>
            Gets or sets the gate-bulk overlap capacitance.
            </summary>
            <value>
            The gate-bulk overlap capacitance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._bulkCapFactor">
            <summary>
            Gets or sets the bottom junction capacitance per area.
            </summary>
            <value>
            The bottom junction capacitance per area.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._bulkJunctionBotGradingCoefficient">
            <summary>
            Gets or sets the bulk junction bottom grading coefficient.
            </summary>
            <value>
            The bulk junction bottom grading coefficient.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._sidewallCapFactor">
            <summary>
            Gets or sets the sidewall capacitance.
            </summary>
            <value>
            The sidewall capacitance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._bulkJunctionSideGradingCoefficient">
            <summary>
            Gets or sets the bulk junction side grading coefficient.
            </summary>
            <value>
            The bulk junction side grading coefficient.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._junctionSatCurDensity">
            <summary>
            Gets or sets the bulk junction saturation current density.
            </summary>
            <value>
            The bulk junction saturation current density.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._oxideThickness">
            <summary>
            Gets or sets the oxide thickness.
            </summary>
            <value>
            The oxide thickness.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._lateralDiffusion">
            <summary>
            Gets or sets the lateral diffusion.
            </summary>
            <value>
            The lateral diffusion.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._sheetResistance">
            <summary>
            Gets or sets the sheet resistance.
            </summary>
            <value>
            The sheet resistance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._surfaceMobility">
            <summary>
            Gets or sets the surface mobility.
            </summary>
            <value>
            The surface mobility.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._forwardCapDepletionCoefficient">
            <summary>
            Gets or sets the forward bias junction fitting parameter.
            </summary>
            <value>
            The forward bias junction fitting parameter.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._gateType">
            <summary>
            Gets or sets the type of the gate.
            </summary>
            <value>
            The type of the gate.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._substrateDoping">
            <summary>
            Gets or sets the substrate doping level.
            </summary>
            <value>
            The substrate doping level.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._surfaceStateDensity">
            <summary>
            Gets or sets the surface state density.
            </summary>
            <value>
            The surface state density.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._nominalTemperature">
            <summary>
            Gets or sets the nominal temperature in Kelvin.
            </summary>
            <value>
            The nominal temperature in Kelvin.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.MosfetType">
            <summary>
            Gets or sets the mosfet type.
            </summary>
            <value>
            The mosfet type.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.ModelParameters.SetNmos(System.Boolean)">
            <summary>
            Sets the model to represent an NMOS.
            </summary>
            <param name="value">if set to <c>true</c>, the model represents an NMOS.</param>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.ModelParameters.SetPmos(System.Boolean)">
            <summary>
            Sets the model to represent a PMOS.
            </summary>
            <param name="value">if set to <c>true</c>, the model represents a PMOS.</param>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.ModelParameters.Clone">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.TypeName">
            <summary>
            Gets the name of the type.
            </summary>
            <value>
            The name of the type.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._flickerNoiseCoefficient">
            <summary>
            Gets or sets the flicker-noise coefficient parameter.
            </summary>
            <value>
            The flicker noise coefficient.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.ModelParameters._flickerNoiseExponent">
            <summary>
            Gets or sets the flicker-noise exponent parameter.
            </summary>
            <value>
            The flicker noise exponent.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.SourceResistance">
            <summary>
            Gets or sets the source ohmic resistance.
            </summary>
            <value>
            The source ohmic resistance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.DrainResistance">
            <summary>
            Gets or sets the drain ohmic resistance.
            </summary>
            <value>
            The drain ohmic resistance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.NominalTemperature">
            <summary>
            Gets or sets the nominal temperature in Kelvin.
            </summary>
            <value>
            The nominal temperature in Kelvin.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.BulkJunctionPotential">
            <summary>
            Gets or sets the bulk junction potential.
            </summary>
            <value>
            The bulk junction potential.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.Phi">
            <summary>
            Gets or sets the surface potential.
            </summary>
            <value>
            The surface potential.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.SurfaceStateDensity">
            <summary>
            Gets or sets the surface state density.
            </summary>
            <value>
            The surface state density.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.GateType">
            <summary>
            Gets or sets the type of the gate.
            </summary>
            <value>
            The type of the gate.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.Transconductance">
            <summary>
            Gets or sets the transconductance.
            </summary>
            <value>
            The transconductance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.Gamma">
            <summary>
            Gets or sets the bulk threshold parameter.
            </summary>
            <value>
            The bulk threshold parameter.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.BulkJunctionSideGradingCoefficient">
            <summary>
            Gets or sets the bulk junction side grading coefficient.
            </summary>
            <value>
            The bulk junction side grading coefficient.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.GateSourceOverlapCapFactor">
            <summary>
            Gets or sets the gate-source overlap capacitance.
            </summary>
            <value>
            The gate-source overlap capacitance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.BulkJunctionBotGradingCoefficient">
            <summary>
            Gets or sets the bulk junction bottom grading coefficient.
            </summary>
            <value>
            The bulk junction bottom grading coefficient.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.CapBs">
            <summary>
            Gets or sets the bulk-source junction capacitance
            </summary>
            <value>
            The bulk-source junction capacitance
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.JunctionSatCurDensity">
            <summary>
            Gets or sets the bulk junction saturation current density.
            </summary>
            <value>
            The bulk junction saturation current density.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.Vt0">
            <summary>
            Gets or sets the base threshold voltage.
            </summary>
            <value>
            The base threshold voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.GateBulkOverlapCapFactor">
            <summary>
            Gets or sets the gate-bulk overlap capacitance.
            </summary>
            <value>
            The gate-bulk overlap capacitance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.FlickerNoiseExponent">
            <summary>
            Gets or sets the flicker-noise exponent parameter.
            </summary>
            <value>
            The flicker noise exponent.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.LateralDiffusion">
            <summary>
            Gets or sets the lateral diffusion.
            </summary>
            <value>
            The lateral diffusion.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.SheetResistance">
            <summary>
            Gets or sets the sheet resistance.
            </summary>
            <value>
            The sheet resistance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.JunctionSatCur">
            <summary>
            Gets or sets the bulk junction saturation current.
            </summary>
            <value>
            The bulk junction saturation current.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.BulkCapFactor">
            <summary>
            Gets or sets the bottom junction capacitance per area.
            </summary>
            <value>
            The bottom junction capacitance per area.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.Length">
            <summary>
            Gets or sets the default length for transistors using this model.
            </summary>
            <value>
            The default length for transistors.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.OxideThickness">
            <summary>
            Gets or sets the oxide thickness.
            </summary>
            <value>
            The oxide thickness.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.ForwardCapDepletionCoefficient">
            <summary>
            Gets or sets the forward bias junction fitting parameter.
            </summary>
            <value>
            The forward bias junction fitting parameter.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.Width">
            <summary>
            Gets or sets the default width for transistors using this model.
            </summary>
            <value>
            The default width for transistors.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.SurfaceMobility">
            <summary>
            Gets or sets the surface mobility.
            </summary>
            <value>
            The surface mobility.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.GateDrainOverlapCapFactor">
            <summary>
            Gets or sets the gate-drain overlap capacitance.
            </summary>
            <value>
            The gate-drain overlap capacitance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.FlickerNoiseCoefficient">
            <summary>
            Gets or sets the flicker-noise coefficient parameter.
            </summary>
            <value>
            The flicker noise coefficient.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.CapBd">
            <summary>
            Gets or sets the bulk-drain junction capacitance.
            </summary>
            <value>
            The bulk-drain junction capacitance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.SidewallCapFactor">
            <summary>
            Gets or sets the sidewall capacitance.
            </summary>
            <value>
            The sidewall capacitance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.ModelParameters.SubstrateDoping">
            <summary>
            Gets or sets the substrate doping level.
            </summary>
            <value>
            The substrate doping level.
            </value>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.ModelProperties">
            <summary>
            Common properties for transistor models.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.ModelProperties.Update(SpiceSharp.Components.Mosfets.ModelParameters)">
            <summary>
            Updates the model properties.
            </summary>
            <param name="mp">The model parameters.</param>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.MosfetCharges">
            <summary>
            A class that computes the bulk-source and bulk-drain charges and capacitances.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.MosfetCharges.Qbs">
            <summary>Gets the charge on the bulk-source capacitance (qbs).</summary><value>The bulk-source charge.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.MosfetCharges.Qbd">
            <summary>Gets the charge on the bulk-drain capacitance (qbd).</summary><value>The bulk-drain charge.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.MosfetCharges.Cbs">
            <summary>Gets the bulk-source capacitance (cbs).</summary><value>The bulk-source capacitance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.MosfetCharges.Cbd">
            <summary>Gets the bulk-drain capacitance (cbd).</summary><value>The bulk-drain capacitance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.MosfetCharges.Cgs">
            <summary>Gets the gate-source capacitance (cgs).</summary><value>The gate-source capacitance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.MosfetCharges.Cgd">
            <summary>Gets the gate-drain capacitance (cgd).</summary><value>The gate-drain capacitance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.MosfetCharges.Cgb">
            <summary>Gets the gate-bulk capacitance (cgb).</summary><value>The gate-bulk capacitance.</value>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.MosfetCharges.Update(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,SpiceSharp.Components.Mosfets.ModelParameters,SpiceSharp.Components.Mosfets.TemperatureProperties)">
            <summary>
            Updates the charges and capacitances..
            </summary>
            <param name="mode">The mode.</param>
            <param name="vgs">The gate-source voltage.</param>
            <param name="vds">The drain-source voltage.</param>
            <param name="vbs">The bulk-source voltage.</param>
            <param name="von">The threshold voltage.</param>
            <param name="vdsat">The saturation voltage.</param>
            <param name="mp">The model parameters.</param>
            <param name="tp">The temperature-dependent properties.</param>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.MosfetContributionEventArgs">
            <summary>
            Event arguments that are used to add contributions for mosfets.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.MosfetContributionEventArgs.Contributions">
            <summary>
            Gets or sets the mosfet contributions.
            </summary>
            <value>
            The mosfet contributions.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.MosfetContributionEventArgs.#ctor(SpiceSharp.Components.Mosfets.Contributions{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfets.MosfetContributionEventArgs"/> class.
            </summary>
            <param name="contributions">The contributions.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="contributions"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.MosfetVariables`1">
            <summary>
            Variables for a mosfet.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.MosfetVariables`1.Drain">
            <summary>
            The drain node.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.MosfetVariables`1.DrainPrime">
            <summary>
            The internal drain node.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.MosfetVariables`1.Gate">
            <summary>
            The gate node.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.MosfetVariables`1.Source">
            <summary>
            The source node.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.MosfetVariables`1.SourcePrime">
            <summary>
            The internal source node.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.MosfetVariables`1.Bulk">
            <summary>
            The bulk node.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.MosfetVariables`1.#ctor(SpiceSharp.Components.IComponentBindingContext,SpiceSharp.Simulations.IVariableFactory{SpiceSharp.Simulations.IVariable{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfets.MosfetVariables`1"/> struct.
            </summary>
            <param name="context">The binding context.</param>
            <param name="factory">The variable factory.</param>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.MosfetVariables`1.GetMatrixLocations(SpiceSharp.Simulations.IVariableMap)">
            <summary>
            Gets the matrix locations.
            </summary>
            <param name="map">The map.</param>
            <returns>The matrix locations.</returns>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.MosfetVariables`1.GetRhsIndices(SpiceSharp.Simulations.IVariableMap)">
            <summary>
            Gets the right hand side vector.
            </summary>
            <param name="map">The map.</param>
            <returns>The right hand side vector indices.</returns>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.MosfetVariables`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.MosfetVariables`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.MosfetVariables`1.op_Equality(SpiceSharp.Components.Mosfets.MosfetVariables{`0},SpiceSharp.Components.Mosfets.MosfetVariables{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.MosfetVariables`1.op_Inequality(SpiceSharp.Components.Mosfets.MosfetVariables{`0},SpiceSharp.Components.Mosfets.MosfetVariables{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Parameters">
            <summary>
            Common parameters for mosfet components.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Parameters.TemperatureCelsius">
            <summary>
            Gets or sets the temperature in degrees celsius.
            </summary>
            <value>
            The temperature in degrees celsius.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Parameters._temperature">
            <summary>
            Gets or sets the temperature in Kelvin.
            </summary>
            <value>
            The temperature in Kelvin.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Parameters._deltaTemperature">
            <summary>
            Gets or sets the instance temperature difference.
            </summary>
            <value>
            The temperature difference.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Parameters._width">
            <summary>
            Gets or sets the mosfet width.
            </summary>
            <value>
            The mosfet width.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Parameters._length">
            <summary>
            Gets or sets the mosfet length.
            </summary>
            <value>
            The mosfet length.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Parameters._sourceArea">
            <summary>
            Gets or sets the source layout area.
            </summary>
            <value>
            The source layout area.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Parameters._drainArea">
            <summary>
            Gets or sets the drain layout area.
            </summary>
            <value>
            The drain layout area.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Parameters._sourcePerimeter">
            <summary>
            Gets or sets the source layout perimeter.
            </summary>
            <value>
            The source layout perimeter.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Parameters._drainPerimeter">
            <summary>
            Gets or sets the drain layout perimeter.
            </summary>
            <value>
            The drain layout perimeter.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Parameters._sourceSquares">
            <summary>
            Gets or sets the number of squares of the source.
            Used in conjunction with the sheet resistance.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Parameters._drainSquares">
            <summary>
            Gets or sets the number of squares of the drain.
            Used in conjunction with the sheet resistance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Parameters.Off">
            <summary>
            Gets or sets a value indicating whether the device is on or off.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Parameters._initialVbs">
            <summary>
            Gets or sets the initial bulk-source voltage.
            </summary>
            <value>
            The initial bulk-source voltage.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Parameters._initialVds">
            <summary>
            Gets or sets the initial drain-source voltage.
            </summary>
            <value>
            The initial drain-source voltage.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Parameters._initialVgs">
            <summary>
            Gets or sets the initial gate-source voltage.
            </summary>
            <value>
            The initial gate-source voltage.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Parameters._parallelMultiplier">
            <summary>
            Gets or sets the parallel multplier (the number of transistors in parallel).
            </summary>
            <value>
            The parallel multplier.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Parameters.SetIc(System.Double[])">
            <summary>
            Set the initial conditions of the device.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Parameters.SourceArea">
            <summary>
            Gets or sets the source layout area.
            </summary>
            <value>
            The source layout area.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Parameters.DrainSquares">
            <summary>
            Gets or sets the number of squares of the drain.
            Used in conjunction with the sheet resistance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Parameters.DeltaTemperature">
            <summary>
            Gets or sets the instance temperature difference.
            </summary>
            <value>
            The temperature difference.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Parameters.DrainPerimeter">
            <summary>
            Gets or sets the drain layout perimeter.
            </summary>
            <value>
            The drain layout perimeter.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Parameters.Width">
            <summary>
            Gets or sets the mosfet width.
            </summary>
            <value>
            The mosfet width.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Parameters.ParallelMultiplier">
            <summary>
            Gets or sets the parallel multplier (the number of transistors in parallel).
            </summary>
            <value>
            The parallel multplier.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Parameters.SourceSquares">
            <summary>
            Gets or sets the number of squares of the source.
            Used in conjunction with the sheet resistance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Parameters.DrainArea">
            <summary>
            Gets or sets the drain layout area.
            </summary>
            <value>
            The drain layout area.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Parameters.Temperature">
            <summary>
            Gets or sets the temperature in Kelvin.
            </summary>
            <value>
            The temperature in Kelvin.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Parameters.SourcePerimeter">
            <summary>
            Gets or sets the source layout perimeter.
            </summary>
            <value>
            The source layout perimeter.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Parameters.InitialVbs">
            <summary>
            Gets or sets the initial bulk-source voltage.
            </summary>
            <value>
            The initial bulk-source voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Parameters.InitialVgs">
            <summary>
            Gets or sets the initial gate-source voltage.
            </summary>
            <value>
            The initial gate-source voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Parameters.Length">
            <summary>
            Gets or sets the mosfet length.
            </summary>
            <value>
            The mosfet length.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Parameters.InitialVds">
            <summary>
            Gets or sets the initial drain-source voltage.
            </summary>
            <value>
            The initial drain-source voltage.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Boolean}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Boolean}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double[]}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#GivenParameter{System#Double}}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#GivenParameter{System#Double}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.TemperatureProperties">
            <summary>
            Temperature-dependent properties.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.TemperatureProperties.Update(System.String,SpiceSharp.Components.Mosfets.Parameters,SpiceSharp.Components.Mosfets.ModelParameters,SpiceSharp.Components.Mosfets.ModelProperties)">
            <summary>
            Updates the specified properties.
            </summary>
            <param name="name">The name.</param>
            <param name="p">The parameters of the transistor.</param>
            <param name="mp">The model parameters.</param>
            <param name="mprp">The model properties.</param>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Time">
            <summary>
            Transient behavior for a mosfet.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITimeBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Time.Qgs">
            <summary>Gets the charge on the gate-source capacitance (qgs).</summary><value>The gate-source charge.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Time.Cgs">
            <summary>Gets the gate-source capacitance (cgs).</summary><value>The gate-source capacitance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Time.Qgd">
            <!-- No matching elements were found for the following include tag --><include file="../common/docs.xml" path="docs/members/GateDrainCharges/*" />
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Time.Cgd">
            <summary>Gets the gate-drain capacitance (cgd).</summary><value>The gate-drain capacitance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Time.Qgb">
            <summary>Gets the charge on the gate-bulk capacitance (cgb).</summary><value>The gate-bulk charge.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Time.Cgb">
            <summary>Gets the gate-bulk capacitance (cgb).</summary><value>The gate-bulk capacitance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Time.Qbs">
            <summary>Gets the charge on the bulk-source capacitance (qbs).</summary><value>The bulk-source charge.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Time.Cbs">
            <summary>Gets the bulk-source capacitance (cbs).</summary><value>The bulk-source capacitance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Time.Qbd">
            <summary>Gets the charge on the bulk-drain capacitance (qbd).</summary><value>The bulk-drain charge.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Time.Cbd">
            <summary>Gets the bulk-drain capacitance (cbd).</summary><value>The bulk-drain capacitance.</value>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Time.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfets.Time"/> class.
            </summary>
            <param name="context">The binding context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Time.SpiceSharp#Behaviors#ITimeBehavior#InitializeStates">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Time.UpdateTime(System.Object,SpiceSharp.Components.Mosfets.MosfetContributionEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Time.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Transistor">
            <summary>
            A class with static methods for Mosfet transistors.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Transistor.LimitFet(System.Double,System.Double,System.Double)">
            <summary>
            Limiting function for a FET.
            </summary>
            <remarks>
            Update taken from ngSpice, which was fixed by Alan Gillespie's code.
            </remarks>
            <param name="newVoltage">New voltage.</param>
            <param name="oldVoltage">Old voltage.</param>
            <param name="threshold">Threshold value.</param>
            <returns>The new voltage, limited if necessary.</returns>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Transistor.LimitVds(System.Double,System.Double)">
            <summary>
            Limiting function for the drain-source voltage.
            </summary>
            <param name="newVoltage">The new voltage.</param>
            <param name="oldVoltage">The old voltage.</param>
            <returns>The new voltage, limited if necessary.</returns>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Transistor.MeyerCharges(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double,System.Double)">
            <summary>
            QMeyer method for calculating capacitances.
            </summary>
            <param name="vgs">The gate-source voltage.</param>
            <param name="vgd">The gate-drain voltage.</param>
            <param name="von">The threshold voltage for switching on.</param>
            <param name="vdsat">The saturation voltage.</param>
            <param name="capGs">The gate-source capacitance.</param>
            <param name="capGd">The gate-drain capacitance.</param>
            <param name="capGb">The gate-bulk capacitance.</param>
            <param name="phi">The gate-bulk voltage.</param>
            <param name="cox">The oxide capacitance.</param>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Level1.Biasing">
            <summary>
            Biasing behavior for a <see cref="T:SpiceSharp.Components.Mosfet1" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Mosfets.Level1.Temperature"/>
            <seealso cref="T:SpiceSharp.Behaviors.IBiasingBehavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.IConvergenceBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Biasing.SpiceSharp#Components#Mosfets#IMosfetBiasingBehavior#Properties">
            <inheritdoc/>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level1.Biasing.MaximumExponentArgument">
            <summary>
            The maximum exponent argument
            </summary>
        </member>
        <member name="E:SpiceSharp.Components.Mosfets.Level1.Biasing.UpdateContributions">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Biasing.Id">
            <summary>Gets the drain current.</summary><value>The drain current.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Biasing.Ibs">
            <summary>Gets the bulk-source current.</summary><value>The bulk-source current.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Biasing.Ibd">
            <summary>Gets the bulk-drain current.</summary><value>The bulk-drain current.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Biasing.Gm">
            <summary>Gets the small-signal transconductance (gm).</summary><value>The small-signal transconductance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Biasing.Gmbs">
            <summary>Gets the small-signal bulk-source transconductance (gmb).</summary><value>The small-signal bulk-source transconductance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Biasing.Gds">
            <summary>Gets the small-signal drain-source conductance (gds).</summary><value>The small-signal drain-source conductance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Biasing.Gbs">
            <summary>Gets the small-signal bulk-source conductance (gbs).</summary><value>The small-signal bulk-source conductance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Biasing.Gbd">
            <summary>Gets the small-signal bulk-drain conductance (gbd).</summary><value>The small-signal bulk-drain conductance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Biasing.Von">
            <!-- No matching elements were found for the following include tag --><include file="../common/docs.xml" path="docs/members/von/*" />
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Biasing.Vdsat">
            <summary>Gets the saturation voltage (vdsat).</summary><remarks>If vds is larger than vdsat, then the transistor can be considered to be in the saturation region.</remarks><value>The saturation voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Biasing.Mode">
            <summary>Gets the current mode of operation. A value of -1.0 means that the source and drain have switched.</summary><value>The current mode of operation.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Biasing.Vgs">
            <summary>Gets the gate-source voltage (vgs).</summary><value>The gate-source voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Biasing.Vds">
            <summary>Gets the drain-source voltage (vds).</summary><value>The drain-source voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Biasing.Vbs">
            <summary>Gets the bulk-source voltage (vbs).</summary><value>The bulk-source voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Biasing.Vbd">
            <summary>Gets the bulk-drain voltage (vbd).</summary><value>The bulk-drain voltage.</value>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level1.Biasing.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfets.Level1.Biasing"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level1.Biasing.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level1.Biasing.Initialize(System.Double@,System.Double@,System.Double@,System.Boolean@)">
            <summary>Initializes the voltages that need to be used for calculating the current iteration.</summary><param name="vgs">The gate-source voltage.</param><param name="vds">The drain-source voltage.</param><param name="vbs">The bulk-source voltage.</param><param name="check">If set to <c>true</c>, the voltages have been limited to help convergence. If this is the case, then
		  a new iteration should be calculated.</param>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level1.Biasing.SpiceSharp#Behaviors#IConvergenceBehavior#IsConvergent">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level1.Biasing.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Level1.ModelParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.Mosfet1Model"/>
            </summary>
            <seealso cref="T:SpiceSharp.Components.Mosfets.ModelParameters"/>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level1.ModelParameters._lambda">
            <summary>
            Gets the channel length modulation parameter.
            </summary>
            <value>
            The channel length modulation parameter.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level1.ModelParameters.SpiceSharp#ICloneable{SpiceSharp#Components#Mosfets#Level1#ModelParameters}#Clone">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.ModelParameters.Lambda">
            <summary>
            Gets the channel length modulation parameter.
            </summary>
            <value>
            The channel length modulation parameter.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level1.ModelParameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level1.ModelParameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level1.ModelParameters.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#GivenParameter{System#Double}}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level1.ModelParameters.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#GivenParameter{System#Double}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level1.ModelParameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Boolean}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level1.ModelParameters.SpiceSharp#ParameterSets#IExportPropertySet{System#String}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Level1.ModelTemperature">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.Mosfet1Model"/>
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITemperatureBehavior"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.Mosfets.Level1.ModelParameters"/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.ModelTemperature.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.ModelTemperature.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>
            The properties.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level1.ModelTemperature.#ctor(SpiceSharp.Entities.IBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfets.Level1.ModelTemperature"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level1.ModelTemperature.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Level1.Noise">
            <summary>
            Noise behavior for a <see cref="T:SpiceSharp.Components.Mosfet1"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Mosfets.Frequency"/>
            <seealso cref="T:SpiceSharp.Behaviors.INoiseBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Noise.OutputNoiseDensity">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Noise.TotalOutputNoise">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Noise.TotalInputNoise">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Noise.ThermalDrain">
            <summary>Gets the noise source that represents the thermal noise of the drain resistance.</summary><value>The thermal noise source for the drain.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Noise.ThermalSource">
            <summary>Gets the noise source that represents the thermal noise of the source resistance.</summary><value>The thermal noise source for the source.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Noise.ShotDrainCurrent">
            <summary>Gets the noise source that represents the shot noise of the drain-source current.</summary><value>The shot noise source for the drain-source current.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Noise.Flicker">
            <summary>Gets the noise source that represents the flicker noise of the drain-source current.</summary><value>The flicker noise source for the drain-source current.</value>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level1.Noise.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfets.Level1.Noise"/> class.
            </summary>
            <param name="context">The binding context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level1.Noise.SpiceSharp#Simulations#INoiseSource#Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level1.Noise.SpiceSharp#Behaviors#INoiseBehavior#Load">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level1.Noise.SpiceSharp#Behaviors#INoiseBehavior#Compute">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level1.Noise.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level1.Noise.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#Simulations#INoiseSource}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Level1.Temperature">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.Mosfet1"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITemperatureBehavior"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Temperature.Parameters">
            <inheritdoc/>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level1.Temperature.Properties">
            <summary>
            The common temperature-dependent properties.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level1.Temperature.ModelParameters">
            <summary>
            The model parameters.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level1.Temperature.ModelTemperature">
            <summary>
            The model temperature behavior.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Temperature.SourceConductance">
            <summary>Gets the conductance of the source diffusion region.</summary><value>The conductance of the source diffusion region.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Temperature.DrainConductance">
            <summary>Gets the conductance of the drain diffusion region.</summary><value>The conductance of the drain diffusion region.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Temperature.SourceResistance">
            <summary>Gets the resistance of the source diffusion region.</summary><value>The resistance of the source diffusion region.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Temperature.DrainResistance">
            <summary>Gets the resistance of the drain diffusion region.</summary><value>The resistance of the drain diffusion region.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Temperature.SourceVCritical">
            <summary>Gets the critical voltage of the source junction.</summary><value>The critical voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level1.Temperature.DrainVCritical">
            <summary>Gets the critical voltage of the drain junction.</summary><value>The critical voltage.</value>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level1.Temperature.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfets.Level1.Temperature"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level1.Temperature.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level1.Temperature.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Level2.Biasing">
            <summary>
            Biasing behavior for a <see cref="T:SpiceSharp.Components.Mosfet2" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Mosfets.Level2.Temperature"/>
            <seealso cref="T:SpiceSharp.Behaviors.IBiasingBehavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.IConvergenceBehavior"/>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level2.Biasing.EpsilonSilicon">
            <summary>
            The permittivity of silicon.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level2.Biasing.MaximumExponentArgument">
            <summary>
            The maximum exponent argument.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Biasing.SpiceSharp#Components#Mosfets#IMosfetBiasingBehavior#Properties">
            <inheritdoc/>
        </member>
        <member name="E:SpiceSharp.Components.Mosfets.Level2.Biasing.UpdateContributions">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Biasing.Id">
            <summary>Gets the drain current.</summary><value>The drain current.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Biasing.Ibs">
            <summary>Gets the bulk-source current.</summary><value>The bulk-source current.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Biasing.Ibd">
            <summary>Gets the bulk-drain current.</summary><value>The bulk-drain current.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Biasing.Gm">
            <summary>Gets the small-signal transconductance (gm).</summary><value>The small-signal transconductance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Biasing.Gmbs">
            <summary>Gets the small-signal bulk-source transconductance (gmb).</summary><value>The small-signal bulk-source transconductance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Biasing.Gds">
            <summary>Gets the small-signal drain-source conductance (gds).</summary><value>The small-signal drain-source conductance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Biasing.Gbs">
            <summary>Gets the small-signal bulk-source conductance (gbs).</summary><value>The small-signal bulk-source conductance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Biasing.Gbd">
            <summary>Gets the small-signal bulk-drain conductance (gbd).</summary><value>The small-signal bulk-drain conductance.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Biasing.Von">
            <!-- No matching elements were found for the following include tag --><include file="../common/docs.xml" path="docs/members/von/*" />
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Biasing.Vdsat">
            <summary>Gets the saturation voltage (vdsat).</summary><remarks>If vds is larger than vdsat, then the transistor can be considered to be in the saturation region.</remarks><value>The saturation voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Biasing.Mode">
            <summary>Gets the current mode of operation. A value of -1.0 means that the source and drain have switched.</summary><value>The current mode of operation.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Biasing.Vgs">
            <summary>Gets the gate-source voltage (vgs).</summary><value>The gate-source voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Biasing.Vds">
            <summary>Gets the drain-source voltage (vds).</summary><value>The drain-source voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Biasing.Vbs">
            <summary>Gets the bulk-source voltage (vbs).</summary><value>The bulk-source voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Biasing.Vbd">
            <summary>Gets the bulk-drain voltage (vbd).</summary><value>The bulk-drain voltage.</value>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level2.Biasing.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfets.Level2.Biasing"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level2.Biasing.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level2.Biasing.Initialize(System.Double@,System.Double@,System.Double@,System.Boolean@)">
            <summary>Initializes the voltages that need to be used for calculating the current iteration.</summary><param name="vgs">The gate-source voltage.</param><param name="vds">The drain-source voltage.</param><param name="vbs">The bulk-source voltage.</param><param name="check">If set to <c>true</c>, the voltages have been limited to help convergence. If this is the case, then
		  a new iteration should be calculated.</param>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level2.Biasing.SpiceSharp#Behaviors#IConvergenceBehavior#IsConvergent">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level2.Biasing.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Level2.ModelParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.Mosfet2Model" />
            </summary>
            <seealso cref="T:SpiceSharp.Components.Mosfets.ModelParameters" />
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level2.ModelParameters._lambda">
            <summary>
            Gets the channel length modulation parameter.
            </summary>
            <value>
            The channel length modulation parameter.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level2.ModelParameters._narrowFactor">
            <summary>
            Gets or sets the width effect on the threshold voltage.
            </summary>
            <value>
            The width effect on the threshold voltage.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level2.ModelParameters._criticalField">
            <summary>
            Gets or sets the critical field for mobility degradation.
            </summary>
            <value>
            The critical field for mobility degradation.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level2.ModelParameters._criticalFieldExp">
            <summary>
            Gets or sets the critical field exponent for mobility degradation.
            </summary>
            <value>
            The critical field exponent for mobility degradation.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level2.ModelParameters._channelCharge">
            <summary>
            Gets the total channel charge coefficient.
            </summary>
            <value>
            The total channel charge coefficient.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level2.ModelParameters._fastSurfaceStateDensity">
            <summary>
            Gets the fast surface state density.
            </summary>
            <value>
            The fast surface state density.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level2.ModelParameters._maxDriftVelocity">
            <summary>
            Gets the maximum drift velocity.
            </summary>
            <value>
            The maximum drift velocity.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level2.ModelParameters._junctionDepth">
            <summary>
            Gets the junction depth.
            </summary>
            <value>
            The junction depth.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level2.ModelParameters.SpiceSharp#ICloneable{SpiceSharp#Components#Mosfets#Level2#ModelParameters}#Clone">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.ModelParameters.CriticalFieldExp">
            <summary>
            Gets or sets the critical field exponent for mobility degradation.
            </summary>
            <value>
            The critical field exponent for mobility degradation.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.ModelParameters.JunctionDepth">
            <summary>
            Gets the junction depth.
            </summary>
            <value>
            The junction depth.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.ModelParameters.CriticalField">
            <summary>
            Gets or sets the critical field for mobility degradation.
            </summary>
            <value>
            The critical field for mobility degradation.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.ModelParameters.NarrowFactor">
            <summary>
            Gets or sets the width effect on the threshold voltage.
            </summary>
            <value>
            The width effect on the threshold voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.ModelParameters.Lambda">
            <summary>
            Gets the channel length modulation parameter.
            </summary>
            <value>
            The channel length modulation parameter.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.ModelParameters.FastSurfaceStateDensity">
            <summary>
            Gets the fast surface state density.
            </summary>
            <value>
            The fast surface state density.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.ModelParameters.MaxDriftVelocity">
            <summary>
            Gets the maximum drift velocity.
            </summary>
            <value>
            The maximum drift velocity.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.ModelParameters.ChannelCharge">
            <summary>
            Gets the total channel charge coefficient.
            </summary>
            <value>
            The total channel charge coefficient.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level2.ModelParameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level2.ModelParameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level2.ModelParameters.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#GivenParameter{System#Double}}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level2.ModelParameters.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#GivenParameter{System#Double}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level2.ModelParameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Boolean}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level2.ModelParameters.SpiceSharp#ParameterSets#IExportPropertySet{System#String}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Level2.ModelProperties">
            <summary>
            Model properties for a <see cref="T:SpiceSharp.Components.Mosfet2Model"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Mosfets.ModelProperties" />
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Level2.ModelTemperature">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.Mosfet2Model"/>
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITemperatureBehavior"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.Mosfets.Level2.ModelParameters"/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.ModelTemperature.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.ModelTemperature.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>
            The properties.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level2.ModelTemperature.EpsilonSilicon">
            <summary>
            The permittivity of silicon.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.ModelTemperature.BiasingState">
            <summary>
            Gets the biasing simulation state.
            </summary>
            <value>
            The biasing simulation state.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level2.ModelTemperature.#ctor(SpiceSharp.Entities.IBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfets.Level2.ModelTemperature"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level2.ModelTemperature.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <inheritdoc/>
            <exception cref="T:SpiceSharp.SpiceSharpException">
            Thrown if Phi is not positive or if Nsub is smaller than Ni.
            </exception>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Level2.Noise">
            <summary>
            Noise behavior for a <see cref="T:SpiceSharp.Components.Mosfet2"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Mosfets.Frequency"/>
            <seealso cref="T:SpiceSharp.Behaviors.INoiseBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Noise.OutputNoiseDensity">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Noise.TotalOutputNoise">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Noise.TotalInputNoise">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Noise.ThermalDrain">
            <summary>Gets the noise source that represents the thermal noise of the drain resistance.</summary><value>The thermal noise source for the drain.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Noise.ThermalSource">
            <summary>Gets the noise source that represents the thermal noise of the source resistance.</summary><value>The thermal noise source for the source.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Noise.ShotDrainCurrent">
            <summary>Gets the noise source that represents the shot noise of the drain-source current.</summary><value>The shot noise source for the drain-source current.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Noise.Flicker">
            <summary>Gets the noise source that represents the flicker noise of the drain-source current.</summary><value>The flicker noise source for the drain-source current.</value>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level2.Noise.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfets.Level2.Noise"/> class.
            </summary>
            <param name="context">The binding context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level2.Noise.SpiceSharp#Simulations#INoiseSource#Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level2.Noise.SpiceSharp#Behaviors#INoiseBehavior#Load">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level2.Noise.SpiceSharp#Behaviors#INoiseBehavior#Compute">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level2.Noise.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level2.Noise.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#Simulations#INoiseSource}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Level2.Temperature">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.Mosfet2"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITemperatureBehavior"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Temperature.Parameters">
            <inheritdoc/>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level2.Temperature.Properties">
            <summary>
            The common temperature-dependent properties.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level2.Temperature.ModelParameters">
            <summary>
            The model parameters.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level2.Temperature.ModelTemperature">
            <summary>
            The model temperature behavior.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Temperature.SourceConductance">
            <summary>Gets the conductance of the source diffusion region.</summary><value>The conductance of the source diffusion region.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Temperature.DrainConductance">
            <summary>Gets the conductance of the drain diffusion region.</summary><value>The conductance of the drain diffusion region.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Temperature.SourceResistance">
            <summary>Gets the resistance of the source diffusion region.</summary><value>The resistance of the source diffusion region.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Temperature.DrainResistance">
            <summary>Gets the resistance of the drain diffusion region.</summary><value>The resistance of the drain diffusion region.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Temperature.SourceVCritical">
            <summary>Gets the critical voltage of the source junction.</summary><value>The critical voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level2.Temperature.DrainVCritical">
            <summary>Gets the critical voltage of the drain junction.</summary><value>The critical voltage.</value>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level2.Temperature.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfets.Level2.Temperature"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level2.Temperature.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <inheritdoc/>
            <exception cref="T:SpiceSharp.SpiceSharpException">
            Thrown if the effective channel length is less than 0.
            </exception>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Level3.Biasing">
            <summary>
            Biasing behavior for a <see cref="T:SpiceSharp.Components.Mosfet3" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Mosfets.Level3.Temperature"/>
            <seealso cref="T:SpiceSharp.Behaviors.IBiasingBehavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.IConvergenceBehavior"/>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level3.Biasing.EpsilonSilicon">
            <summary>
            The permittivity of silicon
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level3.Biasing.MaximumExponentArgument">
            <summary>
            The maximum exponent argument.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Biasing.SpiceSharp#Components#Mosfets#IMosfetBiasingBehavior#Properties">
            <inheritdoc/>
        </member>
        <member name="E:SpiceSharp.Components.Mosfets.Level3.Biasing.UpdateContributions">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Biasing.Id">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Biasing.Ibs">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Biasing.Ibd">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Biasing.Gm">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Biasing.Gmbs">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Biasing.Gds">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Biasing.Gbs">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Biasing.Gbd">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Biasing.Von">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Biasing.Vdsat">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Biasing.Mode">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Biasing.Vgs">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Biasing.Vds">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Biasing.Vbs">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Biasing.Vbd">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level3.Biasing.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfets.Level3.Biasing"/> class.
            </summary>
            <param name="context">The binding context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level3.Biasing.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level3.Biasing.Initialize(System.Double@,System.Double@,System.Double@,System.Boolean@)">
            <summary>Initializes the voltages that need to be used for calculating the current iteration.</summary><param name="vgs">The gate-source voltage.</param><param name="vds">The drain-source voltage.</param><param name="vbs">The bulk-source voltage.</param><param name="check">If set to <c>true</c>, the voltages have been limited to help convergence. If this is the case, then
		  a new iteration should be calculated.</param>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level3.Biasing.SpiceSharp#Behaviors#IConvergenceBehavior#IsConvergent">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level3.Biasing.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Level3.ModelParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.Mosfet3Model" />
            </summary>
            <seealso cref="T:SpiceSharp.Components.Mosfets.ModelParameters" />
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Level3.ModelParameters.Versions">
            <summary>
            The possible versions used for the implementation.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level3.ModelParameters.Versions.Spice3f5">
            <summary>
            The version as implemented by Spice 3f5.
            </summary>
            <remarks>
            Some small changes still apply vs Spice 3f5. Some small bugs were fixed, and
            some extra parameters will still apply (like <see cref="P:SpiceSharp.Components.Mosfets.Parameters.ParallelMultiplier"/>),
            but the underlying model equations remain unchanged.
            </remarks>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level3.ModelParameters.Versions.NgSpice">
            <summary>
            The version as implemented by ngSpice.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.ModelParameters.Version">
            <summary>
            Gets or sets the version that needs to be used.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.ModelParameters.BadMos">
            <summary>
            Gets or sets a flag that uses legacy model for MOS3 if <c>true</c>.
            </summary>
            <value>
            Flag indicating whether or not the legacy model needs to be used.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level3.ModelParameters._eta">
            <summary>
            Gets or sets the drain-source voltage dependence of the threshold voltage.
            </summary>
            <value>
            The drain-source voltage dependence of the threshold voltage.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level3.ModelParameters._kappa">
            <summary>
            Gets the kappa parameter.
            </summary>
            <value>
            The kappa-parameter.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level3.ModelParameters._theta">
            <summary>
            Gets or sets the gate-source voltage dependence on mobility.
            </summary>
            <value>
            The gate-source voltage dependence on mobility.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level3.ModelParameters._fastSurfaceStateDensity">
            <summary>
            Gets or sets the fast surface state density.
            </summary>
            <value>
            The fast surface state density.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level3.ModelParameters._maxDriftVelocity">
            <summary>
            Gets or sets the maximum drift velocity.
            </summary>
            <value>
            The maximum drift velocity.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level3.ModelParameters._junctionDepth">
            <summary>
            Gets or sets the junction depth.
            </summary>
            <value>
            The junction depth.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level3.ModelParameters._delta">
            <summary>
            Gets or sets the width effect on the threshold voltage.
            </summary>
            <value>
            The width effect on the threshold voltage.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level3.ModelParameters._lengthAdjust">
            <summary>
            Gets or sets the length mask adjustment.
            </summary>
            <value>
            The length mask adjustment.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level3.ModelParameters._widthNarrow">
            <summary>
            Gets or sets the width narrowing due to diffusion.
            </summary>
            <value>
            The width narrowing.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level3.ModelParameters._widthAdjust">
            <summary>
            Gets or sets the width mask adjustment.
            </summary>
            <value>
            The width mask adjustment.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level3.ModelParameters._delVt0">
            <summary>
            Gets or sets the threshold voltage adjustment.
            </summary>
            <value>
            The threshold voltage adjustment.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level3.ModelParameters.SpiceSharp#ICloneable{SpiceSharp#Components#Mosfets#Level3#ModelParameters}#Clone">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.ModelParameters.FastSurfaceStateDensity">
            <summary>
            Gets or sets the fast surface state density.
            </summary>
            <value>
            The fast surface state density.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.ModelParameters.MaxDriftVelocity">
            <summary>
            Gets or sets the maximum drift velocity.
            </summary>
            <value>
            The maximum drift velocity.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.ModelParameters.WidthAdjust">
            <summary>
            Gets or sets the width mask adjustment.
            </summary>
            <value>
            The width mask adjustment.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.ModelParameters.Theta">
            <summary>
            Gets or sets the gate-source voltage dependence on mobility.
            </summary>
            <value>
            The gate-source voltage dependence on mobility.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.ModelParameters.DelVt0">
            <summary>
            Gets or sets the threshold voltage adjustment.
            </summary>
            <value>
            The threshold voltage adjustment.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.ModelParameters.Kappa">
            <summary>
            Gets the kappa parameter.
            </summary>
            <value>
            The kappa-parameter.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.ModelParameters.JunctionDepth">
            <summary>
            Gets or sets the junction depth.
            </summary>
            <value>
            The junction depth.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.ModelParameters.Eta">
            <summary>
            Gets or sets the drain-source voltage dependence of the threshold voltage.
            </summary>
            <value>
            The drain-source voltage dependence of the threshold voltage.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.ModelParameters.WidthNarrow">
            <summary>
            Gets or sets the width narrowing due to diffusion.
            </summary>
            <value>
            The width narrowing.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.ModelParameters.LengthAdjust">
            <summary>
            Gets or sets the length mask adjustment.
            </summary>
            <value>
            The length mask adjustment.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.ModelParameters.Delta">
            <summary>
            Gets or sets the width effect on the threshold voltage.
            </summary>
            <value>
            The width effect on the threshold voltage.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level3.ModelParameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level3.ModelParameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level3.ModelParameters.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#GivenParameter{System#Double}}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level3.ModelParameters.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#GivenParameter{System#Double}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level3.ModelParameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Boolean}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level3.ModelParameters.SpiceSharp#ParameterSets#IExportPropertySet{System#String}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Level3.ModelProperties">
            <summary>
            Model properties for a <see cref="T:SpiceSharp.Components.Mosfet3Model"/>.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Level3.ModelTemperature">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.Mosfet3Model"/>
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITemperatureBehavior"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.Mosfets.Level3.ModelParameters"/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.ModelTemperature.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.ModelTemperature.Properties">
            <summary>
            Gets the model properties.
            </summary>
            <value>
            The model properties.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level3.ModelTemperature.EpsilonSilicon">
            <summary>
            The permittivity of silicon
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level3.ModelTemperature.#ctor(SpiceSharp.Entities.IBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfets.Level3.ModelTemperature"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level3.ModelTemperature.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Level3.Noise">
            <summary>
            Noise behavior for a <see cref="T:SpiceSharp.Components.Mosfet3"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Mosfets.Frequency"/>
            <seealso cref="T:SpiceSharp.Behaviors.INoiseBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Noise.OutputNoiseDensity">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Noise.TotalOutputNoise">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Noise.TotalInputNoise">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Noise.ThermalDrain">
            <summary>Gets the noise source that represents the thermal noise of the drain resistance.</summary><value>The thermal noise source for the drain.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Noise.ThermalSource">
            <summary>Gets the noise source that represents the thermal noise of the source resistance.</summary><value>The thermal noise source for the source.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Noise.ShotDrainCurrent">
            <summary>Gets the noise source that represents the shot noise of the drain-source current.</summary><value>The shot noise source for the drain-source current.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Noise.Flicker">
            <summary>Gets the noise source that represents the flicker noise of the drain-source current.</summary><value>The flicker noise source for the drain-source current.</value>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level3.Noise.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfets.Level3.Noise"/> class.
            </summary>
            <param name="context">The binding context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level3.Noise.SpiceSharp#Simulations#INoiseSource#Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level3.Noise.SpiceSharp#Behaviors#INoiseBehavior#Load">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level3.Noise.SpiceSharp#Behaviors#INoiseBehavior#Compute">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level3.Noise.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level3.Noise.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#Simulations#INoiseSource}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Level3.Temperature">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.Mosfet3"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.ITemperatureBehavior"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Temperature.Parameters">
            <inheritdoc/>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level3.Temperature.ModelParameters">
            <summary>
            Gets the model parameters.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level3.Temperature.ModelTemperature">
            <summary>
            Gets the model temperature behavior.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfets.Level3.Temperature.Properties">
            <summary>
            Temperature-dependent properties.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Temperature.SourceConductance">
            <summary>Gets the conductance of the source diffusion region.</summary><value>The conductance of the source diffusion region.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Temperature.DrainConductance">
            <summary>Gets the conductance of the drain diffusion region.</summary><value>The conductance of the drain diffusion region.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Temperature.SourceResistance">
            <summary>Gets the resistance of the source diffusion region.</summary><value>The resistance of the source diffusion region.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Temperature.DrainResistance">
            <summary>Gets the resistance of the drain diffusion region.</summary><value>The resistance of the drain diffusion region.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Temperature.SourceVCritical">
            <summary>Gets the critical voltage of the source junction.</summary><value>The critical voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.Mosfets.Level3.Temperature.DrainVCritical">
            <summary>Gets the critical voltage of the drain junction.</summary><value>The critical voltage.</value>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level3.Temperature.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfets.Level3.Temperature"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Mosfets.Level3.Temperature.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <inheritdoc/>
            <exception cref="T:SpiceSharp.SpiceSharpException">
            Thrown if the effective channel width or length is less than 0.
            </exception>
        </member>
        <member name="T:SpiceSharp.Components.Mosfets.Level3.TemperatureProperties">
            <summary>
            Properties for MOS3.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.Mosfet1">
            <summary>
            A Level 1 Mosfet using the Shichman-Hodges model.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Component"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.Mosfets.Parameters"/>
            <seealso cref="T:SpiceSharp.Validation.IRuleSubject"/>
        </member>
        <member name="F:SpiceSharp.Components.Mosfet1.PinCount">
            <summary>
            The pin count for mofsets.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfet1"/> class.
            </summary>
            <param name="name">The name of the device.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet1.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfet1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="d">The drain node.</param>
            <param name="g">The gate node.</param>
            <param name="s">The source node.</param>
            <param name="b">The bulk node.</param>
            <param name="model">The mosfet model.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet1.SpiceSharp#Validation#IRuleSubject#Apply(SpiceSharp.Validation.IRules)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet1.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.Mosfet1Model">
            <summary>
            A model for a <see cref="T:SpiceSharp.Components.Mosfet1"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Entities.Entity"/>
            <seealso cref="T:SpiceSharp.Entities.BindingContext"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.Mosfets.Level1.ModelParameters"/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet1Model.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfet1Model"/> class.
            </summary>
            <param name="name">The name of the device.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet1Model.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.Mosfet2">
            <summary>
            A Level 2 Mosfet using models by A. Vladimirescu and S. Liu, The Simulation of MOS Integrated Circuits Using SPICE2, ERL Memo No. M80/7, Electronics Research Laboratory University of California, Berkeley, October 1980.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Component"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.Mosfets.Parameters"/>
            <seealso cref="T:SpiceSharp.Validation.IRuleSubject"/>
        </member>
        <member name="F:SpiceSharp.Components.Mosfet2.PinCount">
            <summary>
            The pin count for mofsets.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfet2"/> class.
            </summary>
            <param name="name">The name of the device.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet2.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfet1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="d">The drain node.</param>
            <param name="g">The gate node.</param>
            <param name="s">The source node.</param>
            <param name="b">The bulk node.</param>
            <param name="model">The mosfet model.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet2.SpiceSharp#Validation#IRuleSubject#Apply(SpiceSharp.Validation.IRules)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet2.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.Mosfet2Model">
            <summary>
            A model for a <see cref="T:SpiceSharp.Components.Mosfet2"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Entities.Entity"/>
            <seealso cref="T:SpiceSharp.Entities.BindingContext"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.Mosfets.Level2.ModelParameters"/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet2Model.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfet2Model"/> class.
            </summary>
            <param name="name">The name of the device.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet2Model.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.Mosfet3">
            <summary>
            A Level 3, semi-empirical model (see reference for level 3).
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfet3.PinCount">
            <summary>
            The pin count for mosfets.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet3.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfet3"/> class.
            </summary>
            <param name="name">The name of the device.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet3.SpiceSharp#Validation#IRuleSubject#Apply(SpiceSharp.Validation.IRules)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet3.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.Mosfet3Model">
            <summary>
            A model for a <see cref="T:SpiceSharp.Components.Mosfet3"/>
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet3Model.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfet3Model"/> class.
            </summary>
            <param name="name">The name of the device.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet3Model.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfet3Model"/> class.
            </summary>
            <param name="name">Name.</param>
            <param name="nmos">True for NMOS transistors, false for PMOS transistors.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet3Model.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.Semiconductors.Semiconductor">
            <summary>
            A class with helper methods for semiconductor devices.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Semiconductors.Semiconductor.LimitJunction(System.Double,System.Double,System.Double,System.Double,System.Boolean@)">
            <summary>
            Limit the per-iteration change of PN junction voltages
            Defined as DEVpnjlim in devsup.c
            </summary>
            <remarks>
            Taken from ngSpice, where it was fixed by Alan Gillespie's code.
            </remarks>
            <param name="newVoltage">The target voltage.</param>
            <param name="oldVoltage">The current voltage.</param>
            <param name="thermalVoltage">The thermal voltage.</param>
            <param name="criticalVoltage">The critical voltage.</param>
            <param name="limited">If <c>true</c>, the value was limited.</param>
            <returns>The new voltage value, limited if necessary.</returns>
        </member>
        <member name="T:SpiceSharp.Components.Subcircuits.Accept">
            <summary>
            An <see cref="T:SpiceSharp.Behaviors.IAcceptBehavior"/> for a <see cref="T:SpiceSharp.Components.SubcircuitDefinition"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Subcircuits.SubcircuitBehavior`1" />
            <seealso cref="T:SpiceSharp.Behaviors.IAcceptBehavior" />
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Accept.#ctor(SpiceSharp.Components.Subcircuits.SubcircuitBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Subcircuits.Accept" /> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Accept.SpiceSharp#Behaviors#IAcceptBehavior#Accept">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Accept.SpiceSharp#Behaviors#IAcceptBehavior#Probe">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Subcircuits.Biasing">
            <summary>
            An <see cref="T:SpiceSharp.Behaviors.IBiasingBehavior"/> for a <see cref="T:SpiceSharp.Components.SubcircuitDefinition"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Subcircuits.SubcircuitBehavior`1" />
            <seealso cref="T:SpiceSharp.Behaviors.IBiasingBehavior" />
            <seealso cref="T:SpiceSharp.Behaviors.IConvergenceBehavior"/>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.Biasing.UpdateBehaviors">
            <summary>
            Gets the update behaviors.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Biasing.#ctor(SpiceSharp.Components.Subcircuits.SubcircuitBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Subcircuits.Biasing" /> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Biasing.FetchBehaviors(SpiceSharp.Components.Subcircuits.SubcircuitBindingContext)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Biasing.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Biasing.LoadBehaviors">
            <summary>
            Loads the behaviors.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Biasing.SpiceSharp#Behaviors#IConvergenceBehavior#IsConvergent">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Biasing.Update">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.Subcircuits.Biasing.FlatSimulationState">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.IBiasingSimulationState"/> that just maps nodes but uses the same solver.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Subcircuits.SubcircuitSolverState`2" />
            <seealso cref="T:SpiceSharp.Simulations.IBiasingSimulationState" />
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.Biasing.FlatSimulationState.OldSolution">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Biasing.FlatSimulationState.#ctor(System.String,SpiceSharp.Simulations.IBiasingSimulationState,System.Collections.Generic.IEnumerable{SpiceSharp.Components.Subcircuits.Bridge{System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Subcircuits.Biasing.FlatSimulationState"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="parent">The parent.</param>
            <param name="nodes">The nodes.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/>, <paramref name="parent"/> or <paramref name="nodes"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.Components.Subcircuits.Biasing.LocalSimulationState">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.IBiasingSimulationState" /> that can be used with a local solver and solution.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Subcircuits.LocalSolverState`2" />
            <seealso cref="T:SpiceSharp.Simulations.IBiasingSimulationState" />
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.Biasing.LocalSimulationState.OldSolution">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Biasing.LocalSimulationState.#ctor(System.String,SpiceSharp.Simulations.IBiasingSimulationState,SpiceSharp.Algebra.ISparsePivotingSolver{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Subcircuits.Biasing.LocalSimulationState"/> class.
            </summary>
            <param name="name">The name of the subcircuit instance.</param>
            <param name="parent">The parent simulation state.</param>
            <param name="solver">The solver.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/>, <paramref name="parent"/> or <paramref name="solver"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Biasing.LocalSimulationState.Initialize(System.Collections.Generic.IReadOnlyList{SpiceSharp.Components.Subcircuits.Bridge{System.String}})">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Biasing.LocalSimulationState.Update">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Subcircuits.EntitiesBehavior">
            <summary>
            A behavior that allows access to the entity behaviors inside the subcircuit.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.EntitiesBehavior.GetState``1">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.EntitiesBehavior.TryGetState``1(``0@)">
            <inheritdoc />
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.EntitiesBehavior.LocalBehaviors">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.EntitiesBehavior.#ctor(SpiceSharp.Components.Subcircuits.SubcircuitBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Subcircuits.EntitiesBehavior"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.EntitiesBehavior.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#Behaviors#IBehaviorContainerCollection}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Subcircuits.Frequency">
            <summary>
            An <see cref="T:SpiceSharp.Behaviors.IFrequencyBehavior"/> for a <see cref="T:SpiceSharp.Components.SubcircuitDefinition"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Subcircuits.SubcircuitBehavior`1" />
            <seealso cref="T:SpiceSharp.Behaviors.IFrequencyBehavior" />
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.Frequency.UpdateBehaviors">
            <summary>
            Gets the frequency update behaviors in the subcircuit.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Frequency.#ctor(SpiceSharp.Components.Subcircuits.SubcircuitBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Subcircuits.Frequency" /> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Frequency.FetchBehaviors(SpiceSharp.Components.Subcircuits.SubcircuitBindingContext)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Frequency.Update">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.Subcircuits.Frequency.FlatSimulationState">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.IComplexSimulationState"/> that can be used with a local solver and solution.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Subcircuits.LocalSolverState`2" />
            <seealso cref="T:SpiceSharp.Simulations.IComplexSimulationState" />
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.Frequency.FlatSimulationState.Laplace">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Frequency.FlatSimulationState.#ctor(System.String,SpiceSharp.Simulations.IComplexSimulationState,System.Collections.Generic.IEnumerable{SpiceSharp.Components.Subcircuits.Bridge{System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Subcircuits.Frequency.FlatSimulationState"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="parent">The parent.</param>
            <param name="nodes">The nodes.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/>, <paramref name="parent"/> or <paramref name="nodes"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.Components.Subcircuits.Frequency.LocalSimulationState">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.IComplexSimulationState"/> that can be used with a local solver and solution.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Subcircuits.LocalSolverState`2" />
            <seealso cref="T:SpiceSharp.Simulations.IComplexSimulationState" />
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.Frequency.LocalSimulationState.IsConvergent">
            <summary>
            Gets or sets a value indicating whether the solution converges.
            </summary>
            <value>
            If <c>true</c>, the solution for this subcircuit converges.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.Frequency.LocalSimulationState.Laplace">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Frequency.LocalSimulationState.#ctor(System.String,SpiceSharp.Simulations.IComplexSimulationState,SpiceSharp.Algebra.ISparsePivotingSolver{System.Numerics.Complex})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Subcircuits.Frequency.LocalSimulationState"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="parent">The parent.</param>
            <param name="solver">The solver.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/>, <paramref name="parent"/> or <paramref name="solver"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.Components.Subcircuits.Noise">
            <summary>
            An <see cref="T:SpiceSharp.Behaviors.INoiseBehavior"/> for a <see cref="T:SpiceSharp.Components.SubcircuitDefinition"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Subcircuits.SubcircuitBehavior`1" />
            <seealso cref="T:SpiceSharp.Behaviors.INoiseBehavior" />
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.Noise.OutputNoiseDensity">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.Noise.TotalOutputNoise">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.Noise.TotalInputNoise">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Noise.#ctor(SpiceSharp.Components.Subcircuits.SubcircuitBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Subcircuits.Noise" /> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Noise.SpiceSharp#Simulations#INoiseSource#Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Noise.SpiceSharp#Behaviors#INoiseBehavior#Compute">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Subcircuits.Temperature">
            <summary>
            An <see cref="T:SpiceSharp.Behaviors.ITemperatureBehavior"/> for a <see cref="T:SpiceSharp.Components.SubcircuitDefinition"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Subcircuits.SubcircuitBehavior`1" />
            <seealso cref="T:SpiceSharp.Behaviors.ITemperatureBehavior" />
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Temperature.#ctor(SpiceSharp.Components.Subcircuits.SubcircuitBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Subcircuits.Temperature" /> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Temperature.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Subcircuits.Time">
            <summary>
            An <see cref="T:SpiceSharp.Behaviors.ITimeBehavior"/> for a <see cref="T:SpiceSharp.Components.SubcircuitDefinition"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Subcircuits.SubcircuitBehavior`1" />
            <seealso cref="T:SpiceSharp.Behaviors.ITimeBehavior" />
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Time.#ctor(SpiceSharp.Components.Subcircuits.SubcircuitBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Subcircuits.Time"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Time.FetchBehaviors(SpiceSharp.Components.Subcircuits.SubcircuitBindingContext)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Time.SpiceSharp#Behaviors#ITimeBehavior#InitializeStates">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Subcircuits.Bridge`1">
            <summary>
            Describes a bridge between the local and global circuit.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="F:SpiceSharp.Components.Subcircuits.Bridge`1.Local">
            <summary>
            The local/internal instance.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Subcircuits.Bridge`1.Global">
            <summary>
            The global/external instance.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Bridge`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Subcircuits.Bridge`1"/> struct.
            </summary>
            <param name="local">The local instance.</param>
            <param name="global">The global instance.</param>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Bridge`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Bridge`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Bridge`1.op_Equality(SpiceSharp.Components.Subcircuits.Bridge{`0},SpiceSharp.Components.Subcircuits.Bridge{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Bridge`1.op_Inequality(SpiceSharp.Components.Subcircuits.Bridge{`0},SpiceSharp.Components.Subcircuits.Bridge{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Bridge`1.Equals(SpiceSharp.Components.Subcircuits.Bridge{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.Subcircuits.FlatSolverState`2">
            <summary>
            A solver simulation state that maps the names of the variables such that they are
            identified as being internal if necessary.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <typeparam name="S">The parent simulation state type.</typeparam>
            <seealso cref="T:SpiceSharp.Simulations.ISolverSimulationState`1" />
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.FlatSolverState`2.Solver">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.FlatSolverState`2.Solution">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.FlatSolverState`2.Map">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.FlatSolverState`2.#ctor(System.String,`1,System.Collections.Generic.IEnumerable{SpiceSharp.Components.Subcircuits.Bridge{System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Subcircuits.SubcircuitSolverState`2"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="parent">The parent.</param>
            <param name="nodes">The nodes.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> or <paramref name="parent"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.FlatSolverState`2.GetSharedVariable(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.FlatSolverState`2.CreatePrivateVariable(System.String,SpiceSharp.Simulations.Variables.IUnit)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Subcircuits.LocalSolverState`2">
            <summary>
            A simulation state that has a local solver.
            </summary>
            <typeparam name="T">The solver value type.</typeparam>
            <typeparam name="S">The parent simulation state type.</typeparam>
            <seealso cref="T:SpiceSharp.Simulations.ISolverSimulationState`1" />
        </member>
        <member name="F:SpiceSharp.Components.Subcircuits.LocalSolverState`2.LocalSolution">
            <summary>
            The local solution vector.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.LocalSolverState`2.Solver">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.LocalSolverState`2.Solution">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.LocalSolverState`2.Map">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.LocalSolverState`2.Updated">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SpiceSharp.Components.Subcircuits.LocalSolverState`2"/> has updated its solution.
            </summary>
            <value>
              <c>true</c> if updated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.LocalSolverState`2.#ctor(System.String,`1,SpiceSharp.Algebra.ISparsePivotingSolver{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Subcircuits.LocalSolverState`2"/> class.
            </summary>
            <param name="name">The name of the subcircuit instance.</param>
            <param name="parent">The parent simulation state.</param>
            <param name="solver">The local solver.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/>, <paramref name="parent"/> or <paramref name="solver"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.LocalSolverState`2.Initialize(System.Collections.Generic.IReadOnlyList{SpiceSharp.Components.Subcircuits.Bridge{System.String}})">
            <summary>
            Initializes the specified shared.
            </summary>
            <param name="nodes">The node map.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="nodes"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.LocalSolverState`2.ReorderLocalSolver(System.Collections.Generic.IReadOnlyList{SpiceSharp.Components.Subcircuits.Bridge{System.String}})">
            <summary>
            Reorders the local solver.
            </summary>
            <param name="nodes">The nodes.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="nodes"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.LocalSolverState`2.LinkElement(SpiceSharp.Algebra.ISparseVector{`0},SpiceSharp.Components.Subcircuits.Bridge{System.Int32})">
            <summary>
            Links vector elements.
            </summary>
            <param name="vector">The vector.</param>
            <param name="row">The row variable.</param>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.LocalSolverState`2.LinkElement(SpiceSharp.Algebra.ISparseMatrix{`0},SpiceSharp.Components.Subcircuits.Bridge{System.Int32},SpiceSharp.Components.Subcircuits.Bridge{System.Int32})">
            <summary>
            Links matrix elements.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="row">The row variable.</param>
            <param name="column">The column variable.</param>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.LocalSolverState`2.Apply">
            <summary>
            Applies the local solver to the parent solver.
            </summary>
            <returns>
            <c>true</c> if the application was successful; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:SpiceSharp.NoEquivalentSubcircuitException">Thrown if no equivalent contributions could be calculated.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.LocalSolverState`2.ApplyTransposed">
            <summary>
            Applies forward substitution for the transposed/adjoint matrix.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.LocalSolverState`2.Update">
            <summary>
            Updates the state with the new solution.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.LocalSolverState`2.UpdateTransposed">
            <summary>
            Updates the state with the new solution for the transposed version.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.LocalSolverState`2.GetSharedVariable(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.LocalSolverState`2.CreatePrivateVariable(System.String,SpiceSharp.Simulations.Variables.IUnit)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Subcircuits.SubcircuitRules">
            <summary>
            A wrapper for handling rules with subcircuits.
            </summary>
            <seealso cref="T:SpiceSharp.Validation.IRules" />
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.SubcircuitRules.ViolationCount">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.SubcircuitRules.Violations">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.SubcircuitRules.ParameterSets">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.SubcircuitRules.#ctor(SpiceSharp.Validation.IRules,SpiceSharp.Validation.ComponentRuleParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Subcircuits.SubcircuitRules"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="parameters">The parameters.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="parent"/> or <paramref name="parameters"/> is <c>null</c>.</exception>
            <exception cref="T:SpiceSharp.TypeNotFoundException">Thrown if <paramref name="parent"/> does not define a <see cref="T:SpiceSharp.Validation.ComponentRuleParameters"/>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.SubcircuitRules.Reset">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.SubcircuitRules.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.SubcircuitRules.GetParameterSet``1">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.SubcircuitRules.GetRules``1">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.SubcircuitRules.TryGetParameterSet``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.SubcircuitRules.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.Subcircuits.SubcircuitSimulation">
            <summary>
            A subcircuit simulation that captures created behaviors in a local container.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.ISimulation" />
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.SubcircuitSimulation.Definition">
            <summary>
            Gets the subcircuit.
            </summary>
            <value>
            The subcircuit.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.SubcircuitSimulation.InstanceName">
            <summary>
            Gets the name of the subcircuit instance.
            </summary>
            <value>
            The name of the instance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.SubcircuitSimulation.Nodes">
            <summary>
            Gets a dictionary that maps internal nodes to nodes external to the subcircuit. Any node that isn't
            part of this map, is considered a local node.
            </summary>
            <value>
            The node map.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.SubcircuitSimulation.#ctor(System.String,SpiceSharp.Simulations.ISimulation,SpiceSharp.Components.ISubcircuitDefinition,System.Collections.Generic.IReadOnlyList{SpiceSharp.Components.Subcircuits.Bridge{System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Subcircuits.SubcircuitSimulation" /> class.
            </summary>
            <param name="name">The name of the subcircuit.</param>
            <param name="parent">The parent simulation.</param>
            <param name="definition">The subcircuit definition.</param>
            <param name="nodes">The node bridges.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/>, <paramref name="parent"/>, <paramref name="definition"/> or <paramref name="nodes"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.SubcircuitSimulation.GetState``1">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Subcircuits.SubcircuitSolverState`2">
            <summary>
            A subcircuit simulation state with a solver.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <typeparam name="S">The parent simulation state type.</typeparam>
            <seealso cref="T:SpiceSharp.Simulations.ISolverSimulationState`1" />
        </member>
        <member name="F:SpiceSharp.Components.Subcircuits.SubcircuitSolverState`2.Name">
            <summary>
            The name of the subcircuit.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Subcircuits.SubcircuitSolverState`2.Parent">
            <summary>
            The parent simulation state.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.SubcircuitSolverState`2.Solver">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.SubcircuitSolverState`2.Solution">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.SubcircuitSolverState`2.Map">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.SubcircuitSolverState`2.#ctor(System.String,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Subcircuits.SubcircuitSolverState`2"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="parent">The parent.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> or <paramref name="parent"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.SubcircuitSolverState`2.GetSharedVariable(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.SubcircuitSolverState`2.CreatePrivateVariable(System.String,SpiceSharp.Simulations.Variables.IUnit)">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.SubcircuitSolverState`2.Comparer">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.SubcircuitSolverState`2.Add(System.String,SpiceSharp.Simulations.IVariable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.SubcircuitSolverState`2.ContainsKey(System.String)">
            <summary>
            Determines whether the dictionary contains an element that has the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>
              <c>true</c> if the read-only dictionary contains an element that has the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.SubcircuitSolverState`2.TryGetValue(System.String,SpiceSharp.Simulations.IVariable{`0}@)">
            <summary>
            Gets the value that is associated with the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <returns>
              <c>true</c> if the dictionary contains a variable that has the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.SubcircuitSolverState`2.Item(System.String)">
            <summary>
            Gets the <see cref="T:SpiceSharp.Simulations.IVariable`1"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:SpiceSharp.Simulations.IVariable`1"/>.
            </value>
            <param name="key">The key.</param>
            <returns>The variable.</returns>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.SubcircuitSolverState`2.Keys">
            <summary>
            Gets an enumerable collection that contains the keys in the dictionary.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.SubcircuitSolverState`2.Values">
            <summary>
            Gets an enumerable collection that contains the values in the dictionary.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.SubcircuitSolverState`2.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
            <value>
            The number of elements in the collection.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.SubcircuitSolverState`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.Subcircuits.VariableFactory">
            <summary>
            A factory for variables that will shield them from outside.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IVariableFactory`1" />
            <seealso cref="T:SpiceSharp.Simulations.IVariable"/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.VariableFactory.#ctor(System.String,SpiceSharp.Simulations.IVariableFactory{SpiceSharp.Simulations.IVariable},System.Collections.Generic.IEnumerable{SpiceSharp.Components.Subcircuits.Bridge{System.String}},System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Subcircuits.VariableFactory"/> class.
            </summary>
            <param name="name">The subcircuit instance name.</param>
            <param name="nodes">The nodes.</param>
            <param name="parent">The parent.</param>
            <param name="comparer">The equality comparer for nodes.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/>, <paramref name="parent"/> or <paramref name="nodes"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.VariableFactory.GetSharedVariable(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.VariableFactory.CreatePrivateVariable(System.String,SpiceSharp.Simulations.Variables.IUnit)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Subcircuits.ISubcircuitBehavior">
            <summary>
            Describes a behavior that can be used for subcircuits.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.ISubcircuitBehavior.FetchBehaviors(SpiceSharp.Components.Subcircuits.SubcircuitBindingContext)">
            <summary>
            Makes the behavior fetch the behaviors using the binding context.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.Subcircuits.Parameters">
            <summary>
            Parameters for a <see cref="T:SpiceSharp.Components.Subcircuit"/>.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.Parameters.Definition">
            <summary>
            Gets or sets the subcircuit definition.
            </summary>
            <value>
            The definition.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.Parameters.LocalSolver">
            <summary>
            Gets or sets a value indicating whether a local solver can be used.
            </summary>
            <value>
              <c>true</c> if a local solver should be used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Parameters.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#Components#ISubcircuitDefinition}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#Components#ISubcircuitDefinition}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Boolean}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Boolean}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Subcircuits.SubcircuitBehavior`1">
            <summary>
            A template for a subcircuit behavior.
            </summary>
            <typeparam name="B">The behavior type.</typeparam>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior" />
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.SubcircuitBehavior`1.Behaviors">
            <summary>
            Gets the behaviors in the subcircuit.
            </summary>
            <value>
            The behaviors.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.SubcircuitBehavior`1.#ctor(SpiceSharp.Components.Subcircuits.SubcircuitBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Subcircuits.SubcircuitBehavior`1" /> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.SubcircuitBehavior`1.FetchBehaviors(SpiceSharp.Components.Subcircuits.SubcircuitBindingContext)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Subcircuits.SubcircuitBindingContext">
            <summary>
            The binding context for a <see cref="T:SpiceSharp.Components.Subcircuit"/>. 
            </summary>
            <seealso cref="T:SpiceSharp.Components.ComponentBindingContext" />
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.SubcircuitBindingContext.Bridges">
            <summary>
            Gets the node bridges.
            </summary>
            <value>
            The bridges.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuits.SubcircuitBindingContext.LocalBehaviors">
            <summary>
            Gets the current simulation entity behaviors.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.SubcircuitBindingContext.#ctor(SpiceSharp.Components.IComponent,SpiceSharp.Components.Subcircuits.SubcircuitSimulation,SpiceSharp.Behaviors.IBehaviorContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Subcircuits.SubcircuitBindingContext"/> class.
            </summary>
            <param name="component">The component creating the behavior.</param>
            <param name="simulation">The simulation for which behaviors are created.</param>
            <param name="behaviors">The behaviors created by the entity.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="component"/>, <paramref name="simulation"/> or <paramref name="behaviors"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.SubcircuitBindingContext.AddLocalState``1(``0)">
            <summary>
            Sets the state of the local simulation to another one.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <param name="state">The state.</param>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuits.SubcircuitBindingContext.GetBehaviors``1">
            <summary>
            Gets the behaviors from the local simulation.
            </summary>
            <typeparam name="B">The behavior type.</typeparam>
            <returns>The list of behaviors.</returns>
        </member>
        <member name="T:SpiceSharp.Components.ISubcircuitDefinition">
            <summary>
            Interface that describes an entity collection for a <see cref="T:SpiceSharp.Components.Subcircuit"/>.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterSetCollection"/>
        </member>
        <member name="P:SpiceSharp.Components.ISubcircuitDefinition.Entities">
            <summary>
            Gets the entities defined in the subcircuit.
            </summary>
            <value>
            The entities inside the subcircuit.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.ISubcircuitDefinition.Pins">
            <summary>
            Gets the pin names. These are the nodes that can be connected to the outside.
            </summary>
            <value>
            The pins.
            </value>
        </member>
        <member name="T:SpiceSharp.Components.Subcircuit">
            <summary>
            A subcircuit that can contain a collection of entities.
            </summary>
            <seealso cref="T:SpiceSharp.Entities.Entity" />
            <seealso cref="T:SpiceSharp.Components.IComponent" />
        </member>
        <member name="P:SpiceSharp.Components.Subcircuit.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuit.Model">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuit.Nodes">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Subcircuit.NodeMap">
            <summary>
            Gets the node map.
            </summary>
            <value>
            The node map.
            </value>
            <exception cref="T:SpiceSharp.NodeMismatchException">Thrown if the number of nodes don't match.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuit.#ctor(System.String,SpiceSharp.Components.ISubcircuitDefinition,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Subcircuit"/> class.
            </summary>
            <param name="name">The name of the subcircuit.</param>
            <param name="definition">The subcircuit definition.</param>
            <param name="nodes">The nodes that the subcircuit is connected to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> or <paramref name="definition"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuit.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuit.Connect(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuit.Apply(SpiceSharp.Validation.IRules)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Subcircuit.Clone">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.SubcircuitDefinition">
            <summary>
            A standard implementation of a <see cref="T:SpiceSharp.Components.ISubcircuitDefinition" />.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
            <seealso cref="T:SpiceSharp.Components.ISubcircuitDefinition" />
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
        </member>
        <member name="P:SpiceSharp.Components.SubcircuitDefinition.Entities">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.SubcircuitDefinition.Pins">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.SubcircuitDefinition.#ctor(SpiceSharp.Entities.IEntityCollection,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.SubcircuitDefinition"/> class.
            </summary>
            <param name="entities">The entities.</param>
            <param name="pins">The pins.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entities"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.SubcircuitDefinition.Clone">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Switches.Accept">
            <summary>
            Accepting behavior for switches.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Switches.Biasing"/>
            <seealso cref="T:SpiceSharp.Behaviors.IAcceptBehavior"/>
        </member>
        <member name="M:SpiceSharp.Components.Switches.Accept.#ctor(SpiceSharp.Components.Switches.ISwitchBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Switches.Accept" /> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Switches.Accept.SpiceSharp#Behaviors#IAcceptBehavior#Probe">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Switches.Accept.SpiceSharp#Behaviors#IAcceptBehavior#Accept">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Switches.Accept.SpiceSharp#ParameterSets#IExportPropertySet{System#Boolean}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Switches.Accept.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Switches.Biasing">
            <summary>
            Basing behavior for switches.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.IBiasingBehavior"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.Switches.Parameters"/>
        </member>
        <member name="F:SpiceSharp.Components.Switches.Biasing.ModelTemperature">
            <summary>
            The model temperature behavior.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Switches.Biasing.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Switches.Biasing.PreviousState">
            <summary>
            Gets or sets the old state of the switch.
            </summary>
            <value>
            The old state of the switch.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Switches.Biasing.UseOldState">
            <summary>
            Flag for using the old state or not.
            </summary>
            <value>
            If <c>true</c>, the old state is used; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Switches.Biasing.CurrentState">
            <summary>
            Gets the current state of the switch.
            </summary>
            <value>
            The current state of the switch.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Switches.Biasing.Conductance">
            <summary>
            Gets the currently active conductance.
            </summary>
            <value>
            The current conductance of the switch.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Switches.Biasing.Voltage">
            <summary>Gets the DC or instantaneous voltage over the device.</summary><value>The DC or instantaneous voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.Switches.Biasing.Current">
            <summary>Gets the DC or instantaneous current through the device.</summary><value>The DC or instantaneous current.</value>
        </member>
        <member name="P:SpiceSharp.Components.Switches.Biasing.Power">
            <summary>Gets the DC or instantaneous power dissipation by the device.</summary><value>The DC or instantaneous power dissipation.</value>
        </member>
        <member name="M:SpiceSharp.Components.Switches.Biasing.#ctor(SpiceSharp.Components.Switches.ISwitchBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Switches.Biasing" /> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Switches.Biasing.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Switches.Biasing.SpiceSharp#ParameterSets#IExportPropertySet{System#Boolean}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Switches.Biasing.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Switches.CurrentModelParameters">
            <summary>
            Model parameters for a <see cref="T:SpiceSharp.Components.CurrentSwitchModel" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Switches.ModelParameters" />
        </member>
        <member name="P:SpiceSharp.Components.Switches.CurrentModelParameters.Threshold">
            <summary>
            Gets the threshold current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Switches.CurrentModelParameters.Hysteresis">
            <summary>
            Gets the hysteresis current.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Switches.CurrentModelParameters.SpiceSharp#ICloneable{SpiceSharp#Components#Switches#CurrentModelParameters}#Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Switches.CurrentModelParameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Switches.CurrentModelParameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Switches.CurrentSwitchBindingContext">
            <summary>
            A binding context for a <see cref="T:SpiceSharp.Components.CurrentSwitch"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.CommonBehaviors.CurrentControlledBindingContext" />
        </member>
        <member name="P:SpiceSharp.Components.Switches.CurrentSwitchBindingContext.ControlValue">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Switches.CurrentSwitchBindingContext.#ctor(SpiceSharp.Components.ICurrentControllingComponent,SpiceSharp.Simulations.ISimulation,SpiceSharp.Behaviors.IBehaviorContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Switches.CurrentSwitchBindingContext"/> class.
            </summary>
            <param name="component">The component that creates the behavior.</param>
            <param name="simulation">The simulation for which the behavior is created.</param>
            <param name="behaviors">The created behaviors.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="component"/>, <paramref name="simulation"/> or <paramref name="behaviors"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.Components.Switches.Frequency">
            <summary>
            Frequency behavior for switches.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Switches.Biasing" />
            <seealso cref="T:SpiceSharp.Behaviors.IFrequencyBehavior" />
        </member>
        <member name="P:SpiceSharp.Components.Switches.Frequency.ComplexVoltage">
            <!-- No matching elements were found for the following include tag --><include file="../Common/docs.xml" path="docs/members[@name=&quot;Frequency&quot;]/Voltage/*" />
        </member>
        <member name="P:SpiceSharp.Components.Switches.Frequency.ComplexCurrent">
            <!-- No matching elements were found for the following include tag --><include file="../Common/docs.xml" path="docs/members[@name=&quot;Frequency&quot;]/Current/*" />
        </member>
        <member name="P:SpiceSharp.Components.Switches.Frequency.ComplexPower">
            <!-- No matching elements were found for the following include tag --><include file="../Common/docs.xml" path="docs/members[@name=&quot;Frequency&quot;]/Power/*" />
        </member>
        <member name="M:SpiceSharp.Components.Switches.Frequency.#ctor(SpiceSharp.Components.Switches.ISwitchBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Switches.Frequency"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Switches.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Switches.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Switches.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Numerics#Complex}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Switches.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Boolean}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Switches.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Switches.ISwitchBindingContext">
            <summary>
            Describes a binding context for switches.
            </summary>
            <seealso cref="T:SpiceSharp.Components.IComponentBindingContext" />
        </member>
        <member name="P:SpiceSharp.Components.Switches.ISwitchBindingContext.ControlValue">
            <summary>
            Gets the function that can return the controlling value.
            </summary>
            <value>
            The controlling value.
            </value>
        </member>
        <member name="T:SpiceSharp.Components.Switches.ModelParameters">
            <summary>
            Base parameters for a switch model.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Switches.ModelParameters._onResistance">
            <summary>
            Gets the resistance parameter when closed.
            </summary>
            <value>
            The on resistance.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Switches.ModelParameters._offResistance">
            <summary>
            Gets the resistance parameter when open.
            </summary>
            <value>
            The off resistance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Switches.ModelParameters.Threshold">
            <summary>
            Gets the threshold parameter.
            </summary>
            <value>
            The threshold value.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Switches.ModelParameters.Hysteresis">
            <summary>
            Gets the hysteresis parameter.
            </summary>
            <value>
            The hysteresis value.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Switches.ModelParameters.OffResistance">
            <summary>
            Gets the resistance parameter when open.
            </summary>
            <value>
            The off resistance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Switches.ModelParameters.OnResistance">
            <summary>
            Gets the resistance parameter when closed.
            </summary>
            <value>
            The on resistance.
            </value>
        </member>
        <member name="T:SpiceSharp.Components.Switches.ModelTemperature">
            <summary>
            Temperature behavior for switches.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior" />
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1" />
            <seealso cref="T:SpiceSharp.Behaviors.ITemperatureBehavior" />
            <seealso cref="T:SpiceSharp.Components.Switches.VoltageModelParameters"/>
        </member>
        <member name="P:SpiceSharp.Components.Switches.ModelTemperature.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Switches.ModelTemperature.OnConductance">
            <summary>
            Gets the on conductance.
            </summary>
            <value>
            The on conductance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Switches.ModelTemperature.OffConductance">
            <summary>
            Gets the off conductance.
            </summary>
            <value>
            The off conductance.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Switches.ModelTemperature.Hysteresis">
            <summary>
            Gets the hysteresis parameter.
            </summary>
            <value>
            The hysteresis value.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Switches.ModelTemperature.#ctor(SpiceSharp.Entities.IBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Switches.ModelTemperature"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Switches.ModelTemperature.Temperature">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Switches.ModelTemperature.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Switches.Parameters">
            <summary>
            Base parameters for a switch.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
        </member>
        <member name="M:SpiceSharp.Components.Switches.Parameters.SetZeroStateOn(System.Boolean)">
            <summary>
            Sets the switch initially to conducting.
            </summary>
            <param name="flag">If <c>true</c>, the switch will be initially on.</param>
        </member>
        <member name="M:SpiceSharp.Components.Switches.Parameters.SetZeroStateOff(System.Boolean)">
            <summary>
            Sets the switch initially to non-conducting.
            </summary>
            <param name="flag">If <c>true</c>, the switch will be initially off.</param>
        </member>
        <member name="F:SpiceSharp.Components.Switches.Parameters._parallelMultiplier">
            <summary>
            Gets or sets the multiplier.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Switches.Parameters.ZeroState">
            <summary>
            Gets or sets initial state.
            </summary>
            <value>
              <c>true</c> if the switch is initially on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Switches.Parameters.ParallelMultiplier">
            <summary>
            Gets or sets the multiplier.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Switches.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Boolean}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Switches.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Switches.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Switches.VoltageModelParameters">
            <summary>
            Model parameters for a <see cref="T:SpiceSharp.Components.VoltageSwitchModel" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Switches.ModelParameters" />
        </member>
        <member name="P:SpiceSharp.Components.Switches.VoltageModelParameters.Threshold">
            <summary>
            Gets the threshold current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Switches.VoltageModelParameters.Hysteresis">
            <summary>
            Gets the hysteresis current.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Switches.VoltageModelParameters.SpiceSharp#ICloneable{SpiceSharp#Components#Switches#VoltageModelParameters}#Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Switches.VoltageModelParameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Switches.VoltageModelParameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Switches.VoltageSwitchBindingContext">
            <summary>
            A binding context for a <see cref="T:SpiceSharp.Components.VoltageSwitch"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.ComponentBindingContext" />
            <seealso cref="T:SpiceSharp.Components.Switches.ISwitchBindingContext" />
        </member>
        <member name="P:SpiceSharp.Components.Switches.VoltageSwitchBindingContext.ControlValue">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Switches.VoltageSwitchBindingContext.#ctor(SpiceSharp.Components.IComponent,SpiceSharp.Simulations.ISimulation,SpiceSharp.Behaviors.IBehaviorContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Switches.VoltageSwitchBindingContext"/> class.
            </summary>
            <param name="component">The component creating the behavior.</param>
            <param name="simulation">The simulation for which a behavior is created.</param>
            <param name="behaviors">The behaviors created by the entity.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="simulation"/>, <paramref name="component"/> or <paramref name="behaviors"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.Components.CurrentSwitch">
            <summary>
            A current-controlled switch
            </summary>
            <seealso cref="T:SpiceSharp.Components.Component" />
            <seealso cref="T:SpiceSharp.Components.ICurrentControllingComponent" />
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1" />
            <seealso cref="T:SpiceSharp.Components.Switches.Parameters"/>
        </member>
        <member name="P:SpiceSharp.Components.CurrentSwitch.ControllingSource">
            <summary>
            Controlling source name
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.CurrentSwitch.CurrentSwitchPinCount">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSwitch.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.CurrentSwitch"/> class.
            </summary>
            <param name="name">The name of the current-controlled switch.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSwitch.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.CurrentSwitch"/> class.
            </summary>
            <param name="name">The name of the current-controlled switch.</param>
            <param name="pos">The positive node.</param>
            <param name="neg">The negative node.</param>
            <param name="controllingSource">The controlling voltage source.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSwitch.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.CurrentSwitchModel">
            <summary>
            A model for a <see cref="T:SpiceSharp.Components.CurrentSwitch"/>
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSwitchModel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.CurrentSwitchModel"/> class.
            </summary>
            <param name="name">The name of the model.</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSwitchModel.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.VoltageSwitch">
            <summary>
            A voltage-controlled switch
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.VoltageSwitch.VoltageSwitchPinCount">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSwitch.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageSwitch"/> class.
            </summary>
            <param name="name">The name of the voltage-controlled switch</param>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSwitch.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageSwitch"/> class.
            </summary>
            <param name="name">The name of the voltage-controlled switch</param>
            <param name="pos">The positive node</param>
            <param name="neg">The negative node</param>
            <param name="controlPos">The positive controlling node</param>
            <param name="controlNeg">The negative controlling node</param>
            <param name="model">The model.</param>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSwitch.SpiceSharp#Validation#IRuleSubject#Apply(SpiceSharp.Validation.IRules)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSwitch.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.VoltageSwitchModel">
            <summary>
            A model for a <see cref="T:SpiceSharp.Components.VoltageSwitch"/>
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSwitchModel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageSwitchModel"/> class.
            </summary>
            <param name="name">The name of the model</param>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSwitchModel.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.CurrentControlledVoltageSources.Biasing">
            <summary>
            General behavior for <see cref="T:SpiceSharp.Components.CurrentControlledVoltageSource"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.IBiasingBehavior"/>
            <seealso cref="T:SpiceSharp.Components.IBranchedBehavior`1"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.CurrentControlledVoltageSources.Parameters"/>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSources.Biasing.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSources.Biasing.Current">
            <summary>Gets the DC or instantaneous current through the device.</summary><value>The DC or instantaneous current.</value>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSources.Biasing.Voltage">
            <summary>Gets the DC or instantaneous voltage over the device.</summary><value>The DC or instantaneous voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSources.Biasing.Power">
            <summary>Gets the DC or instantaneous power dissipation by the device.</summary><value>The DC or instantaneous power dissipation.</value>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSources.Biasing.Branch">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSources.Biasing.#ctor(SpiceSharp.Components.CommonBehaviors.ICurrentControlledBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.CurrentControlledVoltageSources.Biasing"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSources.Biasing.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSources.Biasing.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.CurrentControlledVoltageSources.Frequency">
            <summary>
            Small signal behavior for <see cref="T:SpiceSharp.Components.CurrentControlledVoltageSource" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.CurrentControlledVoltageSources.Biasing" />
            <seealso cref="T:SpiceSharp.Behaviors.IFrequencyBehavior" />
            <seealso cref="T:SpiceSharp.Components.IBranchedBehavior`1" />
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSources.Frequency.ComplexVoltage">
            <summary>Gets the complex voltage over the device.</summary><value>The complex voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSources.Frequency.ComplexCurrent">
            <summary>Gets the complex current through the device.</summary><value>The complex current.</value>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSources.Frequency.ComplexPower">
            <summary>Gets the complex power dissipation by the device.</summary><value>The complex power dissipation.</value>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSources.Frequency.Branch">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSources.Frequency.#ctor(SpiceSharp.Components.CommonBehaviors.ICurrentControlledBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.CurrentControlledVoltageSources.Frequency"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSources.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSources.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSources.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Numerics#Complex}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSources.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.CurrentControlledVoltageSources.Parameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.CurrentControlledVoltageSource"/>
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet"/>
        </member>
        <member name="F:SpiceSharp.Components.CurrentControlledVoltageSources.Parameters._coefficient">
            <summary>
            Gets or sets the transresistance gain.
            </summary>
            <value>
            The transresistance gain.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSources.Parameters.Coefficient">
            <summary>
            Gets or sets the transresistance gain.
            </summary>
            <value>
            The transresistance gain.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSources.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSources.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.CurrentControlledVoltageSource">
            <summary>
            A current-controlled voltage source.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Component"/>
            <seealso cref="T:SpiceSharp.Components.ICurrentControllingComponent"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.CurrentControlledVoltageSources.Parameters"/>
            <seealso cref="T:SpiceSharp.Validation.IRuleSubject"/>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSource.ControllingSource">
            <summary>
            Gets or sets the name of the controlling entity.
            </summary>
            <value>
            The name of the controlling entity.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.CurrentControlledVoltageSource.PinCount">
            <summary>
            The pin count for current-controlled voltage sources.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.CurrentControlledVoltageSource"/> class.
            </summary>
            <param name="name">The name of the current-controlled current source.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSource.#ctor(System.String,System.String,System.String,System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.CurrentControlledVoltageSource"/> class.
            </summary>
            <param name="name">The name of the current-controlled current source.</param>
            <param name="pos">The positive node.</param>
            <param name="neg">The negative node.</param>
            <param name="controllingSource">The controlling voltage source name.</param>
            <param name="gain">The transresistance (gain).</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSource.SpiceSharp#Validation#IRuleSubject#Apply(SpiceSharp.Validation.IRules)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSource.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.VoltageControlledVoltageSources.Biasing">
            <summary>
            General behavior for a <see cref="T:SpiceSharp.Components.VoltageControlledVoltageSource"/>
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.IBiasingBehavior"/>
            <seealso cref="T:SpiceSharp.Components.IBranchedBehavior`1"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.VoltageControlledVoltageSources.Parameters"/>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSources.Biasing.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSources.Biasing.Current">
            <summary>Gets the DC or instantaneous current through the device.</summary><value>The DC or instantaneous current.</value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSources.Biasing.Voltage">
            <summary>Gets the DC or instantaneous voltage over the device.</summary><value>The DC or instantaneous voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSources.Biasing.Power">
            <summary>Gets the DC or instantaneous power dissipation by the device.</summary><value>The DC or instantaneous power dissipation.</value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSources.Biasing.Branch">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSources.Biasing.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageControlledVoltageSources.Biasing"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSources.Biasing.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSources.Biasing.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.VoltageControlledVoltageSources.Frequency">
            <summary>
            AC behavior for a <see cref="T:SpiceSharp.Components.VoltageControlledVoltageSource"/>
            </summary>
            <seealso cref="T:SpiceSharp.Components.VoltageControlledVoltageSources.Biasing"/>
            <seealso cref="T:SpiceSharp.Behaviors.IFrequencyBehavior"/>
            <seealso cref="T:SpiceSharp.Components.IBranchedBehavior`1"/>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSources.Frequency.ComplexVoltage">
            <summary>Gets the complex voltage over the device.</summary><value>The complex voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSources.Frequency.ComplexCurrent">
            <summary>Gets the complex current through the device.</summary><value>The complex current.</value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSources.Frequency.ComplexPower">
            <summary>Gets the complex power dissipation by the device.</summary><value>The complex power dissipation.</value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSources.Frequency.Branch">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSources.Frequency.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageControlledVoltageSources.Frequency"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSources.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSources.Frequency.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSources.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Numerics#Complex}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSources.Frequency.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.VoltageControlledVoltageSources.Parameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.VoltageControlledVoltageSource"/>
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet"/>
        </member>
        <member name="F:SpiceSharp.Components.VoltageControlledVoltageSources.Parameters._coefficient">
            <summary>
            Gets or sets the voltage gain.
            </summary>
            <value>
            The voltage gain.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSources.Parameters.Coefficient">
            <summary>
            Gets or sets the voltage gain.
            </summary>
            <value>
            The voltage gain.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSources.Parameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSources.Parameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.VoltageControlledVoltageSource">
            <summary>
            A voltage-controlled current-source.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Component"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.VoltageControlledCurrentSources.Parameters"/>
            <seealso cref="T:SpiceSharp.Validation.IRuleSubject"/>
        </member>
        <member name="F:SpiceSharp.Components.VoltageControlledVoltageSource.PinCount">
            <summary>
            The pin count for voltage-controlled voltage sources.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageControlledVoltageSource"/> class.
            </summary>
            <param name="name">The name of the entity.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSource.#ctor(System.String,System.String,System.String,System.String,System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageControlledVoltageSource"/> class.
            </summary>
            <param name="name">The name of the voltage-controlled voltage source</param>
            <param name="pos">The positive node</param>
            <param name="neg">The negative node</param>
            <param name="controlPos">The positive controlling node</param>
            <param name="controlNeg">The negative controlling node</param>
            <param name="gain">The voltage gain</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSource.SpiceSharp#Validation#IRuleSubject#Apply(SpiceSharp.Validation.IRules)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSource.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.VoltageSources.Accept">
            <summary>
            Accept behavior for a <see cref="T:SpiceSharp.Components.VoltageSource"/>
            </summary>
            <seealso cref="T:SpiceSharp.Components.VoltageSources.Biasing"/>
            <seealso cref="T:SpiceSharp.Behaviors.IAcceptBehavior"/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSources.Accept.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageSources.Accept"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSources.Accept.SpiceSharp#Behaviors#IAcceptBehavior#Probe">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSources.Accept.SpiceSharp#Behaviors#IAcceptBehavior#Accept">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSources.Accept.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.VoltageSources.Biasing">
            <summary>
            Biasing behavior for <see cref="T:SpiceSharp.Components.VoltageSource"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.Behavior"/>
            <seealso cref="T:SpiceSharp.Components.IBranchedBehavior`1"/>
            <seealso cref="T:SpiceSharp.Behaviors.IBiasingBehavior"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters"/>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSources.Biasing.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSources.Biasing.Waveform">
            <summary>
            Gets the waveform.
            </summary>
            <value>
            The waveform.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSources.Biasing.Current">
            <summary>Gets the DC or instantaneous current through the device.</summary><value>The DC or instantaneous current.</value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSources.Biasing.Power">
            <summary>Gets the DC or instantaneous power dissipation by the device.</summary><value>The DC or instantaneous power dissipation.</value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSources.Biasing.Voltage">
            <summary>Gets the DC or instantaneous voltage over the device.</summary><value>The DC or instantaneous voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSources.Biasing.Branch">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSources.Biasing.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageSources.Biasing"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSources.Biasing.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSources.Biasing.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.VoltageSources.FrequencyBehavior">
            <summary>
            AC behavior for <see cref="T:SpiceSharp.Components.VoltageSource"/>
            </summary>
            <seealso cref="T:SpiceSharp.Components.VoltageSources.Biasing"/>
            <seealso cref="T:SpiceSharp.Behaviors.IFrequencyBehavior"/>
            <seealso cref="T:SpiceSharp.Components.IBranchedBehavior`1"/>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSources.FrequencyBehavior.ComplexVoltage">
            <summary>Gets the complex voltage over the device.</summary><value>The complex voltage.</value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSources.FrequencyBehavior.ComplexCurrent">
            <summary>Gets the complex current through the device.</summary><value>The complex current.</value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSources.FrequencyBehavior.ComplexPower">
            <summary>Gets the complex power dissipation by the device.</summary><value>The complex power dissipation.</value>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSources.FrequencyBehavior.Branch">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSources.FrequencyBehavior.#ctor(SpiceSharp.Components.IComponentBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageSources.FrequencyBehavior"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSources.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSources.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSources.FrequencyBehavior.SpiceSharp#ParameterSets#IExportPropertySet{System#Numerics#Complex}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSources.FrequencyBehavior.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.VoltageSource">
            <summary>
            An independent voltage source.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Component"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Validation.IRuleSubject"/>
            <seealso cref="T:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters"/>
        </member>
        <member name="F:SpiceSharp.Components.VoltageSource.PinCount">
            <summary>
            The pin count for a voltage source.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageSource"/> class.
            </summary>
            <param name="name">The name</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSource.#ctor(System.String,System.String,System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageSource"/> class.
            </summary>
            <param name="name">The name of the voltage source</param>
            <param name="pos">The positive node</param>
            <param name="neg">The negative node</param>
            <param name="dc">The DC value</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSource.#ctor(System.String,System.String,System.String,SpiceSharp.Components.IWaveformDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageSource"/> class.
            </summary>
            <param name="name">The name of the voltage source</param>
            <param name="pos">The positive node</param>
            <param name="neg">The negative node</param>
            <param name="waveform">The waveform</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSource.SpiceSharp#Validation#IRuleSubject#Apply(SpiceSharp.Validation.IRules)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSource.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Components.AM">
            <summary>
            This class implements an amplitude-modulated waveform.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.AM.Amplitude">
            <summary>
            Gets or sets the amplitude value.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.AM.Offset">
            <summary>
            Gets or sets the offset value.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.AM._modulationFrequency">
            <summary>
            Gets or sets the carrier frequency.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.AM._carrierFrequency">
            <summary>
            Gets or sets the signal frequency.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.AM.SignalDelay">
            <summary>
            Gets or sets the signal delay.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.AM.CarrierPhase">
            <summary>
            Gets or sets the carrier phase.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.AM.SignalPhase">
            <summary>
            Gets or sets the signal phase.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.AM.SetSffm(System.Double[])">
            <summary>
            Sets all SFFM parameters.
            </summary>
            <param name="sffm">The SFFM parameters.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="sffm"/> does not have 1 - 5 parameters.</exception>
        </member>
        <member name="M:SpiceSharp.Components.AM.Create(SpiceSharp.Entities.IBindingContext)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.AM.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.SFFM"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.AM.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.SFFM"/> class.
            </summary>
            <param name="amplitude">The amplitude value.</param>
            <param name="offset">The offset value.</param>
            <param name="modulationFrequency">The modulation frequency.</param>
            <param name="carrierFrequency">The carrier frequency.</param>
            <param name="signalDelay">The signal delay.</param>
            <param name="carrierPhase">The carrier phase.</param>
            <param name="signalPhase">The signal phase.</param>
        </member>
        <member name="M:SpiceSharp.Components.AM.ToString">
            <summary>
            Returns a string that represents the current single-frequency FM waveform.
            </summary>
            <returns>
            A string that represents the current SFFM.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.AM.Instance">
            <summary>
            The instance for a SFFM waveform.
            </summary>
            <seealso cref="T:SpiceSharp.Components.IWaveform" />
        </member>
        <member name="P:SpiceSharp.Components.AM.Instance.Value">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.AM.Instance.#ctor(SpiceSharp.Simulations.IIntegrationMethod,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.AM.Instance"/> class.
            </summary>
            <param name="method">The integration method.</param>
            <param name="amplitude">The amplitude.</param>
            <param name="offset">The offset.</param>
            <param name="modulationFrequency">The modulation index.</param>
            <param name="carrierFrequency">The carrier frequency.</param>
            <param name="signalDelay">The signal delay.</param>
            <param name="carrierPhase">The carrier delay.</param>
            <param name="signalPhase">The signal phase.</param>
        </member>
        <member name="M:SpiceSharp.Components.AM.Instance.At(System.Double)">
            <summary>
            Calculate the pulse value at the designated timepoint.
            </summary>
            <param name="time">The time value.</param>
        </member>
        <member name="M:SpiceSharp.Components.AM.Instance.Probe">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.AM.Instance.Accept">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.AM.CarrierFrequency">
            <summary>
            Gets or sets the signal frequency.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.AM.ModulationFrequency">
            <summary>
            Gets or sets the carrier frequency.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.AM.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.AM.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.AM.SpiceSharp#ParameterSets#IImportParameterSet{System#Double[]}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.AM.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#GivenParameter{System#Double}}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.AM.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#GivenParameter{System#Double}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.IWaveform">
            <summary>
            An instance of a waveform that can be used to sample datapoints.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.IWaveform.Value">
            <summary>
            Gets the value that is currently being probed.
            </summary>
            <value>
            The value at the probed timepoint.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.IWaveform.Probe">
            <summary>
            Probes a new timepoint.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.IWaveform.Accept">
            <summary>
            Accepts the last probed timepoint.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.IWaveformDescription">
            <summary>
            A waveform description.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterSet" />
        </member>
        <member name="M:SpiceSharp.Components.IWaveformDescription.Create(SpiceSharp.Entities.IBindingContext)">
            <summary>
            Creates a waveform instance for the specified simulation and entity.
            </summary>
            <param name="context">The binding context.</param>
            <returns>
            The waveform instance.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.Pulse">
            <summary>
            This class implements a pulse waveform.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
            <seealso cref="T:SpiceSharp.Components.IWaveformDescription" />
            <summary>
            Pulse waveform description.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Pulse.InitialValue">
            <summary>
            Gets or sets the initial/low value.
            </summary>
            <value>
            The initial/low value.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Pulse.PulsedValue">
            <summary>
            Gets or sets the pulsed/high value.
            </summary>
            <value>
            The pulsed/high value.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Pulse.Delay">
            <summary>
            Gets the delay of the waveform in seconds.
            </summary>
            <value>
            The delay of the waveform.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Pulse._riseTime">
            <summary>
            Gets or sets the rise time in seconds.
            </summary>
            <value>
            The rise time.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Pulse._fallTime">
            <summary>
            Gets or sets the fall time in seconds.
            </summary>
            <value>
            The fall time.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Pulse._pulseWidth">
            <summary>
            Gets or sets the width of the pulse in seconds.
            </summary>
            <value>
            The pulse width.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Pulse._period">
            <summary>
            Gets or sets the period in seconds.
            </summary>
            <value>
            The period.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Pulse.SetPulse(System.Double[])">
            <summary>
            Sets all the pulse parameters.
            </summary>
            <param name="pulse">The pulse parameters.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="pulse"/> does not have 1-7 parameters.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Pulse.Create(SpiceSharp.Entities.IBindingContext)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Pulse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Pulse"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Pulse.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Pulse"/> class.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="pulsedValue">The peak value.</param>
            <param name="delay">The initial delay time in seconds.</param>
            <param name="riseTime">The rise time in seconds.</param>
            <param name="fallTime">The fall time in seconds.</param>
            <param name="pulseWidth">The pulse width in seconds.</param>
            <param name="period">The period in seconds.</param>
        </member>
        <member name="M:SpiceSharp.Components.Pulse.ToString">
            <summary>
            Returns a string that represents the current pulse waveform.
            </summary>
            <returns>
            A string that represents the current pulse waveform.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.Pulse.Instance">
            <summary>
            The instance for a pulsed waveform.
            </summary>
            <seealso cref="T:SpiceSharp.Components.IWaveform" />
        </member>
        <member name="P:SpiceSharp.Components.Pulse.Instance.Value">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Pulse.Instance.#ctor(SpiceSharp.Simulations.IIntegrationMethod,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Pulse.Instance"/> class.
            </summary>
            <param name="method">The integration method.</param>
            <param name="v1">The initial/low value.</param>
            <param name="v2">The pulsed/high value.</param>
            <param name="td">The delay.</param>
            <param name="tr">The rise time.</param>
            <param name="tf">The fall time.</param>
            <param name="pw">The pulse width.</param>
            <param name="per">The period.</param>
        </member>
        <member name="M:SpiceSharp.Components.Pulse.Instance.At(System.Double)">
            <summary>
            Calculate the pulse value at the designated timepoint.
            </summary>
            <param name="time">The time value.</param>
        </member>
        <member name="M:SpiceSharp.Components.Pulse.Instance.Probe">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Pulse.Instance.Accept">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Pulse.Period">
            <summary>
            Gets or sets the period in seconds.
            </summary>
            <value>
            The period.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Pulse.RiseTime">
            <summary>
            Gets or sets the rise time in seconds.
            </summary>
            <value>
            The rise time.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Pulse.PulseWidth">
            <summary>
            Gets or sets the width of the pulse in seconds.
            </summary>
            <value>
            The pulse width.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Pulse.FallTime">
            <summary>
            Gets or sets the fall time in seconds.
            </summary>
            <value>
            The fall time.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Pulse.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Pulse.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Pulse.SpiceSharp#ParameterSets#IImportParameterSet{System#Double[]}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Pulse.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#GivenParameter{System#Double}}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Pulse.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#GivenParameter{System#Double}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Point">
            <summary>
            Represents a point for a <see cref="T:SpiceSharp.Components.Pwl"/>.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Point.Time">
            <summary>
            The point time.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Point.Value">
            <summary>
            The point value.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Point.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Point"/> struct.
            </summary>
            <param name="time">The time.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SpiceSharp.Components.Point.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.Point.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.Point.op_Equality(SpiceSharp.Components.Point,SpiceSharp.Components.Point)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.Point.op_Inequality(SpiceSharp.Components.Point,SpiceSharp.Components.Point)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.Point.ToString">
            <summary>
            Returns a string that represents the current point.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.Pwl">
            <summary>
            Piecewise linear waveform.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
            <seealso cref="T:SpiceSharp.Components.IWaveformDescription" />
        </member>
        <member name="P:SpiceSharp.Components.Pwl.Points">
            <summary>
            Gets or sets the waveform points.
            </summary>
            <value>
            The waveform points
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Pwl.SetPoints(System.Double[])">
            <summary>
            Sets the waveform points using a vector sequence of times and values.
            </summary>
            <param name="vector">The array of alternating timepoints and values.</param>
        </member>
        <member name="M:SpiceSharp.Components.Pwl.Create(SpiceSharp.Entities.IBindingContext)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Pwl.ToString">
            <summary>
            Returns a string that represents the current piece-wise linear waveform.
            </summary>
            <returns>
            A string that represents the current piece-wise linear waveform.
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.Pwl.Clone">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Pwl.Instance">
            <summary>
            An instance of the <see cref="T:SpiceSharp.Components.IWaveform"/> interface for a <see cref="T:SpiceSharp.Components.Pwl"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Components.IWaveform"/>
        </member>
        <member name="T:SpiceSharp.Components.Pwl.Instance.Line">
            <summary>
            A description of a line segment.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Pwl.Instance.Line.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Pwl.Instance.Line"/> class.
            </summary>
            <param name="x1">The x-coordinate of the first point.</param>
            <param name="y1">The y-coordinate of the first point.</param>
            <param name="x2">The x-coordinate of the second point.</param>
            <param name="y2">The y-coordinate of the second point.</param>
        </member>
        <member name="M:SpiceSharp.Components.Pwl.Instance.Line.At(System.Double)">
            <summary>
            Interpolates the line at the specified x-coordinate.
            </summary>
            <param name="x">The x-coordinate.</param>
            <returns>The value at the specified coordinate.</returns>
        </member>
        <member name="P:SpiceSharp.Components.Pwl.Instance.Value">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Pwl.Instance.#ctor(System.Collections.Generic.IEnumerable{SpiceSharp.Components.Point},SpiceSharp.Simulations.IIntegrationMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Pwl.Instance"/> class.
            </summary>
            <param name="points">The points.</param>
            <param name="method">The integration method.</param>
            <exception cref="T:System.ArgumentException">Thrown if no points are specified, or if the time values are not monotonically increasing.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Pwl.Instance.Probe">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Pwl.Instance.Accept">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Pwl.SpiceSharp#ParameterSets#IImportParameterSet{System#Collections#Generic#IEnumerable{SpiceSharp#Components#Point}}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Pwl.SpiceSharp#ParameterSets#IExportPropertySet{System#Collections#Generic#IEnumerable{SpiceSharp#Components#Point}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Pwl.SpiceSharp#ParameterSets#IImportParameterSet{System#Double[]}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.SFFM">
            <summary>
            This class implements a single-frequency FM waveform.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SFFM.Offset">
            <summary>
            Gets or sets the offset value.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SFFM.Amplitude">
            <summary>
            Gets or sets the amplitude value.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.SFFM._carrierFrequency">
            <summary>
            Gets or sets the carrier frequency.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SFFM.ModulationIndex">
            <summary>
            Gets or sets the modulation index.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.SFFM._signalFrequency">
            <summary>
            Gets or sets the signal frequency.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SFFM.CarrierPhase">
            <summary>
            Gets or sets the carrier phase.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SFFM.SignalPhase">
            <summary>
            Gets or sets the signal phase.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.SFFM.SetSffm(System.Double[])">
            <summary>
            Sets all SFFM parameters.
            </summary>
            <param name="sffm">The SFFM parameters.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="sffm"/> does not have 1 - 5 parameters.</exception>
        </member>
        <member name="M:SpiceSharp.Components.SFFM.Create(SpiceSharp.Entities.IBindingContext)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.SFFM.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.SFFM"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.SFFM.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.SFFM"/> class.
            </summary>
            <param name="offset">The offset value.</param>
            <param name="amplitude">The amplitude value.</param>
            <param name="carrierFrequency">The carrier frequency.</param>
            <param name="modulationIndex">The modulation index.</param>
            <param name="signalFrequency">The signal frequency.</param>
            <param name="carrierPhase">The carrier phase.</param>
            <param name="signalPhase">The signal phase.</param>
        </member>
        <member name="M:SpiceSharp.Components.SFFM.ToString">
            <summary>
            Returns a string that represents the current single-frequency FM waveform.
            </summary>
            <returns>
            A string that represents the current SFFM.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.SFFM.Instance">
            <summary>
            The instance for a SFFM waveform.
            </summary>
            <seealso cref="T:SpiceSharp.Components.IWaveform" />
        </member>
        <member name="P:SpiceSharp.Components.SFFM.Instance.Value">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.SFFM.Instance.#ctor(SpiceSharp.Simulations.IIntegrationMethod,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.SFFM.Instance"/> class.
            </summary>
            <param name="method">The integration method.</param>
            <param name="offset">The offset.</param>
            <param name="amplitude">The amplitude.</param>
            <param name="carrierFrequency">The carrier frequency.</param>
            <param name="modulationIndex">The modulation index.</param>
            <param name="signalFrequency">The signal frequency.</param>
            <param name="carrierPhase">The carrier phase.</param>
            <param name="signalPhase">The signal phase.</param>
        </member>
        <member name="M:SpiceSharp.Components.SFFM.Instance.At(System.Double)">
            <summary>
            Calculate the pulse value at the designated timepoint.
            </summary>
            <param name="time">The time value.</param>
        </member>
        <member name="M:SpiceSharp.Components.SFFM.Instance.Probe">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.SFFM.Instance.Accept">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.SFFM.CarrierFrequency">
            <summary>
            Gets or sets the carrier frequency.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SFFM.SignalFrequency">
            <summary>
            Gets or sets the signal frequency.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.SFFM.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.SFFM.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.SFFM.SpiceSharp#ParameterSets#IImportParameterSet{System#Double[]}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.SFFM.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#GivenParameter{System#Double}}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.SFFM.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#GivenParameter{System#Double}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Components.Sine">
            <summary>
            This class describes a sine wave.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet"/>
            <seealso cref="T:SpiceSharp.Components.IWaveformDescription" />
        </member>
        <member name="P:SpiceSharp.Components.Sine.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
            <value>
            The offset of the sine wave.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Sine.Amplitude">
            <summary>
            Gets or sets the amplitude of the sine wave.
            </summary>
            <value>
            The amplitude of the sine wave.
            </value>
        </member>
        <member name="F:SpiceSharp.Components.Sine._frequency">
            <summary>
            Gets or sets the frequency of the sine wave in Hertz (Hz).
            </summary>
            <value>
            The frequency of the sine wave.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Sine.Delay">
            <summary>
            Gets or sets the delay of the sine wave in seconds.
            </summary>
            <value>
            The delay of the sine wave.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Sine.Theta">
            <summary>
            Gets or sets the damping factor theta of the sine wave.
            </summary>
            <value>
            The damping factor theta.
            </value>
        </member>
        <member name="P:SpiceSharp.Components.Sine.Phase">
            <summary>
            Gets or sets the phase of the sine wave.
            </summary>
            <value>
            The phase.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Sine.SetSine(System.Double[])">
            <summary>
            Sets all the sine parameters.
            </summary>
            <param name="sine">The sine parameters.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="sine"/> does not have 1 to 6 arguments.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Sine.Create(SpiceSharp.Entities.IBindingContext)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Sine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Sine"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Sine.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Sine"/> class.
            </summary>
            <param name="offset">The offset.</param>
            <param name="amplitude">The amplitude.</param>
            <param name="frequency">The frequency.</param>
            <param name="delay">The delay.</param>
            <param name="theta">The theta.</param>
            <param name="phase">The phase.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="frequency"/> is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Sine.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Sine"/> class.
            </summary>
            <param name="offset">The offset.</param>
            <param name="amplitude">The amplitude.</param>
            <param name="frequency">The frequency.</param>
            <param name="delay">The delay.</param>
            <param name="theta">The theta.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="frequency"/> is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Sine.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Sine"/> class.
            </summary>
            <param name="offset">The offset.</param>
            <param name="amplitude">The amplitude.</param>
            <param name="frequency">The frequency.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="frequency"/> is negative.</exception>
        </member>
        <member name="M:SpiceSharp.Components.Sine.ToString">
            <summary>
            Returns a string that represents the current sine waveform.
            </summary>
            <returns>
            A string that represents the current sine waveform.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.Sine.Instance">
            <summary>
            An instance of a <see cref="T:SpiceSharp.Components.Sine"/> waveform.
            </summary>
            <seealso cref="T:SpiceSharp.Components.IWaveform" />
        </member>
        <member name="P:SpiceSharp.Components.Sine.Instance.Value">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Sine.Instance.#ctor(SpiceSharp.Simulations.IIntegrationMethod,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Sine.Instance"/> class.
            </summary>
            <param name="method">The integration method.</param>
            <param name="vo">The offset.</param>
            <param name="va">The amplitude.</param>
            <param name="frequency">The frequency.</param>
            <param name="td">The delay.</param>
            <param name="theta">The theta.</param>
            <param name="phase">The phase.</param>
        </member>
        <member name="M:SpiceSharp.Components.Sine.Instance.Probe">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Sine.Instance.Accept">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Components.Sine.Frequency">
            <summary>
            Gets or sets the frequency of the sine wave in Hertz (Hz).
            </summary>
            <value>
            The frequency of the sine wave.
            </value>
        </member>
        <member name="M:SpiceSharp.Components.Sine.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Sine.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Sine.SpiceSharp#ParameterSets#IImportParameterSet{System#Double[]}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Sine.SpiceSharp#ParameterSets#IImportParameterSet{SpiceSharp#GivenParameter{System#Double}}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Components.Sine.SpiceSharp#ParameterSets#IExportPropertySet{SpiceSharp#GivenParameter{System#Double}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.General.AmbiguousTypeException">
            <summary>
            Exception for ambiguous types.
            </summary>
            <seealso cref="T:SpiceSharp.SpiceSharpException" />
        </member>
        <member name="P:SpiceSharp.General.AmbiguousTypeException.AmbiguousType">
            <summary>
            Gets the type of the ambiguous.
            </summary>
            <value>
            The type of the ambiguous.
            </value>
        </member>
        <member name="M:SpiceSharp.General.AmbiguousTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.General.AmbiguousTypeException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:SpiceSharp.General.AmbiguousTypeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:SpiceSharp.General.AmbiguousTypeException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.General.AmbiguousTypeException"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:SpiceSharp.General.AmbiguousTypeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.General.AmbiguousTypeException"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.General.AmbiguousTypeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.General.AmbiguousTypeException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SpiceSharp.General.AmbiguousTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.General.AmbiguousTypeException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:SpiceSharp.General.InheritanceCache">
            <summary>
            A static class that caches inherited objects of a specified type.
            </summary>
        </member>
        <member name="M:SpiceSharp.General.InheritanceCache.Get(System.Type)">
            <summary>
            Gets the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>An enumerable for the interfaces of the type.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="type"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.General.InheritedTypeDictionary`1">
            <summary>
            An <see cref="T:SpiceSharp.General.ITypeDictionary`1"/> that tracks both inheritance and implemented interfaces.
            </summary>
            <typeparam name="V">The base value type.</typeparam>
            <seealso cref="T:SpiceSharp.General.ITypeDictionary`1" />
        </member>
        <member name="P:SpiceSharp.General.InheritedTypeDictionary`1.Item(System.Type)">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.General.InheritedTypeDictionary`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.General.InheritedTypeDictionary`1.Keys">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.General.InheritedTypeDictionary`1.Values">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InheritedTypeDictionary`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.General.InheritedTypeDictionary`1"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.General.InheritedTypeDictionary`1.Add(System.Type,`0)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InheritedTypeDictionary`1.Remove(System.Type,`0)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InheritedTypeDictionary`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InheritedTypeDictionary`1.ContainsKey(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InheritedTypeDictionary`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InheritedTypeDictionary`1.GetAllValues(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InheritedTypeDictionary`1.GetValueCount(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InheritedTypeDictionary`1.TryGetValue(System.Type,`0@)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.General.InheritedTypeSet`1">
            <summary>
            An <see cref="T:SpiceSharp.General.InheritedTypeDictionary`1"/> that can add values by their own types.
            </summary>
            <typeparam name="V">The base value type.</typeparam>
        </member>
        <member name="E:SpiceSharp.General.InheritedTypeSet`1.TypeNotFound">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InheritedTypeSet`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.General.InheritedTypeSet`1"/> class.
            </summary>
        </member>
        <member name="P:SpiceSharp.General.InheritedTypeSet`1.Count">
            <summary>
            Gets the number of elements contained in the set.
            </summary>
        </member>
        <member name="P:SpiceSharp.General.InheritedTypeSet`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the set is read-only.
            </summary>
        </member>
        <member name="M:SpiceSharp.General.InheritedTypeSet`1.Add(`0)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SpiceSharp.General.InheritedTypeSet`1.Clear">
            <summary>
            Removes all items from the set.
            </summary>
        </member>
        <member name="M:SpiceSharp.General.InheritedTypeSet`1.Contains(`0)">
            <summary>
            Determines whether this instance contains the object.
            </summary>
            <param name="item">The object to locate in the set.</param>
            <returns>
            true if <paramref name="item" /> is found in the set; otherwise, false.
            </returns>
        </member>
        <member name="M:SpiceSharp.General.InheritedTypeSet`1.ContainsType``1">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InheritedTypeSet`1.ContainsType(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InheritedTypeSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:SpiceSharp.General.InheritedTypeSet`1.GetValue``1">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InheritedTypeSet`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the set.
            </summary>
            <param name="item">The object to remove from the set.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the set; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original set.
            </returns>
        </member>
        <member name="M:SpiceSharp.General.InheritedTypeSet`1.TryGetValue``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InheritedTypeSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.General.InheritedTypeSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:SpiceSharp.General.InterfaceCache">
            <summary>
            A static class that caches interfaces of a specified type.
            </summary>
        </member>
        <member name="M:SpiceSharp.General.InterfaceCache.Get(System.Type)">
            <summary>
            Gets the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>An enumerable for the interfaces of the type.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="type"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.General.InterfaceTypeDictionary`1">
            <summary>
            An implementation of the <see cref="T:SpiceSharp.General.ITypeDictionary`1"/> interface that
            allows retrieving information using interface types.
            </summary>
            <typeparam name="V">The value type.</typeparam>
            <seealso cref="T:SpiceSharp.General.ITypeDictionary`1" />
        </member>
        <member name="P:SpiceSharp.General.InterfaceTypeDictionary`1.Keys">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.General.InterfaceTypeDictionary`1.Values">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.General.InterfaceTypeDictionary`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.General.InterfaceTypeDictionary`1.Item(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InterfaceTypeDictionary`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.General.InterfaceTypeDictionary`1"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.General.InterfaceTypeDictionary`1.Add(System.Type,`0)">
            <summary>
            Adds a value to the dictionary.
            </summary>
            <param name="key">The key type.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.General.InterfaceTypeDictionary`1.Remove(System.Type,`0)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InterfaceTypeDictionary`1.GetAllValues(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InterfaceTypeDictionary`1.GetValueCount(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InterfaceTypeDictionary`1.TryGetValue(System.Type,`0@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InterfaceTypeDictionary`1.ContainsKey(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InterfaceTypeDictionary`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InterfaceTypeDictionary`1.Clear">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.General.InterfaceTypeSet`1">
            <summary>
            An <see cref="T:SpiceSharp.General.ITypeSet`1"/> that tracks interfaces.
            </summary>
            <typeparam name="V">The base value type.</typeparam>
        </member>
        <member name="E:SpiceSharp.General.InterfaceTypeSet`1.TypeNotFound">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InterfaceTypeSet`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.General.InterfaceTypeSet`1"/> class.
            </summary>
        </member>
        <member name="P:SpiceSharp.General.InterfaceTypeSet`1.Count">
            <summary>
            Gets the number of elements contained in the set.
            </summary>
        </member>
        <member name="P:SpiceSharp.General.InterfaceTypeSet`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the set is read-only.
            </summary>
        </member>
        <member name="M:SpiceSharp.General.InterfaceTypeSet`1.Add(`0)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SpiceSharp.General.InterfaceTypeSet`1.Clear">
            <summary>
            Removes all items from the set.
            </summary>
        </member>
        <member name="M:SpiceSharp.General.InterfaceTypeSet`1.Contains(`0)">
            <summary>
            Determines whether this instance contains the object.
            </summary>
            <param name="item">The object to locate in the set.</param>
            <returns>
            <c>true</c> if <paramref name="item" /> is found in the set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.General.InterfaceTypeSet`1.ContainsType``1">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InterfaceTypeSet`1.ContainsType(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InterfaceTypeSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:SpiceSharp.General.InterfaceTypeSet`1.GetValue``1">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InterfaceTypeSet`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the set.
            </summary>
            <param name="item">The object to remove from the set.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the set; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original set.
            </returns>
        </member>
        <member name="M:SpiceSharp.General.InterfaceTypeSet`1.TryGetValue``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.General.InterfaceTypeSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.General.InterfaceTypeSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:SpiceSharp.General.ITypeDictionary`1">
            <summary>
            A dictionary that can store instances, and indexes them by a type. This dictionary
            distinguishes itself by supporting for example inheritance on the type.
            </summary>
            <typeparam name="V">The base type for values in the type dictionary.</typeparam>
        </member>
        <member name="P:SpiceSharp.General.ITypeDictionary`1.Keys">
            <summary>
            Gets all the keys in the dictionary.
            </summary>
            <value>
            The keys in the dictionary.
            </value>
        </member>
        <member name="P:SpiceSharp.General.ITypeDictionary`1.Values">
            <summary>
            Gets all the values in the dictionary.
            </summary>
            <value>
            The values in the dictionary.
            </value>
        </member>
        <member name="P:SpiceSharp.General.ITypeDictionary`1.Count">
            <summary>
            Gets the number of items in the dictionary.
            </summary>
            <value>
            The number of items in the dictionary.
            </value>
        </member>
        <member name="P:SpiceSharp.General.ITypeDictionary`1.Item(System.Type)">
            <summary>
            Gets a value from the dictionary by its type.
            </summary>
            <param name="key">The type.</param>
            <returns>The value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:SpiceSharp.General.AmbiguousTypeException">Thrown if <paramref name="key"/> does not point to a single instance.</exception>
        </member>
        <member name="M:SpiceSharp.General.ITypeDictionary`1.Add(System.Type,`0)">
            <summary>
            Adds a value to the dictionary.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.General.ITypeDictionary`1.Clear">
            <summary>
            Clears all values from the dictionary.
            </summary>
        </member>
        <member name="M:SpiceSharp.General.ITypeDictionary`1.TryGetValue(System.Type,`0@)">
            <summary>
            Tries to get a value from the dictionary indexed by the specified type.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the value was found; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.General.ITypeDictionary`1.Contains(`0)">
            <summary>
            Determines whether the dictionary contains the value.
            </summary>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the dictionary contains the value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.General.ITypeDictionary`1.Remove(System.Type,`0)">
            <summary>
            Removes a value from the dictionary, but only if the value was added through
            the same key originally to avoid inconsistencies.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the value was remove; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.General.ITypeDictionary`1.ContainsKey(System.Type)">
            <summary>
            Determines whether the dictionary contains a value with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
                <c>true</c> if the dictionary contains a value with the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.General.ITypeDictionary`1.GetAllValues(System.Type)">
            <summary>
            Gets all values from the dictionary that the specified key can point to.
            </summary>
            <returns>The values.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.General.ITypeDictionary`1.GetValueCount(System.Type)">
            <summary>
            Gets the the number of values that this type points to (direct or indirect).
            </summary>
            <param name="key">The key.</param>
            <returns>The number of values.</returns>
        </member>
        <member name="T:SpiceSharp.General.ITypeSet`1">
            <summary>
            A set of instances that can also be found by their type.
            </summary>
            <typeparam name="V">The base value type.</typeparam>
        </member>
        <member name="E:SpiceSharp.General.ITypeSet`1.TypeNotFound">
            <summary>
            Occurs if a type could not be found.
            </summary>
        </member>
        <member name="M:SpiceSharp.General.ITypeSet`1.TryGetValue``1(``0@)">
            <summary>
            Tries getting a value from the set with the specified type.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the value was found; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:SpiceSharp.General.AmbiguousTypeException">Thrown if the type could not be resolved to a single instance.</exception>
        </member>
        <member name="M:SpiceSharp.General.ITypeSet`1.GetValue``1">
            <summary>
            Gets a value from the set with the specified type.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <returns>The value.</returns>
            <exception cref="T:SpiceSharp.General.AmbiguousTypeException">Thrown if the type could not be resolved to a single instance.</exception>
        </member>
        <member name="M:SpiceSharp.General.ITypeSet`1.ContainsType``1">
            <summary>
            Determines whether this instance contains a value of the specified type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <returns>
              <c>true</c> if this instance contains type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.General.ITypeSet`1.ContainsType(System.Type)">
            <summary>
            Determines whether this instance contains a value of the specified type.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the specified key contains type; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.General.TypeNotFoundEventArgs`1">
            <summary>
            Event arguments that can be used when a type could not be resolved or found.
            </summary>
            <typeparam name="T">The base type.</typeparam>
        </member>
        <member name="P:SpiceSharp.General.TypeNotFoundEventArgs`1.Type">
            <summary>
            Gets the type that could not be found.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:SpiceSharp.General.TypeNotFoundEventArgs`1.Value">
            <summary>
            Gets or sets the value that can fill in the blank.
            </summary>
        </member>
        <member name="M:SpiceSharp.General.TypeNotFoundEventArgs`1.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.General.TypeNotFoundEventArgs`1"/> class.
            </summary>
            <param name="type">The type.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="type"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.General.TypeValues`1">
            <summary>
            A class that stores information about the inheritance tree stored in a type dictionary.
            </summary>
        </member>
        <member name="P:SpiceSharp.General.TypeValues`1.Value">
            <summary>
            Gets the associated value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:SpiceSharp.General.TypeValues`1.IsAmbiguous">
            <summary>
            Gets a value indicating whether this instance is ambiguous.
            </summary>
            <value>
              <c>true</c> if this instance is ambiguous; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SpiceSharp.General.TypeValues`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SpiceSharp.General.TypeValues`1.IsDirect">
            <summary>
            Gets a value indicating whether the value is a direct type reference.
            </summary>
            <value>
              <c>true</c> if the value is a direct type reference; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SpiceSharp.General.TypeValues`1.Values">
            <summary>
            Enumerates all values.
            </summary>
            <value>
            The values.
            </value>
        </member>
        <member name="P:SpiceSharp.General.TypeValues`1.Count">
            <summary>
            Gets the number of values.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="M:SpiceSharp.General.TypeValues`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.General.TypeValues`1" /> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.General.TypeValues`1.Add(`0,System.Boolean)">
            <summary>
            Adds the specified value to the type values.
            </summary>
            <param name="value">The value.</param>
            <param name="isDirect">if set to <c>true</c>, the value type is a direct reference (ie. not a child).</param>
        </member>
        <member name="M:SpiceSharp.General.TypeValues`1.Remove(`0)">
            <summary>
            Removes the specified value from the type values.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:SpiceSharp.BehaviorsNotFoundException">
            <summary>
            An exception that is thrown when a problem occurs find behaviors.
            </summary>
            <seealso cref="T:SpiceSharp.SpiceSharpException" />
        </member>
        <member name="P:SpiceSharp.BehaviorsNotFoundException.Name">
            <summary>
            Gets the name of the behaviors.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:SpiceSharp.BehaviorsNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.TypeNotFoundException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:SpiceSharp.BehaviorsNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The serialization info</param>
            <param name="context">The streaming context</param>
        </member>
        <member name="M:SpiceSharp.BehaviorsNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.BehaviorsNotFoundException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SpiceSharp.BehaviorsNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.BehaviorsNotFoundException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:SpiceSharp.BehaviorsNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.BehaviorsNotFoundException"/> class.
            </summary>
            <param name="name">The name of the behavior container.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:SpiceSharp.BehaviorsNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.BehaviorsNotFoundException"/> class.
            </summary>
            <param name="name">The name of the behavior container.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:SpiceSharp.BehaviorsNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.BehaviorsNotFoundException"/> class.
            </summary>
        </member>
        <member name="T:SpiceSharp.NodeMismatchException">
            <summary>
            Exception thrown when nodes aren't matched.
            </summary>
            <seealso cref="T:SpiceSharp.SpiceSharpException" />
        </member>
        <member name="P:SpiceSharp.NodeMismatchException.Expected">
            <summary>
            Gets the expected number of nodes.
            </summary>
            <value>
            The expected number of nodes.
            </value>
        </member>
        <member name="P:SpiceSharp.NodeMismatchException.Actual">
            <summary>
            Gets the actual number of nodes.
            </summary>
            <value>
            The actual number of nodes.
            </value>
        </member>
        <member name="M:SpiceSharp.NodeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.SpiceSharpException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:SpiceSharp.NodeMismatchException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:SpiceSharp.NodeMismatchException.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.NodeMismatchException"/> class.
            </summary>
            <param name="expected">The expected number of nodes.</param>
            <param name="actual">The actual number of nodes.</param>
        </member>
        <member name="M:SpiceSharp.NodeMismatchException.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.NodeMismatchException"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="expected">The expected.</param>
            <param name="actual">The actual.</param>
        </member>
        <member name="M:SpiceSharp.NodeMismatchException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.NodeMismatchException"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.NodeMismatchException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.NodeMismatchException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SpiceSharp.NodeMismatchException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.NodeMismatchException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:SpiceSharp.TimestepTooSmallException">
            <summary>
            Exception thrown when the timestep is too small.
            </summary>
            <seealso cref="T:SpiceSharp.SpiceSharpException" />
        </member>
        <member name="P:SpiceSharp.TimestepTooSmallException.Timestep">
            <summary>
            Gets the timestep that was too small.
            </summary>
            <value>
            The timestep.
            </value>
        </member>
        <member name="P:SpiceSharp.TimestepTooSmallException.Time">
            <summary>
            Gets the time where the timestep became too small.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="M:SpiceSharp.TimestepTooSmallException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.TimestepTooSmallException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:SpiceSharp.TimestepTooSmallException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The serialization info</param>
            <param name="context">The streaming context</param>
        </member>
        <member name="M:SpiceSharp.TimestepTooSmallException.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.TimestepTooSmallException"/> class.
            </summary>
            <param name="timestep">The timestep.</param>
            <param name="time">The time point.</param>
        </member>
        <member name="M:SpiceSharp.TimestepTooSmallException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.TimestepTooSmallException"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.TimestepTooSmallException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.TimestepTooSmallException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SpiceSharp.TimestepTooSmallException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.TimestepTooSmallException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:SpiceSharp.WarningEventArgs">
            <summary>
            Event arguments that are used when a warning is generated.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:SpiceSharp.WarningEventArgs.Message">
            <summary>
            Gets the warning message.
            </summary>
        </member>
        <member name="M:SpiceSharp.WarningEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.WarningEventArgs"/> class.
            </summary>
            <param name="message">The warning message.</param>
        </member>
        <member name="T:SpiceSharp.NoEquivalentSubcircuitException">
            <summary>
            An exception thrown when a subcircuit cannot be represented.
            </summary>
            <seealso cref="T:SpiceSharp.SpiceSharpException" /> 
        </member>
        <member name="M:SpiceSharp.NoEquivalentSubcircuitException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.SpiceSharpException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context info.</param>
        </member>
        <member name="M:SpiceSharp.NoEquivalentSubcircuitException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.NoEquivalentSubcircuitException"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.NoEquivalentSubcircuitException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.NoEquivalentSubcircuitException"/> class.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:SpiceSharp.NoEquivalentSubcircuitException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.NoEquivalentSubcircuitException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SpiceSharp.NoEquivalentSubcircuitException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.NoEquivalentSubcircuitException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:SpiceSharp.Diagnostics.NoModelException">
            <summary>
            An exception thrown if a component does not have a model but expects it.
            </summary>
            <seealso cref="T:SpiceSharp.SpiceSharpException" />
        </member>
        <member name="P:SpiceSharp.Diagnostics.NoModelException.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:SpiceSharp.Diagnostics.NoModelException.ModelType">
            <summary>
            Gets the type of the model.
            </summary>
            <value>
            The type of the model.
            </value>
        </member>
        <member name="M:SpiceSharp.Diagnostics.NoModelException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Diagnostics.NoModelException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:SpiceSharp.Diagnostics.NoModelException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:SpiceSharp.Diagnostics.NoModelException.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Diagnostics.NoModelException"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="modelType">The expected model type.</param>
        </member>
        <member name="M:SpiceSharp.Diagnostics.NoModelException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Diagnostics.NoModelException"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Diagnostics.NoModelException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Diagnostics.NoModelException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SpiceSharp.Diagnostics.NoModelException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Diagnostics.NoModelException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:SpiceSharp.Diagnostics.ParameterNotFoundException">
            <summary>
            Exception thrown when a parameter cannot be found.
            </summary>
            <seealso cref="T:SpiceSharp.SpiceSharpException" />
        </member>
        <member name="P:SpiceSharp.Diagnostics.ParameterNotFoundException.ParameterizedObject">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:SpiceSharp.Diagnostics.ParameterNotFoundException.ParameterType">
            <summary>
            Gets the type of the parameter.
            </summary>
            <value>
            The type of the parameter.
            </value>
        </member>
        <member name="P:SpiceSharp.Diagnostics.ParameterNotFoundException.ParameterName">
            <summary>
            Gets the name of the parameter.
            </summary>
            <value>
            The name of the parameter.
            </value>
        </member>
        <member name="M:SpiceSharp.Diagnostics.ParameterNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Diagnostics.ParameterNotFoundException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:SpiceSharp.Diagnostics.ParameterNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The serialization info</param>
            <param name="context">The streaming context</param>
        </member>
        <member name="M:SpiceSharp.Diagnostics.ParameterNotFoundException.#ctor(System.Object,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Diagnostics.ParameterNotFoundException"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:SpiceSharp.Diagnostics.ParameterNotFoundException.#ctor(System.Object,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Diagnostics.ParameterNotFoundException"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:SpiceSharp.Diagnostics.ParameterNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Diagnostics.ParameterNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Diagnostics.ParameterNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Diagnostics.ParameterNotFoundException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SpiceSharp.Diagnostics.ParameterNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Diagnostics.ParameterNotFoundException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:SpiceSharp.Diagnostics.VariableNotFoundException">
            <summary>
            An exception that is thrown when a problem occurs trying to find a variable.
            </summary>
        </member>
        <member name="P:SpiceSharp.Diagnostics.VariableNotFoundException.Path">
            <summary>
            Gets the path that could not be found.
            </summary>
        </member>
        <member name="M:SpiceSharp.Diagnostics.VariableNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Diagnostics.VariableNotFoundException"/>.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:SpiceSharp.Diagnostics.VariableNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The serialization info</param>
            <param name="context">The streaming context</param>
        </member>
        <member name="M:SpiceSharp.Diagnostics.VariableNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Diagnostics.VariableNotFoundException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SpiceSharp.Diagnostics.VariableNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Diagnostics.VariableNotFoundException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:SpiceSharp.Diagnostics.VariableNotFoundException.#ctor(SpiceSharp.Simulations.Base.Reference,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Diagnostics.VariableNotFoundException"/> class.
            </summary>
            <param name="path">The hierarchical reference.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:SpiceSharp.Diagnostics.VariableNotFoundException.#ctor(SpiceSharp.Simulations.Base.Reference,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Diagnostics.VariableNotFoundException"/> class.
            </summary>
            <param name="path">The hierarchical reference.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:SpiceSharp.Diagnostics.VariableNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Diagnostics.VariableNotFoundException"/> class.
            </summary>
        </member>
        <member name="T:SpiceSharp.SpiceSharpException">
            <summary>
            An exception for SpiceSharp-related issues.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:SpiceSharp.SpiceSharpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.SpiceSharpException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context info.</param>
        </member>
        <member name="M:SpiceSharp.SpiceSharpException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.SpiceSharpException"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.SpiceSharpException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.SpiceSharpException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SpiceSharp.SpiceSharpException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.SpiceSharpException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:SpiceSharp.SpiceSharpWarning">
            <summary>
            A static class that tracks warnings.
            </summary>
        </member>
        <member name="E:SpiceSharp.SpiceSharpWarning.WarningGenerated">
            <summary>
            Occurs when a warning was generated.
            </summary>
        </member>
        <member name="M:SpiceSharp.SpiceSharpWarning.Warning(System.Object,System.String)">
            <summary>
            Adds a warning.
            </summary>
            <param name="sender">The sender.</param>
            <param name="message">The warning message.</param>
        </member>
        <member name="T:SpiceSharp.StateNotFoundException">
            <summary>
            An exception that is thrown when a problem occurs find State.
            </summary>
            <seealso cref="T:SpiceSharp.SpiceSharpException" />
        </member>
        <member name="P:SpiceSharp.StateNotFoundException.State">
            <summary>
            Gets the name of the State.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:SpiceSharp.StateNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.TypeNotFoundException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:SpiceSharp.StateNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The serialization info</param>
            <param name="context">The streaming context</param>
        </member>
        <member name="M:SpiceSharp.StateNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.StateNotFoundException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SpiceSharp.StateNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.StateNotFoundException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:SpiceSharp.StateNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.StateNotFoundException"/> class.
            </summary>
            <param name="state">The name of the state type.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:SpiceSharp.StateNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.StateNotFoundException"/> class.
            </summary>
            <param name="state">The name of the state type.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:SpiceSharp.StateNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.StateNotFoundException"/> class.
            </summary>
        </member>
        <member name="T:SpiceSharp.TypeNotFoundException">
            <summary>
            An exception that is thrown when a problem occurs with the generic type of a method.
            </summary>
            <seealso cref="T:SpiceSharp.SpiceSharpException" />
        </member>
        <member name="P:SpiceSharp.TypeNotFoundException.Type">
            <summary>
            Gets the type of the generic.
            </summary>
            <value>
            The type of the generic.
            </value>
        </member>
        <member name="M:SpiceSharp.TypeNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.TypeNotFoundException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:SpiceSharp.TypeNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The serialization info</param>
            <param name="context">The streaming context</param>
        </member>
        <member name="M:SpiceSharp.TypeNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.TypeNotFoundException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SpiceSharp.TypeNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.TypeNotFoundException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:SpiceSharp.TypeNotFoundException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.TypeNotFoundException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:SpiceSharp.TypeNotFoundException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.TypeNotFoundException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:SpiceSharp.TypeNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.TypeNotFoundException"/> class.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.ValidationFailedException">
            <summary>
            An exception thrown when a simulation fails its validation.
            </summary>
            <seealso cref="T:SpiceSharp.SpiceSharpException" />
        </member>
        <member name="P:SpiceSharp.Simulations.ValidationFailedException.Rules">
            <summary>
            Gets the rules.
            </summary>
            <value>
            The rules.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.ValidationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.ValidationFailedException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.ValidationFailedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The serialization info</param>
            <param name="context">The streaming context</param>
        </member>
        <member name="M:SpiceSharp.Simulations.ValidationFailedException.#ctor(SpiceSharp.Simulations.ISimulation,SpiceSharp.Validation.IRules)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.ValidationFailedException"/> class.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="rules">The rule provider.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.ValidationFailedException.#ctor(SpiceSharp.Simulations.ISimulation,SpiceSharp.Validation.IRules,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.ValidationFailedException"/> class.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="rules">The rule provider.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.ValidationFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.ValidationFailedException"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.ValidationFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.ValidationFailedException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.ValidationFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.ValidationFailedException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.BiasingParameters">
            <summary>
            A configuration for a <see cref="T:SpiceSharp.Simulations.BiasingSimulation" />.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingParameters.NoOperatingPointIterate">
            <summary>
            Gets or sets a value indicating whether the simulation should go straight to gmin stepping.
            </summary>
            <value>
              <c>true</c> if gmin steping should be skipped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:SpiceSharp.Simulations.BiasingParameters._gmin">
            <summary>
            Gets or sets the minimum conductance.
            </summary>
            <value>
            The gmin value.
            </value>
            <remarks>
            Convergence is mainly an issue with semiconductor junctions, which often lead to exponential curves. Exponential dependencies
            are very harsh on convergence. A lower Gmin will cause iterations to converge faster, but to a (slightly) wrong value. By
            steadily relaxing this value back to 0 it is possible to progressively reach a solution without having non-convergence.
            </remarks>
        </member>
        <member name="F:SpiceSharp.Simulations.BiasingParameters._gminSteps">
            <summary>
            Gets or sets the number of steps to use when using gmin stepping to improve convergence.
            </summary>
            <value>
            The number of steps used for gmin stepping.
            </value>
        </member>
        <member name="F:SpiceSharp.Simulations.BiasingParameters._sourceSteps">
            <summary>
            Gets or sets the number of steps when using source stepping to improve convergence.
            </summary>
            <value>
            The number of steps for source-stepping.
            </value>
            <remarks>
            In source stepping, all sources are considered to be at 0 which has typically only one single solution (all nodes and
            currents are 0V and 0A). By increasing the source factor in small steps, it is possible to progressively reach a solution
            without having non-convergence.
            </remarks>
        </member>
        <member name="F:SpiceSharp.Simulations.BiasingParameters._relativeTolerance">
            <summary>
            Gets or sets the allowed relative tolerance.
            </summary>
            <value>
            The relative tolerance on solved quantities.
            </value>
        </member>
        <member name="F:SpiceSharp.Simulations.BiasingParameters._voltageTolerance">
            <summary>
            Gets or sets the absolute tolerance on voltages.
            </summary>
            <value>
            The allowed voltage tolerance.
            </value>
        </member>
        <member name="F:SpiceSharp.Simulations.BiasingParameters._absoluteTolerance">
            <summary>
            Gets or sets the absolute tolerance.
            </summary>
            <value>
            The absolute tolerance on solved quantities.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingParameters.DcMaxIterations">
            <summary>
            Gets or sets the maximum number of iterations for operating point simulation.
            </summary>
            <value>
            The maximum number of iterations for DC solutions.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingParameters.Nodesets">
            <summary>
            Gets the nodesets.
            </summary>
            <value>
            The nodesets.
            </value>
            <remarks>
            Nodesets allow specifying a value for a node that the simulator will use in its first
            iteration (or it will at least try to approach it). If you know an approximate solution
            to any voltage node, you can improve convergence by specifying it on this dictionary.
            </remarks>
        </member>
        <member name="F:SpiceSharp.Simulations.BiasingParameters._relativePivotThreshold">
            <summary>
            Gets or sets the relative threshold for choosing a pivot.
            </summary>
            <value>
            The relative pivot threshold.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is not greater than 0.
            </exception>
        </member>
        <member name="F:SpiceSharp.Simulations.BiasingParameters._absolutePivotThreshold">
            <summary>
            Gets or sets the absolute threshold for choosing a pivot.
            </summary>
            <value>
            The absolute pivot threshold.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is negative.
            </exception>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingParameters.CreateSolver">
            <summary>
            Creates solver used to solve equations.
            </summary>
            <returns>A solver that can be used to solve equations.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingParameters.Clone">
            <inheritdoc/>
        </member>
        <member name="F:SpiceSharp.Simulations.BiasingParameters._temperature">
            <summary>
            Gets or sets the (initial) temperature in Kelvin of the simulation.
            </summary>
            <value>
            The temperature.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingParameters.TemperatureCelsius">
            <summary>
            Gets or sets the (initial) temperature in degrees celsius of the simulation.
            </summary>
            <value>
            The temperature.
            </value>
        </member>
        <member name="F:SpiceSharp.Simulations.BiasingParameters._nominalTemperature">
            <summary>
            Gets or sets the nominal temperature in Kelvin.
            </summary>
            <value>
            The nominal temperature.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingParameters.NominalTemperatureCelsius">
            <summary>
            Gets or sets the nominal temperature in degrees celsius.
            </summary>
            <value>
            The nominal temperature.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingParameters.Validate">
            <summary>
            Gets or sets a value indicating whether the simulation should be validated.
            </summary>
            <value>
              <c>true</c> if the simulation should be validated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingParameters.NodeComparer">
            <summary>
            Gets or sets the comparer used for node names.
            </summary>
            <value>
            The comparer use for nodes.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingParameters.RelativeTolerance">
            <summary>
            Gets or sets the allowed relative tolerance.
            </summary>
            <value>
            The relative tolerance on solved quantities.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingParameters.GminSteps">
            <summary>
            Gets or sets the number of steps to use when using gmin stepping to improve convergence.
            </summary>
            <value>
            The number of steps used for gmin stepping.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingParameters.AbsolutePivotThreshold">
            <summary>
            Gets or sets the absolute threshold for choosing a pivot.
            </summary>
            <value>
            The absolute pivot threshold.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is negative.
            </exception>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingParameters.SourceSteps">
            <summary>
            Gets or sets the number of steps when using source stepping to improve convergence.
            </summary>
            <value>
            The number of steps for source-stepping.
            </value>
            <remarks>
            In source stepping, all sources are considered to be at 0 which has typically only one single solution (all nodes and
            currents are 0V and 0A). By increasing the source factor in small steps, it is possible to progressively reach a solution
            without having non-convergence.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingParameters.Gmin">
            <summary>
            Gets or sets the minimum conductance.
            </summary>
            <value>
            The gmin value.
            </value>
            <remarks>
            Convergence is mainly an issue with semiconductor junctions, which often lead to exponential curves. Exponential dependencies
            are very harsh on convergence. A lower Gmin will cause iterations to converge faster, but to a (slightly) wrong value. By
            steadily relaxing this value back to 0 it is possible to progressively reach a solution without having non-convergence.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingParameters.NominalTemperature">
            <summary>
            Gets or sets the nominal temperature in Kelvin.
            </summary>
            <value>
            The nominal temperature.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingParameters.VoltageTolerance">
            <summary>
            Gets or sets the absolute tolerance on voltages.
            </summary>
            <value>
            The allowed voltage tolerance.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingParameters.RelativePivotThreshold">
            <summary>
            Gets or sets the relative threshold for choosing a pivot.
            </summary>
            <value>
            The relative pivot threshold.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is not greater than 0.
            </exception>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingParameters.AbsoluteTolerance">
            <summary>
            Gets or sets the absolute tolerance.
            </summary>
            <value>
            The absolute tolerance on solved quantities.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingParameters.Temperature">
            <summary>
            Gets or sets the (initial) temperature in Kelvin of the simulation.
            </summary>
            <value>
            The temperature.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingParameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Boolean}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingParameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Boolean}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingParameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Int32}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingParameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Int32}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingParameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingParameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Simulations.BiasingSimulation">
            <summary>
            A class that can bias components.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.Simulation" />
            <seealso cref="T:SpiceSharp.Simulations.IBiasingSimulation"/>
            <seealso cref="T:SpiceSharp.Simulations.IStateful`1"/>
            <seealso cref="T:SpiceSharp.Simulations.Biasing.TemperatureSimulationState"/>
            <seealso cref="T:SpiceSharp.Simulations.IIterationSimulationState"/>
            <seealso cref="T:SpiceSharp.Behaviors.IBiasingUpdateBehavior"/>
            <seealso cref="T:SpiceSharp.Simulations.IBehavioral`1" />
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
        </member>
        <member name="F:SpiceSharp.Simulations.BiasingSimulation.BeforeTemperature">
            <summary>
            Represents the action before doing temperature-dependent calculations.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.BiasingSimulation.AfterTemperature">
            <summary>
            Represents the action after doing temperature-dependent calculations.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingSimulation.ProblemVariable">
            <summary>
            Gets the variable that causes issues.
            </summary>
            <remarks>
            This variable can be used to close in on the problem in case of non-convergence.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingSimulation.BiasingParameters">
            <summary>
            Gets the biasing parameters.
            </summary>
            <value>
            The biasing parameters.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingSimulation.Iteration">
            <summary>
            Gets the iteration state.
            </summary>
            <value>
            The iteration state.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingSimulation.SpiceSharp#Simulations#IStateful{SpiceSharp#Simulations#IIterationSimulationState}#State">
            <inheritdoc />
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingSimulation.SpiceSharp#Simulations#IStateful{SpiceSharp#Simulations#ITemperatureSimulationState}#State">
            <inheritdoc />
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingSimulation.SpiceSharp#Simulations#IStateful{SpiceSharp#Simulations#IBiasingSimulationState}#State">
            <inheritdoc />
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingSimulation.SpiceSharp#Simulations#IStateful{SpiceSharp#Simulations#Biasing#TemperatureSimulationState}#State">
            <inheritdoc />
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingSimulation.SpiceSharp#ParameterSets#IParameterized{SpiceSharp#Simulations#BiasingParameters}#Parameters">
            <inheritdoc />
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingSimulation.SpiceSharp#Simulations#ISimulation{SpiceSharp#Simulations#IVariable{System#Double}}#Solved">
            <inheritdoc />
        </member>
        <member name="E:SpiceSharp.Simulations.BiasingSimulation.BeforeLoad">
            <summary>
            Occurs before loading the matrix and right-hand side vector.
            </summary>
            <remarks>
            For better performance, you can also create an entity with a high priority that
            generates a load behavior.
            </remarks>
        </member>
        <member name="E:SpiceSharp.Simulations.BiasingSimulation.AfterLoad">
            <summary>
            Occurs after loading the matrix and right-hand side vector.
            </summary>
            <remarks>
            For better performance, you can also create an entity with a low priority that
            generates a load behavior.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingSimulation.Statistics">
            <summary>
            Gets the statistics.
            </summary>
            <value>
            The statistics.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingSimulation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.BiasingSimulation"/> class.
            </summary>
            <param name="name">The name of the simulation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingSimulation.CreateStates">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingSimulation.CreateBehaviors(SpiceSharp.Entities.IEntityCollection)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingSimulation.Validate(SpiceSharp.Entities.IEntityCollection)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingSimulation.Execute(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingSimulation.Finish">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingSimulation.Op(System.Int32)">
            <summary>
            Calculates the operating point of the circuit.
            </summary>
            <param name="maxIterations">The maximum amount of allowed iterations.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingSimulation.IterateGminStepping(System.Int32,System.Int32)">
            <summary>
            Iterates to a solution while shunting PN-junctions with a conductance.
            </summary>
            <param name="maxIterations">The maximum number of iterations per step.</param>
            <param name="steps">The number of steps.</param>
            <returns>
            <c>true</c> if the gmin stepping succeeded; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingSimulation.IterateDiagonalGminStepping(System.Int32,System.Int32)">
            <summary>
            Iterates to a solution while adding a conductive path to ground on all nodes.
            </summary>
            <param name="maxIterations">The maximum number of iterations per step.</param>
            <param name="steps">The number of steps.</param>
            <returns>
            <c>true</c> if the diagonal gmin stepping succeeded; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingSimulation.IterateSourceStepping(System.Int32,System.Int32)">
            <summary>
            Iterates to a solution slowly ramping up independent voltages and currents.
            </summary>
            <param name="maxIterations">The maximum number of iterations per step.</param>
            <param name="steps">The number of steps.</param>
            <returns>
            <c>true</c> if source stepping succeeded; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingSimulation.Iterate(System.Int32)">
            <summary>
            Iterates towards a solution.
            </summary>
            <param name="maxIterations">The maximum allowed iterations.</param>
            <returns>
              <c>true</c> if the iterations converged to a solution; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:SpiceSharp.SpiceSharpException">Thrown if any behavior cannot load the matrix and/or right hand side vector, or if the solution
            is not a number (NaN).</exception>
            <exception cref="T:SpiceSharp.Algebra.SingularException">Thrown if the equation matrix is singular.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingSimulation.StoreSolution">
            <summary>
            Stores the solution.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingSimulation.Load">
            <summary>
            Load the current simulation state solver.
            </summary>
            <exception cref="T:SpiceSharp.SpiceSharpException">Thrown if any behavior cannot load the matrix or right hand side vector.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingSimulation.LoadNodeSets(System.Object,SpiceSharp.Simulations.LoadStateEventArgs)">
            <summary>
            Applies nodesets.
            </summary>
            <param name="sender">The object sending the event.</param>
            <param name="e">The event arguments for loading the convergence aids.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingSimulation.IsConvergent">
            <summary>
            Checks that the solution converges to a solution.
            </summary>
            <returns>
              <c>true</c> if the solution converges; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:SpiceSharp.SpiceSharpException">Thrown if a solution is not a number (NaN).</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingSimulation.OnBeforeLoad(SpiceSharp.Simulations.LoadStateEventArgs)">
            <summary>
            Raises the <see cref="E:SpiceSharp.Simulations.BiasingSimulation.BeforeLoad" /> event.
            </summary>
            <param name="args">The <see cref="T:SpiceSharp.Simulations.LoadStateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingSimulation.OnAfterLoad(SpiceSharp.Simulations.LoadStateEventArgs)">
            <summary>
            Raises the <see cref="E:SpiceSharp.Simulations.BiasingSimulation.AfterLoad" /> event.
            </summary>
            <param name="args">The <see cref="T:SpiceSharp.Simulations.LoadStateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.BiasingSimulation.IterationState">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.IIterationSimulationState"/> for a <see cref="T:SpiceSharp.Simulations.BiasingSimulation"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IIterationSimulationState" />
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingSimulation.IterationState.Mode">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingSimulation.IterationState.SourceFactor">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingSimulation.IterationState.Gmin">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingSimulation.IterationState.IsConvergent">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingSimulation.SimulationState.Solution">
            <inheritdoc />
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingSimulation.SimulationState.OldSolution">
            <inheritdoc />
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingSimulation.SimulationState.Map">
            <inheritdoc />
        </member>
        <member name="P:SpiceSharp.Simulations.BiasingSimulation.SimulationState.Solver">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingSimulation.SimulationState.#ctor(SpiceSharp.Algebra.ISparsePivotingSolver{System.Double},System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.BiasingSimulation.SimulationState"/> class.
            </summary>
            <param name="solver">The solver.</param>
            <param name="comparer">The comparer.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="solver"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingSimulation.SimulationState.GetSharedVariable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingSimulation.SimulationState.CreatePrivateVariable(System.String,SpiceSharp.Simulations.Variables.IUnit)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingSimulation.SimulationState.Setup">
            <summary>
            Creates the vectors for the state.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.BiasingSimulation.SimulationState.StoreSolution">
            <summary>
            Stores the last solution.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.Biasing.BiasingSimulationStatistics">
            <summary>
            Statistics for a <see cref="T:SpiceSharp.Simulations.Biasing.BiasingSimulationStatistics" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Biasing.BiasingSimulationStatistics.Iterations">
            <summary>
            Gets the total number of iterations.
            </summary>
            <value>
            The total number of iterations.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.Biasing.BiasingSimulationStatistics.SolveTime">
            <summary>
            Gets a stopwatch that keeps the total time spent solving equations.
            </summary>
            <value>
            The time spent solving the equations.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.Biasing.BiasingSimulationStatistics.LoadTime">
            <summary>
            Gets a stopwatch that keeps the total time spent loading the equation matrix.
            </summary>
            <value>
            The time spent computing contributions and loading the matrix and right hand side vector.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.Biasing.BiasingSimulationStatistics.ReorderTime">
            <summary>
            Gets a stopwatch that keeps the total time spent reordering the equation matrix.
            </summary>
            <value>
            The time spent reordering the solver.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.Biasing.BiasingSimulationStatistics.FactoringTime">
            <summary>
            Gets a stopwatch that keeps the total time spent on decomposition of the matrix.
            </summary>
            <value>
            The time spent factoring the matrix.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.Biasing.BiasingSimulationStatistics.Reset">
            <summary>
            Reset simulation statistics.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.Biasing.Rules">
            <summary>
            Necessary rules for biasing simulations.
            </summary>
            <seealso cref="T:SpiceSharp.Validation.BaseRules" />
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Validation.ComponentRuleParameters"/>
        </member>
        <member name="P:SpiceSharp.Simulations.Biasing.Rules.Parameters">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.Biasing.Rules.#ctor(SpiceSharp.Simulations.IVariableFactory{SpiceSharp.Simulations.IVariable},System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Biasing.Rules"/> class.
            </summary>
            <param name="factory">The variable factory.</param>
            <param name="comparer">The comparer for variable names.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="factory"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.Biasing.Rules.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.Biasing.TemperatureSimulationState">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.ITemperatureSimulationState"/> for an <see cref="T:SpiceSharp.Simulations.ITemperatureSimulation"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.ITemperatureSimulationState" />
        </member>
        <member name="P:SpiceSharp.Simulations.Biasing.TemperatureSimulationState.Temperature">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.Biasing.TemperatureSimulationState.NominalTemperature">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.Biasing.TemperatureSimulationState.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Biasing.TemperatureSimulationState"/> class.
            </summary>
            <param name="temperature">The temperature.</param>
            <param name="nominalTemperature">The nominal temperature.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.ConvergenceAid">
            <summary>
            A template for aiding convergence.
            </summary>
            <remarks>
            The convergence aid will try to bring the solution of a variable as close
            as possible to the specified value. If this value is close to the final
            solution, then convergence can be achieved much faster.
            </remarks>
        </member>
        <member name="F:SpiceSharp.Simulations.ConvergenceAid._force">
            <summary>
            The amount with which a value is forced to the convergence aid value.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ConvergenceAid.Variable">
            <summary>
            Gets the variable.
            </summary>
            <value>
            The variable.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.ConvergenceAid.Value">
            <summary>
            Gets the value for the convergence aid.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.ConvergenceAid.#ctor(SpiceSharp.Simulations.IVariable,SpiceSharp.Simulations.IBiasingSimulationState,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.ConvergenceAid"/> class.
            </summary>
            <param name="variable">The variable.</param>
            <param name="state">The biasing simulation state.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="variable"/> or <paramref name="state"/> is <c>null</c>.</exception>
            <exception cref="T:SpiceSharp.SpiceSharpException">Thrown if the variable for the convergence aid was not found.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.ConvergenceAid.Aid">
            <summary>
            Aids the convergence.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.IBiasingSimulation">
            <summary>
            An interface describing a simulation that can calculate the biasing state of a circuit.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.ISimulation`1" />
            <seealso cref="T:SpiceSharp.Simulations.ITemperatureSimulation" />
            <seealso cref="T:SpiceSharp.Simulations.IBehavioral`1" />
            <seealso cref="T:SpiceSharp.Simulations.IStateful`1" />
            <seealso cref="T:SpiceSharp.Simulations.IBiasingSimulationState"/>
            <seealso cref="T:SpiceSharp.Behaviors.IBiasingBehavior"/>
            <seealso cref="T:SpiceSharp.Behaviors.IConvergenceBehavior"/>
        </member>
        <member name="T:SpiceSharp.Simulations.IBiasingSimulationState">
            <summary>
            Simulation state for a <see cref="T:SpiceSharp.Simulations.IBiasingSimulation" />.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.ISolverSimulationState`1" />
        </member>
        <member name="P:SpiceSharp.Simulations.IBiasingSimulationState.OldSolution">
            <summary>
            Gets the solution vector of the last computed iteration.
            </summary>
            <remarks>
            This vector is needed for determining convergence.
            </remarks>
            <value>
            The solution to the last iteration.
            </value>
        </member>
        <member name="T:SpiceSharp.Simulations.IIterationSimulationState">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.ISimulationState"/> that tracks the current iteration mode.
            This state is used to help iterating to a solution using some tricks specific to a <see cref="T:SpiceSharp.Simulations.BiasingSimulation"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.ISimulationState" />
        </member>
        <member name="P:SpiceSharp.Simulations.IIterationSimulationState.Mode">
            <summary>
            Gets the iteration mode.
            </summary>
            <value>
            The mode.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IIterationSimulationState.SourceFactor">
            <summary>
            The current source factor.
            This parameter is changed when doing source stepping for aiding convergence.
            </summary>
            <remarks>
            In source stepping, all sources are considered to be at 0 which has typically only one single solution (all nodes and
            currents are 0V and 0A). By increasing the source factor in small steps, it is possible to progressively reach a solution
            without having non-convergence.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Simulations.IIterationSimulationState.Gmin">
            <summary>
            Gets or sets the a conductance that is shunted with PN junctions to aid convergence.
            </summary>
            <value>
            The minimum conductance for PN junctions.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IIterationSimulationState.IsConvergent">
            <summary>
            Is the current iteration convergent?
            This parameter is used to communicate convergence.
            </summary>
            <value>
              <c>true</c> if this the iteration is convergent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SpiceSharp.Simulations.IterationModes">
            <summary>
            Possible modes for initialization of behaviors.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.IterationModes.None">
            <summary>
            The default mode.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.IterationModes.Float">
            <summary>
            Indicates that nodes may still be everywhere, and a first solution should be calculated.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.IterationModes.Junction">
            <summary>
            Indicates that PN junctions or other difficult-to-converge dependencies should be initialized to a starting voltage.
            </summary>
            <remarks>
            PN junction often don't behave well in iterative methods due to their exponential dependency. A good initial value can be critical.
            </remarks>
        </member>
        <member name="F:SpiceSharp.Simulations.IterationModes.Fix">
            <summary>
            Indicates that an initial iteration has been done and that we need to fix the solution to check for convergence.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.ITemperatureSimulation">
            <summary>
            A class that can calculate temperature-dependent effects.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.ISimulation"/>
            <seealso cref="T:SpiceSharp.Simulations.IStateful`1"/>
            <seealso cref="T:SpiceSharp.Simulations.ITemperatureSimulationState"/>
            <seealso cref="T:SpiceSharp.Simulations.IBehavioral`1" />
            <seealso cref="T:SpiceSharp.Behaviors.ITemperatureBehavior"/>
        </member>
        <member name="T:SpiceSharp.Simulations.ITemperatureSimulationState">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.ISimulationState"/> for tracking temperature.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.ISimulationState" />
        </member>
        <member name="P:SpiceSharp.Simulations.ITemperatureSimulationState.Temperature">
            <summary>
            Gets the current temperature in Kelvin for this circuit in Kelvin.
            </summary>
            <value>
            The temperature.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.ITemperatureSimulationState.NominalTemperature">
            <summary>
            Gets the nominal temperature in Kelvin for the circuit in Kelvin.
            Used by models as the default temperature where the parameters were measured.
            </summary>
            <value>
            The nominal temperature.
            </value>
        </member>
        <member name="T:SpiceSharp.Simulations.Frequency.ComplexSimulationStatistics">
            <summary>
            Statistics for a <see cref="T:SpiceSharp.Simulations.FrequencySimulation"/>.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Frequency.ComplexSimulationStatistics.ComplexPoints">
            <summary>
            Gets or sets the number of frequency points calculated.
            </summary>
            <value>
            The number of calculated complex points.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.Frequency.ComplexSimulationStatistics.ComplexTime">
            <summary>
            Gets the time spent on frequency analysis.
            </summary>
            <value>
            The time spent on small-signal analysis.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.Frequency.ComplexSimulationStatistics.ComplexSolveTime">
            <summary>
            Gets the time spent on solving the complex equation matrix.
            </summary>
            <value>
            The time spent solving complex equations.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.Frequency.ComplexSimulationStatistics.ComplexLoadTime">
            <summary>
            Gets the time spent on loading the complex equation matrix.
            </summary>
            <value>
            The time spent loading the complex matrix and right hand side vector.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.Frequency.ComplexSimulationStatistics.ComplexReorderTime">
            <summary>
            Gets the time spent on reordering the complex equation matrix.
            </summary>
            <value>
            The time spent reordering the complex matrix.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.Frequency.ComplexSimulationStatistics.ComplexDecompositionTime">
            <summary>
            Gets the time spent on factoring the complex equation matrix.
            </summary>
            <value>
            The time spent on factoring the complex equation matrix.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.Frequency.ComplexSimulationStatistics.Reset">
            <summary>
            Reset the statistics.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.Frequency.RuleParameters">
            <summary>
            Rule parameters for a <see cref="T:SpiceSharp.Simulations.Frequency.Rules"/>.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
        </member>
        <member name="P:SpiceSharp.Simulations.Frequency.RuleParameters.Frequencies">
            <summary>
            Gets the frequencies.
            </summary>
            <value>
            The frequencies.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.Frequency.RuleParameters.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Frequency.RuleParameters"/> class.
            </summary>
            <param name="frequencies">The frequencies.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="frequencies"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.Frequency.RuleParameters.Clone">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Simulations.Frequency.Rules">
            <summary>
            Necessary rules for frequency simulation.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.Biasing.Rules" />
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Simulations.Frequency.RuleParameters"/>
        </member>
        <member name="P:SpiceSharp.Simulations.Frequency.Rules.FrequencyParameters">
            <summary>
            Gets the frequency parameters.
            </summary>
            <value>
            The frequency parameters.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.Frequency.Rules.#ctor(SpiceSharp.Simulations.ISolverSimulationState{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Frequency.Rules"/> class.
            </summary>
            <param name="state">The biasing simulation state.</param>
            <param name="frequencies">The frequencies that will be evaluated.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.FrequencyParameters">
            <summary>
            A configuration for a <see cref="T:SpiceSharp.Simulations.FrequencySimulation" />.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
        </member>
        <member name="P:SpiceSharp.Simulations.FrequencyParameters.KeepOpInfo">
            <summary>
            Gets or sets a value indicating whether the operation point should be exported.
            </summary>
            <value>
              <c>true</c> if operating point information should be exported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.FrequencyParameters.Frequencies">
            <summary>
            Gets or sets the frequency points to be simulated.
            </summary>
            <value>
            The frequency points.
            </value>
        </member>
        <member name="F:SpiceSharp.Simulations.FrequencyParameters._relativePivotThreshold">
            <summary>
            Gets or sets the relative threshold for choosing a pivot.
            </summary>
            <value>
            The relative pivot threshold.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is not greater than 0.
            </exception>
        </member>
        <member name="F:SpiceSharp.Simulations.FrequencyParameters._absolutePivotThreshold">
            <summary>
            Gets or sets the absolute threshold for choosing a pivot.
            </summary>
            <value>
            The absolute pivot threshold.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is negative.
            </exception>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencyParameters.CreateSolver">
            <summary>
            Creates solver used to solve equations.
            </summary>
            <returns>A solver that can be used to solve equations.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencyParameters.Clone">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.FrequencyParameters.Validate">
            <summary>
            Gets or sets a value indicating whether the simulation should be validated.
            </summary>
            <value>
              <c>true</c> if the simulation should be validated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencyParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.FrequencyParameters"/> class.
            Automatically specifies a sweep from 1Hz to 100Hz with 10 points per decade.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencyParameters.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.FrequencyParameters"/> class.
            </summary>
            <param name="frequencySweep">The frequency points.</param>
        </member>
        <member name="P:SpiceSharp.Simulations.FrequencyParameters.AbsolutePivotThreshold">
            <summary>
            Gets or sets the absolute threshold for choosing a pivot.
            </summary>
            <value>
            The absolute pivot threshold.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is negative.
            </exception>
        </member>
        <member name="P:SpiceSharp.Simulations.FrequencyParameters.RelativePivotThreshold">
            <summary>
            Gets or sets the relative threshold for choosing a pivot.
            </summary>
            <value>
            The relative pivot threshold.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is not greater than 0.
            </exception>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencyParameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Boolean}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencyParameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Boolean}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencyParameters.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencyParameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Simulations.FrequencySimulation">
            <summary>
            A template for frequency-dependent analysis.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.BiasingSimulation" />
            <seealso cref="T:SpiceSharp.Simulations.IFrequencySimulation"/>
            <seealso cref="T:SpiceSharp.Simulations.IBehavioral`1"/>
            <seealso cref="T:SpiceSharp.Behaviors.IFrequencyUpdateBehavior"/>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterized`1"/>
            <seealso cref="T:SpiceSharp.Simulations.FrequencyParameters"/>
        </member>
        <member name="T:SpiceSharp.Simulations.FrequencySimulation.ComplexSimulationState">
            <summary>
            A simulation state using complex numbers.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IComplexSimulationState" />
        </member>
        <member name="P:SpiceSharp.Simulations.FrequencySimulation.ComplexSimulationState.Solution">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.FrequencySimulation.ComplexSimulationState.Laplace">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.FrequencySimulation.ComplexSimulationState.Map">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.FrequencySimulation.ComplexSimulationState.Solver">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.ComplexSimulationState.#ctor(SpiceSharp.Algebra.ISparsePivotingSolver{System.Numerics.Complex},System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.FrequencySimulation.ComplexSimulationState"/> class.
            </summary>
            <param name="solver">The solver.</param>
            <param name="comparer">The comparer.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="solver"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.ComplexSimulationState.GetSharedVariable(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.ComplexSimulationState.CreatePrivateVariable(System.String,SpiceSharp.Simulations.Variables.IUnit)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.ComplexSimulationState.Setup">
            <summary>
            Set up the simulation state for the simulation.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.FrequencySimulation.FrequencyParameters">
            <summary>
            Gets the frequency parameters.
            </summary>
            <value>
            The frequency parameters.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.FrequencySimulation.Statistics">
            <summary>
            Gets the statistics.
            </summary>
            <value>
            The statistics.
            </value>
        </member>
        <member name="E:SpiceSharp.Simulations.FrequencySimulation.BeforeFrequencyLoad">
            <summary>
            Occurs before loading the matrix and right-hand side vector.
            </summary>
            <remarks>
            For better performance you can also create an entity with a high priority that
            generates a frequency behavior.
            </remarks>
        </member>
        <member name="E:SpiceSharp.Simulations.FrequencySimulation.AfterFrequencyLoad">
            <summary>
            Occurs after loading the matrix and right-hand side vector.
            </summary>
            <remarks>
            For better performance you can also create an entity with a low priority that
            generates a frequency behavior.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Simulations.FrequencySimulation.SpiceSharp#Simulations#IStateful{SpiceSharp#Simulations#IComplexSimulationState}#State">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.FrequencySimulation.SpiceSharp#ParameterSets#IParameterized{SpiceSharp#Simulations#FrequencyParameters}#Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.FrequencySimulation.SpiceSharp#Simulations#ISimulation{SpiceSharp#Simulations#IVariable{System#Numerics#Complex}}#Solved">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.FrequencySimulation"/> class.
            </summary>
            <param name="name">The name of the simulation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.FrequencySimulation"/> class.
            </summary>
            <param name="name">The name of the simulation.</param>
            <param name="frequencySweep">The frequency points.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.CreateStates">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.CreateBehaviors(SpiceSharp.Entities.IEntityCollection)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.Validate(SpiceSharp.Entities.IEntityCollection)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.ComplexMagnitude(System.Numerics.Complex)">
            <summary>
            Default complex magnitude.
            </summary>
            <param name="value">The value.</param>
            <returns>The magnitude of the complex number.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.Execute(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.AcIterate">
            <summary>
            Iterate small-signal matrix and vector.
            </summary>
            <exception cref="T:SpiceSharp.SpiceSharpException">Thrown if a behavior cannot load the complex matrix and/or right hand side vector.</exception>
            <exception cref="T:SpiceSharp.Algebra.SingularException">Thrown if the equation matrix is singular.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.OnBeforeFrequencyLoad(SpiceSharp.Simulations.LoadStateEventArgs)">
            <summary>
            Raises the <see cref="E:SpiceSharp.Simulations.FrequencySimulation.BeforeFrequencyLoad" /> event.
            </summary>
            <param name="args">The <see cref="T:SpiceSharp.Simulations.LoadStateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.OnAfterFrequencyLoad(SpiceSharp.Simulations.LoadStateEventArgs)">
            <summary>
            Raises the <see cref="E:SpiceSharp.Simulations.FrequencySimulation.AfterFrequencyLoad" /> event.
            </summary>
            <param name="args">The <see cref="T:SpiceSharp.Simulations.LoadStateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.InitializeAcParameters">
            <summary>
            Initializes the small-signal parameters.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.FrequencyLoad">
            <summary>
            Loads the Y-matrix and right hand side vector.
            </summary>
            <exception cref="T:SpiceSharp.SpiceSharpException">Thrown if a behavior cannot load the complex matrix and/or right hand side vector.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.LoadFrequencyBehaviors">
            <summary>
            Loads the Y-matrix and right hand side vector.
            </summary>
            <exception cref="T:SpiceSharp.SpiceSharpException">Thrown if a behavior cannot load the complex matrix and/or right hand side vector.</exception>
        </member>
        <member name="T:SpiceSharp.Simulations.IComplexSimulationState">
            <summary>
            A simulation state using complex numbers.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.ISolverSimulationState`1"/>
        </member>
        <member name="P:SpiceSharp.Simulations.IComplexSimulationState.Laplace">
            <summary>
            Gets or sets the current laplace variable.
            </summary>
            <value>
            The laplace.
            </value>
        </member>
        <member name="T:SpiceSharp.Simulations.IFrequencySimulation">
            <summary>
            An interface that describes a class that can do small-signal analysis.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IBiasingSimulation"/>
            <seealso cref="T:SpiceSharp.Simulations.ISimulation`1"/>
            <seealso cref="T:SpiceSharp.Simulations.IVariable`1"/>
            <seealso cref="T:SpiceSharp.Simulations.IBehavioral`1"/>
            <seealso cref="T:SpiceSharp.Behaviors.IFrequencyBehavior"/>
            <seealso cref="T:SpiceSharp.Simulations.IStateful`1"/>
            <seealso cref="T:SpiceSharp.Simulations.IComplexSimulationState"/>
        </member>
        <member name="T:SpiceSharp.Simulations.ISolverSimulationState`1">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.ISimulationState"/> that describes a simulation state that uses a solver for modified nodal analysis.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <seealso cref="T:SpiceSharp.Simulations.ISimulationState"/>
            <seealso cref="T:SpiceSharp.Simulations.IVariableFactory`1"/>
            <seealso cref="T:SpiceSharp.Simulations.IVariableDictionary`1"/>
            <seealso cref="T:SpiceSharp.Simulations.IVariable`1"/>
        </member>
        <member name="P:SpiceSharp.Simulations.ISolverSimulationState`1.Solver">
            <summary>
            Gets the solver used to solve the system of equations.
            </summary>
            <value>
            The solver.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.ISolverSimulationState`1.Solution">
            <summary>
            Gets the solution to the solved equations.
            </summary>
            <value>
            The solution.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.ISolverSimulationState`1.Map">
            <summary>
            Gets the <see cref="T:SpiceSharp.Simulations.IVariableMap"/> that maps variables to indices for the solver.
            </summary>
            <value>
            The variable map.
            </value>
        </member>
        <member name="T:SpiceSharp.Simulations.LoadStateEventArgs">
            <summary>
            Event arguments that are used when a state is loaded.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:SpiceSharp.Simulations.LoadStateEventArgs.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.LoadStateEventArgs.#ctor(SpiceSharp.Simulations.ISimulationState)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.LoadStateEventArgs"/> class.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.ModifiedNodalAnalysisHelper`1">
            <summary>
            A helper class that is specific to Modified Nodal Analysis.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ModifiedNodalAnalysisHelper`1.Magnitude">
            <summary>
            Gets or sets the magnitude method.
            </summary>
            <value>
            The magnitude.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.ModifiedNodalAnalysisHelper`1.PreorderModifiedNodalAnalysis(SpiceSharp.Algebra.ISparseMatrix{`0},System.Int32)">
            <summary>
            Preorders the modified nodal analysis.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="size">The submatrix size to be preordered.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.ModifiedNodalAnalysisHelper`1.ApplyDiagonalGmin(SpiceSharp.Algebra.IMatrix{System.Double},System.Double)">
            <summary>
            Apply an additional conductance to the diagonal elements of a matrix that is typically constructed using Modified Nodal Analysis (MNA).
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="gmin">The conductance to be added to the diagonal.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.ModifiedNodalAnalysisHelper`1.CountTwins``1(``0,System.Int32,SpiceSharp.Algebra.ISparseMatrixElement{`0}@,SpiceSharp.Algebra.ISparseMatrixElement{`0}@,System.Int32)">
            <summary>
            Count the number of twins in a matrix that is typically constructed using Modified Nodal Analysis (MNA).
            </summary>
            <remarks>
            A twin is a matrix element that is equal to one, and also has a one on the transposed position. MNA formulation
            often leads to many twins, allowing us to save some time by searching for them beforehand.
            </remarks>
            <param name="matrix">The matrix.</param>
            <param name="column">The column index.</param>
            <param name="twin1">The first twin element.</param>
            <param name="twin2">The second twin element.</param>
            <param name="size">The size of the submatrix to search.</param>
            <returns>The number of twins found.</returns>
        </member>
        <member name="T:SpiceSharp.Simulations.Base.Reference">
            <summary>
            A reference to a hierarchical item.
            </summary>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>
            <seealso cref="T:System.IEquatable`1"/>
        </member>
        <member name="P:SpiceSharp.Simulations.Base.Reference.Path">
            <summary>
            Gets the path of the node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Base.Reference.Length">
            <summary>
            Gets the length of the path.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Base.Reference.Item(System.Int32)">
            <summary>
            Gets an element of the hierarchical reference at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>Returns the path item at the specified index.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Base.Reference.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:SpiceSharp.Simulations.Base.Reference"/>.
            </summary>
            <param name="node">The node name.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Base.Reference.#ctor(System.String[])">
            <summary>
            Creates a new <see cref="T:SpiceSharp.Simulations.Base.Reference"/>.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Base.Reference.GetHashCode">
            <summary>
            Calculates a hash code for the node reference.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Base.Reference.Equals(System.Object)">
            <summary>
            Determines whether the object is equal to another.
            </summary>
            <param name="obj">The other object.</param>
            <returns>Returns <c>true</c> if both are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Base.Reference.Equals(SpiceSharp.Simulations.Base.Reference)">
            <summary>
            Determines whether the node reference is equal to another.
            </summary>
            <param name="other">The other node reference.</param>
            <returns>Returns <c>true</c> if both are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Base.Reference.GetContainer(SpiceSharp.Simulations.ISimulation)">
            <summary>
            Gets the behavior container that the hierarchical reference points to.
            </summary>
            <param name="simulation">The simulation.</param>
            <returns>Returns the behavior container.</returns>
            <exception cref="T:SpiceSharp.BehaviorsNotFoundException">Thrown if a behavior collection could not be found.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.Base.Reference.TryGetContainer(SpiceSharp.Simulations.ISimulation,SpiceSharp.Behaviors.IBehaviorContainer@)">
            <summary>
            Tries to find a behavior container that the hierarchical reference points to.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="container">The behavior container.</param>
            <returns>Returns <c>true</c> if the container could be found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Base.Reference.GetVariable``2(SpiceSharp.Simulations.ISimulation)">
            <summary>
            Gets the variable that the hierarchical reference points to.
            </summary>
            <typeparam name="T">The variable return type.</typeparam>
            <typeparam name="S">The simulation state that needs to be used to find the variable.</typeparam>
            <param name="simulation">The simulation.</param>
            <returns>Returns the variable.</returns>
            <exception cref="T:SpiceSharp.Diagnostics.VariableNotFoundException">Thrown if the variable could not be found.</exception>
            <exception cref="T:SpiceSharp.StateNotFoundException">Thrown if the simulation or entities behavior does not define the state.</exception>
            <exception cref="T:SpiceSharp.BehaviorsNotFoundException">Thrown if a behavior collection could not be found.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.Base.Reference.TryGetVariable``2(SpiceSharp.Simulations.ISimulation,SpiceSharp.Simulations.IVariable{``0}@)">
            <summary>
            Tries to find a variable that the hierarchical reference points to.
            </summary>
            <typeparam name="T">The variable return type.</typeparam>
            <typeparam name="S">The simulation state used to find the variable.</typeparam>
            <param name="simulation">The simulation.</param>
            <param name="variable">The variable.</param>
            <returns>Returns <c>true</c> if the variable was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Base.Reference.GetVectorElement``2(SpiceSharp.Simulations.ISimulation)">
            <summary>
            Gets the right-hand side vector element that relates to the node the hierarchical reference points to.
            </summary>
            <typeparam name="T">The variable return type.</typeparam>
            <typeparam name="S">The simulation state that needs to be used to find the variable.</typeparam>
            <param name="simulation">The simulation.</param>
            <returns>Returns the variable.</returns>
            <exception cref="T:SpiceSharp.Diagnostics.VariableNotFoundException">Thrown if the variable could not be found.</exception>
            <exception cref="T:SpiceSharp.StateNotFoundException">Thrown if the simulation or entities behavior does not define the state.</exception>
            <exception cref="T:SpiceSharp.BehaviorsNotFoundException">Thrown if a behavior collection could not be found.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.Base.Reference.TryGetVectorElement``2(SpiceSharp.Simulations.ISimulation,SpiceSharp.Algebra.Element{``0}@)">
            <summary>
            Tries to find a right-hand side vector element that relates to the node the hierarchical reference points to.
            </summary>
            <typeparam name="T">The variable return type.</typeparam>
            <typeparam name="S">The simulation state used to find the variable.</typeparam>
            <param name="simulation">The simulation.</param>
            <param name="variable">The variable.</param>
            <returns>Returns <c>true</c> if the variable was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Base.Reference.ToString">
            <summary>
            Converts the node reference to a string.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Base.Reference.System#Collections#Generic#IEnumerable{System#String}#GetEnumerator">
            <summary>
            Gets an enumerator for the node reference.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Base.Reference.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the node reference.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Base.Reference.op_Implicit(System.String)~SpiceSharp.Simulations.Base.Reference">
            <summary>
            Implicitly converts a string to a node reference.
            </summary>
            <param name="node">The node name.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Base.Reference.op_Implicit(System.String[])~SpiceSharp.Simulations.Base.Reference">
            <summary>
            Implicitly converts an array of strings to a node reference.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Base.Reference.op_Implicit(System.Collections.Generic.List{System.String})~SpiceSharp.Simulations.Base.Reference">
            <summary>
            Implicitly converts a list of strings to a node reference.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.SolverVariable`1">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.IVariable`1"/> that takes its value from an <see cref="T:SpiceSharp.Simulations.ISolverSimulationState`1"/>.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <seealso cref="T:SpiceSharp.Simulations.IVariable`1" />
        </member>
        <member name="P:SpiceSharp.Simulations.SolverVariable`1.Name">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.SolverVariable`1.Value">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.SolverVariable`1.Unit">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.SolverVariable`1.#ctor(SpiceSharp.Simulations.ISolverSimulationState{`0},System.String,System.Int32,SpiceSharp.Simulations.Variables.IUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.SolverVariable`1"/> class.
            </summary>
            <param name="state">The state where to find the solution of the variable.</param>
            <param name="name">The name of the variable.</param>
            <param name="index">The index of the variable.</param>
            <param name="unit">The unit of the variable.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="state"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.SolverVariable`1.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.DecadeSweep">
            <summary>
            This class implements a sweep with a number of points per decade.
            </summary>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
        </member>
        <member name="P:SpiceSharp.Simulations.DecadeSweep.Initial">
            <summary>
            Gets or sets the initial.
            </summary>
            <value>
            The initial frequency value.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.DecadeSweep.Final">
            <summary>
            The final frequency of the sweep.
            </summary>
            <value>
            The final frequency value.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.DecadeSweep.A">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.DecadeSweep.R">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.DecadeSweep.N">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.DecadeSweep.PointsPerDecade">
            <summary>
            Gets or sets the points per decade.
            </summary>
            <value>
            The points per decade.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.DecadeSweep.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.DecadeSweep"/> class.
            </summary>
            <param name="initial">The initial value.</param>
            <param name="final">The final value.</param>
            <param name="pointsPerDecade">The number of points per decade.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.DecadeSweep.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.DecadeSweep.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.DecadeSweep.SpiceSharp#ParameterSets#IImportParameterSet{System#Int32}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.DecadeSweep.SpiceSharp#ParameterSets#IExportPropertySet{System#Int32}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Simulations.Sweeps.GeometricProgression">
            <summary>
            A geometric progression.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Sweeps.GeometricProgression.A">
            <summary>
            Gets the Initial factor A.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Sweeps.GeometricProgression.R">
            <summary>
            Gets the progression factor R.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Sweeps.GeometricProgression.N">
            <summary>
            Gets the number of steps.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.Sweeps.GeometricProgression.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Sweeps.GeometricProgression.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.LinearSweep">
            <summary>
            A class that implements a linear sweep.
            </summary>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
        </member>
        <member name="P:SpiceSharp.Simulations.LinearSweep.Initial">
            <summary>
            Gets or sets the initial.
            </summary>
            <value>
            The initial frequency value.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.LinearSweep.Final">
            <summary>
            The final frequency of the sweep.
            </summary>
            <value>
            The final frequency value.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.LinearSweep.Points">
            <summary>
            Gets or sets the number of points.
            </summary>
            <value>
            The number of points.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.LinearSweep.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.LinearSweep"/> class.
            </summary>
            <param name="initial">The initial value.</param>
            <param name="final">The final value.</param>
            <param name="points">The number of points.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.LinearSweep.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.LinearSweep"/> class.
            </summary>
            <param name="initial">The initial value.</param>
            <param name="final">The final value.</param>
            <param name="delta">The step size.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.LinearSweep.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.LinearSweep.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.OctaveSweep">
            <summary>
            This class implements a sweep with a number of points per decade.
            </summary>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
        </member>
        <member name="P:SpiceSharp.Simulations.OctaveSweep.Initial">
            <summary>
            Gets or sets the initial.
            </summary>
            <value>
            The initial frequency value.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.OctaveSweep.Final">
            <summary>
            The final frequency of the sweep.
            </summary>
            <value>
            The final frequency value.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.OctaveSweep.A">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.OctaveSweep.R">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.OctaveSweep.N">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.OctaveSweep.PointsPerOctave">
            <summary>
            Gets or sets the points per decade.
            </summary>
            <value>
            The points per decade.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.OctaveSweep.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.DecadeSweep"/> class.
            </summary>
            <param name="initial">The initial value.</param>
            <param name="final">The final value.</param>
            <param name="pointsPerOctave">The number of points per decade.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.OctaveSweep.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.OctaveSweep.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.OctaveSweep.SpiceSharp#ParameterSets#IImportParameterSet{System#Int32}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.OctaveSweep.SpiceSharp#ParameterSets#IExportPropertySet{System#Int32}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Simulations.TemperatureStateEventArgs">
            <summary>
            Event arguments that are used when a state is loaded.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:SpiceSharp.Simulations.TemperatureStateEventArgs.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.TemperatureStateEventArgs.#ctor(SpiceSharp.Simulations.ITemperatureSimulationState)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.TemperatureStateEventArgs"/> class.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.IBehavioral">
            <summary>
            An interface that describes a class that can use behaviors.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.IBehavioral.Behaviors">
            <summary>
            Gets all behavior types that are used by the class.
            </summary>
            <value>
            The behaviors.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IBehavioral.EntityBehaviors">
            <summary>
            Gets the entity behaviors.
            </summary>
            <value>
            The entity behaviors.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.IBehavioral.UsesBehaviors``1">
            <summary>
            Checks if the class uses the specified behaviors.
            </summary>
            <typeparam name="B">The behavior type.</typeparam>
            <returns>
              <c>true</c> if the class uses the behavior; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.IBehavioral.UsesBehavior(System.Type)">
            <summary>
            Checks if the class uses the specified behavior.
            </summary>
            <param name="types">The behavior (interface) type.</param>
            <returns>
                <c>true</c> if the class uses the behavior; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.IBehavioral`1">
            <summary>
            Specifies that the class uses behaviors of a certain type.
            </summary>
            <typeparam name="B">The behavior type that is used by the class.</typeparam>
        </member>
        <member name="T:SpiceSharp.Simulations.ComplexCurrentExport">
            <summary>
            This class can export complex currents.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.Export`1" />
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexCurrentExport.Source">
            <summary>
            Gets the name of the voltage source.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.ComplexCurrentExport.#ctor(SpiceSharp.Simulations.ISimulation,SpiceSharp.Simulations.Base.Reference)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.ComplexCurrentExport"/> class.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="source">The source name.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="simulation"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="source"/> is empty.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.ComplexCurrentExport.BuildExtractor(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.ComplexCurrentExport.ToString">
            <summary>
            Converts the export to a string.
            </summary>
            <returns>Returns the string representation.</returns>
        </member>
        <member name="T:SpiceSharp.Simulations.ComplexPropertyExport">
            <summary>
            This class can export complex property values.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.Export`1" />
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexPropertyExport.Entity">
            <summary>
            Gets the path to the entity.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexPropertyExport.PropertyName">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.ComplexPropertyExport.#ctor(SpiceSharp.Simulations.ISimulation,SpiceSharp.Simulations.Base.Reference,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.ComplexPropertyExport"/> class.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="entity">The path to the entity.</param>
            <param name="propertyName">The name of the property.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="simulation"/> or <paramref name="propertyName"> is <c>null</c>.</paramref></exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="entity"/> is empty.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.ComplexPropertyExport.BuildExtractor(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.ComplexPropertyExport.ToString">
            <summary>
            Converts the export to a string.
            </summary>
            <returns>Returns the export represented as a string.</returns>
        </member>
        <member name="T:SpiceSharp.Simulations.ComplexVoltageExport">
            <summary>
            A class that exports complex voltages.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.Export`1" />
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexVoltageExport.Positive">
            <summary>
            Gets the positive node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexVoltageExport.Reference">
            <summary>
            Gets the reference node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexVoltageExport.Decibels">
            <summary>
            Gets the amplitude in decibels (dB).
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexVoltageExport.Phase">
            <summary>
            Gets the phase in radians.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.ComplexVoltageExport.#ctor(SpiceSharp.Simulations.IFrequencySimulation,SpiceSharp.Simulations.Base.Reference,SpiceSharp.Simulations.Base.Reference)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.ComplexVoltageExport"/> class.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="posNode">The positive node (can be a string or a string array for a path).</param>
            <param name="refNode">The reference/negative node (can be a string or a string array for a path).</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="simulation"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="posNode"/> and <paramref name="refNode"/> are both empty.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.ComplexVoltageExport.BuildExtractor(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.ComplexVoltageExport.ToString">
            <summary>
            Converts the export to a string.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="T:SpiceSharp.Simulations.Export`1">
            <summary>
            A template for exporting data for a simulation.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="P:SpiceSharp.Simulations.Export`1.IsValid">
            <summary>
            Returns true if the export is currently valid.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Export`1.Simulation">
            <inheritdoc />
        </member>
        <member name="P:SpiceSharp.Simulations.Export`1.Value">
            <summary>
            Gets the current value from the simulation.
            </summary>
            <remarks>
            This property will return a default if there is nothing to extract.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Simulations.Export`1.#ctor(SpiceSharp.Simulations.ISimulation)">
            <summary>
            Creates a new <see cref="T:SpiceSharp.Simulations.Export`1"/>.
            </summary>
            <param name="simulation">The simulation.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Export`1.BuildExtractor(SpiceSharp.Simulations.ISimulation)">
            <summary>
            Builds the extractor for the given simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <returns>The extractor.</returns>
        </member>
        <member name="T:SpiceSharp.Simulations.GenericExport`1">
            <summary>
            This class allows any function to be specified.
            </summary>
            <typeparam name="T">The base type.</typeparam>
            <seealso cref="T:SpiceSharp.Simulations.Export`1" />
        </member>
        <member name="M:SpiceSharp.Simulations.GenericExport`1.#ctor(SpiceSharp.Simulations.ISimulation,System.Func{`0},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.GenericExport`1"/> class.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="extractor">The function for extracting information.</param>
            <param name="name">The name of the export.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.GenericExport`1.BuildExtractor(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.GenericExport`1.ToString">
            <summary>
            Converts the export to a string.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="T:SpiceSharp.Simulations.IExport`1">
            <summary>
            An interface that describes an exporter for simulation data.
            </summary>
            <typeparam name="T">The type of output data.</typeparam>
        </member>
        <member name="P:SpiceSharp.Simulations.IExport`1.Simulation">
            <summary>
            Gets or sets the simulation that the export applies to.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.IExport`1.Value">
            <summary>
            Gets the current value from the simulation.
            </summary>
            <remarks>
            This property will return a default if there is nothing to extract.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Simulations.IExport`1.IsValid">
            <summary>
            Returns true if the export is currently valid.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.InputNoiseDensityExport">
            <summary>
            This class can export the total input-referred noise density.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.Export`1" />
        </member>
        <member name="M:SpiceSharp.Simulations.InputNoiseDensityExport.#ctor(SpiceSharp.Simulations.INoiseSimulation)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.InputNoiseDensityExport"/> class.
            </summary>
            <param name="noise">The noise analysis.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.InputNoiseDensityExport.BuildExtractor(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.InputNoiseDensityExport.ToString">
            <summary>
            Converts the export to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Simulations.OutputNoiseDensityExport">
            <summary>
            This class can export the output-referred noise density.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.Export`1" />
        </member>
        <member name="M:SpiceSharp.Simulations.OutputNoiseDensityExport.#ctor(SpiceSharp.Simulations.INoiseSimulation)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.OutputNoiseDensityExport"/> class.
            </summary>
            <param name="noise">The noise analysis.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.OutputNoiseDensityExport.BuildExtractor(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.OutputNoiseDensityExport.ToString">
            <summary>
            Converts the export to a string.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="T:SpiceSharp.Simulations.RealCurrentExport">
            <summary>
            This class can export real currents.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.Export`1" />
        </member>
        <member name="P:SpiceSharp.Simulations.RealCurrentExport.Source">
            <summary>
            Gets the name of the voltage source.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.RealCurrentExport.#ctor(SpiceSharp.Simulations.IBiasingSimulation,SpiceSharp.Simulations.Base.Reference)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.ComplexCurrentExport"/> class.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="source">The source name.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.RealCurrentExport.BuildExtractor(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.RealCurrentExport.ToString">
            <summary>
            Converts the export to a string.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="T:SpiceSharp.Simulations.RealPropertyExport">
            <summary>
            This class can export real properties.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.Export`1" />
        </member>
        <member name="P:SpiceSharp.Simulations.RealPropertyExport.Entity">
            <summary>
            Gets the path to the entity.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.RealPropertyExport.PropertyName">
            <summary>
            Gets property name.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.RealPropertyExport.#ctor(SpiceSharp.Simulations.ISimulation,SpiceSharp.Simulations.Base.Reference,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.RealPropertyExport"/> class.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="entity">The path to the entity (can be a string or string array).</param>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.RealPropertyExport.BuildExtractor(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.RealPropertyExport.ToString">
            <summary>
            Converts the export to a string.
            </summary>
            <returns>Returns the export represented as a string.</returns>
        </member>
        <member name="T:SpiceSharp.Simulations.RealVoltageExport">
            <summary>
            This class can export real voltages.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.Export`1" />
        </member>
        <member name="P:SpiceSharp.Simulations.RealVoltageExport.Positive">
            <summary>
            Gets the positive node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.RealVoltageExport.Reference">
            <summary>
            Gets the reference node.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.RealVoltageExport.#ctor(SpiceSharp.Simulations.IBiasingSimulation,SpiceSharp.Simulations.Base.Reference,SpiceSharp.Simulations.Base.Reference)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.RealVoltageExport"/> class.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="posNode">The positive node (can be a string or a string array for a path).</param>
            <param name="refNode">The reference/negative node (can be a string or a string array for a path).</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="posNode"/> and <paramref name="refNode"/> are both empty.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="simulation"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.RealVoltageExport.BuildExtractor(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.RealVoltageExport.ToString">
            <summary>
            Converts the export to a string.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="T:SpiceSharp.Simulations.AC">
            <summary>
            Class that implements a frequency-domain analysis (AC analysis).
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.FrequencySimulation" />
        </member>
        <member name="F:SpiceSharp.Simulations.AC.ExportOperatingPoint">
            <summary>
            The constant returned when exporting the operating point.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.AC.ExportSmallSignal">
            <summary>
            The constant returned when exporting the small signal point.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.AC.Frequency">
            <summary>
            Gets the current frequency point.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.AC.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.AC"/> class.
            </summary>
            <param name="name">The name of the simulation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.AC.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.AC"/> class.
            </summary>
            <param name="name">The name of the simulation.</param>
            <param name="frequencySweep">The frequency points.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.AC.Execute(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Simulations.DC">
            <summary>
            Class that implements a DC sweep analysis.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.BiasingSimulation" />
        </member>
        <member name="F:SpiceSharp.Simulations.DC.ExportSweep">
            <summary>
            The constant returned when exporting a sweep point.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.DC.DCParameters">
            <summary>
            Gets the dc parameters.
            </summary>
            <value>
            The dc parameters.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.DC.SpiceSharp#ParameterSets#IParameterized{SpiceSharp#Simulations#DCParameters}#Parameters">
            <inheritdoc/>
        </member>
        <member name="E:SpiceSharp.Simulations.DC.IterationFailed">
            <summary>
            Occurs when iterating to a solution has failed.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.DC.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.DC"/> class.
            </summary>
            <param name="name">The name of the simulation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.DC.#ctor(System.String,System.String,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.DC"/> class.
            </summary>
            <param name="name">The name of the simulation.</param>
            <param name="source">The source name.</param>
            <param name="start">The starting value.</param>
            <param name="stop">The stop value.</param>
            <param name="step">The step value.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> or <paramref name="source"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.DC.#ctor(System.String,System.Collections.Generic.IEnumerable{SpiceSharp.Simulations.ISweep})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.DC"/> class.
            </summary>
            <param name="name">The name of the simulation.</param>
            <param name="sweeps">The sweeps.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> or <paramref name="sweeps"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.DC.Execute(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.DC.GetCurrentSweepValue">
            <summary>
            Gets the current sweep values.
            The last element indicates the inner-most sweep value.
            </summary>
            <returns>The sweep values, or <c>null</c> if there are no sweeps active.</returns>
        </member>
        <member name="T:SpiceSharp.Simulations.DCParameters">
            <summary>
            A configuration for a <see cref="T:SpiceSharp.Simulations.DC" /> simulation.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
        </member>
        <member name="P:SpiceSharp.Simulations.DCParameters.Sweeps">
            <summary>
            Gets the list of sweeps that need to be executed.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.DCParameters.SweepMaxIterations">
            <summary>
            Gets the maximum number of iterations allowed for DC sweeps.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.DCParameters.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.DCParameters.SpiceSharp#ParameterSets#IExportPropertySet{System#Collections#Generic#ICollection{SpiceSharp#Simulations#ISweep}}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Simulations.ISweep">
            <summary>
            An interface that describes a sweep of simulation properties.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ISweep.Name">
            <summary>
            Gets the name of the sweep.
            </summary>
            <value>
            The name of the sweep.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.ISweep.CreatePoints(SpiceSharp.Simulations.IBiasingSimulation)">
            <summary>
            Creates an enumerable that can sweep properties of the simulation.
            </summary>
            <param name="simulation">The simulation to create the points for.</param>
            <returns>
            The created sweep points.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.ParameterSweep">
            <summary>
            A sweep of a property of an entity.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
            <seealso cref="T:SpiceSharp.Simulations.ISweep" />
        </member>
        <member name="P:SpiceSharp.Simulations.ParameterSweep.Name">
            <summary>
            Gets the name of the sweep.
            </summary>
            <value>
            The name of the sweep.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.ParameterSweep.Property">
            <summary>
            Gets the property that needs to be swept.
            </summary>
            <value>
            The property to be swept.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.ParameterSweep.Update">
            <summary>
            Gets the method called when the value has been updated.
            </summary>
            <value>
            The update method.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.ParameterSweep.Points">
            <summary>
            Gets or sets the points to apply.
            </summary>
            <value>
            The points to apply.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.ParameterSweep.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.ParameterSweep"/> class.
            </summary>
            <param name="name">The name of the entity.</param>
            <param name="property">The property name.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.ParameterSweep.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.ParameterSweep"/> class.
            </summary>
            <param name="name">The name of the entity.</param>
            <param name="points">The points.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> or <paramref name="points"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.ParameterSweep.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Double},System.Action{SpiceSharp.Behaviors.IBehaviorContainer})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.ParameterSweep"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="property">The property.</param>
            <param name="points">The points.</param>
            <param name="update">The method used to update the entity.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.ParameterSweep.CreatePoints(SpiceSharp.Simulations.IBiasingSimulation)">
            <summary>
            Creates an enumerable that can sweep properties of the simulation.
            </summary>
            <param name="simulation">The simulation to create the points for.</param>
            <returns>
            The created sweep points.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.ParameterSweep.Clone">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Simulations.INoiseSimulation">
            <summary>
            An interface describing a class that can do noise analysis.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IFrequencySimulation" />
            <seealso cref="T:SpiceSharp.Simulations.IBehavioral`1" />
            <seealso cref="T:SpiceSharp.Simulations.IStateful`1" />
        </member>
        <member name="T:SpiceSharp.Simulations.INoiseSimulationState">
            <summary>
            A simulation state for a <see cref="T:SpiceSharp.Simulations.Noise"/> analysis.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.ISimulationState" />
        </member>
        <member name="P:SpiceSharp.Simulations.INoiseSimulationState.OutputNoiseDensity">
            <summary>
            Gets the total output noise density of all noise sources in the circuit.
            </summary>
            <value>
            The total output noise density.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.INoiseSimulationState.TotalOutputNoise">
            <summary>
            Gets the total integrated output noise of all noise sources in the circuit.
            </summary>
            <value>
            The total integrated output noise.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.INoiseSimulationState.TotalInputNoise">
            <summary>
            Gets the total integrated input noise of all noise sources in the circuit.
            </summary>
            <value>
            The total integrated input noise.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.INoiseSimulationState.Point">
            <summary>
            Gets the history of input data points. The index 0 contains the current point.
            </summary>
            <value>
            The history of data points.
            </value>
        </member>
        <member name="T:SpiceSharp.Simulations.INoiseSource">
            <summary>
            Describes a noise source.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.INoiseSource.Name">
            <summary>
            Gets the name of the noise source.
            </summary>
            <value>
            The name of the noise source.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.INoiseSource.OutputNoiseDensity">
            <summary>
            Gets the last calculated noise density.
            </summary>
            <value>
            The last calculated noise density.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.INoiseSource.TotalOutputNoise">
            <summary>
            Gets the total integrated output noise.
            </summary>
            <value>
            The total integrated output noise.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.INoiseSource.TotalInputNoise">
            <summary>
            Gets the total integrated input noise.
            </summary>
            <value>
            The total integrated input noise.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.INoiseSource.Initialize">
            <summary>
            Initializes the noise source. Resets all noise contributions to 0.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.Noise">
            <summary>
            A class that implements a noise analysis.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.FrequencySimulation" />
        </member>
        <member name="F:SpiceSharp.Simulations.Noise.ExportOperatingPoint">
            <summary>
            The constant returned when exporting the operating point.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Noise.ExportSmallSignal">
            <summary>
            The constant returned when exporting the small signal solution.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Noise.ExportNoise">
            <summary>
            The constant returned when exporting noise.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Noise.NoiseParameters">
            <summary>
            Gets the noise parameters.
            </summary>
            <value>
            The noise parameters.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.Noise.SpiceSharp#ParameterSets#IParameterized{SpiceSharp#Simulations#NoiseParameters}#Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.Noise.SpiceSharp#Simulations#IStateful{SpiceSharp#Simulations#INoiseSimulationState}#State">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.Noise.Frequency">
            <summary>
            Gets the current frequency point.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.Noise.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Noise"/> class.
            </summary>
            <param name="name">The name of the simulation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.Noise.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Noise"/> class.
            </summary>
            <param name="name">The name of the simulation.</param>
            <param name="input">The name of the input source.</param>
            <param name="output">The output node name.</param>
            <param name="frequencySweep">The frequency points.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.Noise.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Noise"/> class.
            </summary>
            <param name="name">The name of the simulation.</param>
            <param name="input">The name of the input source.</param>
            <param name="output">The output node name.</param>
            <param name="reference">The reference output node name.</param>
            <param name="frequencySweep">The frequency points.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.Noise.CreateStates">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.Noise.CreateBehaviors(SpiceSharp.Entities.IEntityCollection)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.Noise.Execute(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.Noise.NzIterate(System.Int32,System.Int32)">
            <summary>
            Calculate the solution for <see cref="T:SpiceSharp.Simulations.Noise" /> analysis
            </summary>
            <param name="posDrive">The positive driving node index.</param>
            <param name="negDrive">The negative driving node index.</param>
            <remarks>
            This routine solves the adjoint system. It assumes that the matrix has
            already been loaded by a call to AcIterate, so it only alters the right
            hand side vector. The unit-valued current excitation is applied between
            nodes posDrive and negDrive.
            </remarks>
        </member>
        <member name="T:SpiceSharp.Simulations.Noise.NoiseSimulationState">
            <summary>
            A class that represents the state of a <see cref="T:SpiceSharp.Simulations.Noise" /> analysis.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.ISimulationState" />
        </member>
        <member name="P:SpiceSharp.Simulations.Noise.NoiseSimulationState.Name">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.Noise.NoiseSimulationState.OutputNoiseDensity">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.Noise.NoiseSimulationState.TotalOutputNoise">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.Noise.NoiseSimulationState.TotalInputNoise">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.Noise.NoiseSimulationState.Point">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.Noise.NoiseSimulationState.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Noise.NoiseSimulationState"/> class.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.Noise.NoiseSimulationState.Reset(SpiceSharp.Simulations.NoisePoint)">
            <summary>
            Reset the frequency, and resets all noise contributions as well as the total
            integrated noise.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Noise.NoiseSimulationState.SetCurrentPoint(SpiceSharp.Simulations.NoisePoint)">
            <summary>
            Sets the current noise data point.
            </summary>
            <param name="point">The noise data point.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Noise.NoiseSimulationState.Add(SpiceSharp.Simulations.INoiseSource)">
            <summary>
            Adds the contributions of the specified noise source.
            </summary>
            <param name="source">The noise source.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.Noise.NoiseSimulationState.Add(SpiceSharp.Simulations.INoiseSource[])">
            <summary>
            Adds the contributions of the specified noise sources.
            </summary>
            <param name="sources">The noise sources.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="sources"/> or any of the noise sources is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.Simulations.NoiseParameters">
            <summary>
            A configuration for a <see cref="T:SpiceSharp.Simulations.Noise"/> analysis.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet"/>
        </member>
        <member name="P:SpiceSharp.Simulations.NoiseParameters.Output">
            <summary>
            Gets or sets the noise output node name.
            </summary>
            <value>
            The noise output node name.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.NoiseParameters.OutputRef">
            <summary>
            Gets or sets the noise output reference node name.
            </summary>
            <value>
            The noise output reference node name.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.NoiseParameters.InputSource">
            <summary>
            Gets or sets the name of the input source.
            </summary>
            <value>
            The name of the input source.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.NoiseParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.NoiseParameters"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.NoiseParameters.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.NoiseParameters"/> class.
            </summary>
            <param name="output">The output node name.</param>
            <param name="reference">The reference node name.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.NoiseParameters.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.NoiseParameters.SpiceSharp#ParameterSets#IImportParameterSet{System#String}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.NoiseParameters.SpiceSharp#ParameterSets#IExportPropertySet{System#String}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Simulations.NoisePoint">
            <summary>
            A system description at a data point in a <see cref="T:SpiceSharp.Simulations.Noise"/> simulation.
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:SpiceSharp.Simulations.NoisePoint.Frequency">
            <summary>
            Gets the frequency.
            </summary>
            <value>
            The frequency.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.NoisePoint.LogFrequency">
            <summary>
            Gets the natural logarithm of the frequency.
            </summary>
            <value>
            The natural logarithm of the frequency.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.NoisePoint.InverseGainSquared">
            <summary>
            Gets the inverse gain squared from input to output.
            </summary>
            <value>
            The inverse gain squared.
            </value>
            <remarks>
            You can use this scaling factor to scale an output noise density
            to an input noise density.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Simulations.NoisePoint.LogInverseGainSquared">
            <summary>
            Gets the natural logarithm of the inverse gain squared.
            </summary>
            <value>
            The natural logarithm of the inverse gain squared.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.NoisePoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.NoisePoint"/> struct.
            </summary>
            <param name="frequency">The frequency.</param>
            <param name="inverseGainSquared">The inverse gain squared from input to output.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.NoisePoint.Equals(SpiceSharp.Simulations.NoisePoint)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.NoisePoint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.NoisePoint.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.NoisePoint.op_Equality(SpiceSharp.Simulations.NoisePoint,SpiceSharp.Simulations.NoisePoint)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.NoisePoint.op_Inequality(SpiceSharp.Simulations.NoisePoint,SpiceSharp.Simulations.NoisePoint)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.NoiseSource">
            <summary>
            A basic implementation of a <see cref="T:SpiceSharp.Simulations.INoiseSource"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.INoiseSource" />
        </member>
        <member name="P:SpiceSharp.Simulations.NoiseSource.Name">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.NoiseSource.OutputNoiseDensity">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.NoiseSource.TotalOutputNoise">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.NoiseSource.TotalInputNoise">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.NoiseSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.NoiseSource"/> class.
            </summary>
            <param name="name">The name of the noise source.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.NoiseSource.Initialize">
            <summary>
            Resets all the integrated noise, and uses the 
            output noise density as the initial point.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.NoiseSource.Integrate(SpiceSharp.Simulations.INoiseSimulationState)">
            <summary>
            Integrates the noise density into the total integrated noise figures.
            It computes the integration assuming that noise = a * frequency^exponent. It
            automatically tracks the noise density from one point to the next.
            </summary>
            <param name="state">The noise simulation state.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="state"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the simulation state does not store enough points in history.</exception>
        </member>
        <member name="T:SpiceSharp.Simulations.OP">
            <summary>
            Class that implements the operating point analysis.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.BiasingSimulation" />
        </member>
        <member name="F:SpiceSharp.Simulations.OP.ExportOperatingPoint">
            <summary>
            The constant returned when exporting the operating point.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.OP.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.OP"/> class.
            </summary>
            <param name="name">The name of the simulation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.OP.Execute(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.Breakpoints">
            <summary>
            A collection of breakpoints used for time-domain analysis.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.Breakpoints.MinBreak">
            <summary>
            Gets the minimum space between two breakpoints.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.Breakpoints.First">
            <summary>
            Gets the first breakpoint.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.Breakpoints.Delta">
            <summary>
            Gets the timestep set by the first two breakpoints.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.IntegrationMethods.Breakpoints._bps">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Breakpoints.SetBreakpoint(System.Double)">
            <summary>
            Adds a breakpoint to the list.
            </summary>
            <param name="timePoint">The time point.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Breakpoints.ClearBreakpoint">
            <summary>
            Clears a breakpoint.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Breakpoints.Clear">
            <summary>
            Clears all breakpoints.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.IBreakpointMethod">
            <summary>
            Interface of an integration method that supports breakpoints. The
            integration method makes sure the breakpoint timepoints are hit.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IIntegrationMethod"/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.IBreakpointMethod.Breakpoints">
            <summary>
            Gets the breakpoint system.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.IBreakpointMethod.Break">
            <summary>
            Gets a value indicating whether this point is the first after a breakpoint.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.FixedEuler">
            <summary>
            A configuration that allows doing transient analysis using a fixed-timestep backward Euler integration method.
            This method is one of the fastest, but can also lead to more inaccurate results.
            Reducing the timestep will improve the truncation errors, but can worsen numerical accuracy.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.TimeParameters" />
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Step">
            <summary>
            Gets or sets the timestep.
            </summary>
            <value>
            The timestep.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if the timestep is negative or zero.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Create(SpiceSharp.Simulations.IBiasingSimulationState)">
            <summary>
            Creates an instance of the integration method.
            </summary>
            <param name="state">The biasing simulation state that will be used as a base.</param>
            <returns>
            The integration method.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.IIntegrationMethod"/> for <see cref="T:SpiceSharp.Simulations.IntegrationMethods.FixedEuler"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IIntegrationMethod" />
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.MaxOrder">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.Order">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.BaseTime">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.Time">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.Slope">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.#ctor(SpiceSharp.Simulations.IntegrationMethods.FixedEuler)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance"/> class.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.RegisterState(SpiceSharp.Simulations.IIntegrationState)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.CreateDerivative(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.CreateIntegral(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.GetPreviousSolution(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.GetPreviousTimestep(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.Prepare">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.Probe">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.Evaluate(System.Double)">
            <inheritdoc/>
            <remarks>
            This method ignores any timesteps!
            </remarks>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.Accept">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.Reject">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.Truncate(System.Double)">
            <inheritdoc/>
            <remarks>
            This method ignores any timesteps!
            </remarks>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.DerivativeInstance">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.IDerivative"/> for <see cref="T:SpiceSharp.Simulations.IntegrationMethods.FixedEuler"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IDerivative" />
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.DerivativeInstance.Value">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.DerivativeInstance.Derivative">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.DerivativeInstance.#ctor(SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.DerivativeInstance"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.DerivativeInstance.GetContributions(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.DerivativeInstance.GetContributions(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.DerivativeInstance.GetPreviousDerivative(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.DerivativeInstance.GetPreviousValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.DerivativeInstance.Derive">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.IntegralInstance">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.IIntegral"/> for <see cref="T:SpiceSharp.Simulations.IntegrationMethods.FixedEuler"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IIntegral"/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.IntegralInstance.Value">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.IntegralInstance.Derivative">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.IntegralInstance.#ctor(SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.IntegralInstance"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.IntegralInstance.GetContributions(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.IntegralInstance.GetContributions(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.IntegralInstance.GetPreviousValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.IntegralInstance.GetPreviousDerivative(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.Instance.IntegralInstance.Integrate">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.SpiceSharp#ParameterSets#IImportParameterSet{System#Boolean}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.SpiceSharp#ParameterSets#IExportPropertySet{System#Boolean}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.SpiceSharp#ParameterSets#IImportParameterSet{System#Int32}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedEuler.SpiceSharp#ParameterSets#IExportPropertySet{System#Int32}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal">
            <summary>
            A configuration that allows doing transient analysis using a fixed-timestep trapezoidal integration method.
            This method is pretty fast, but can also lead to more inaccurate results.
            Reducing the timestep will improve the truncation errors, but can worsen numerical accuracy.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.TimeParameters"/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Step">
            <summary>
            Gets or sets the timestep.
            </summary>
            <value>
            The timestep.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Xmu">
            <summary>
            Gets the xmu constant.
            </summary>
            <value>
            The xmu constant.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Create(SpiceSharp.Simulations.IBiasingSimulationState)">
            <summary>
            Creates an instance of the integration method.
            </summary>
            <param name="state">The biasing simulation state that will be used as a base.</param>
            <returns>
            The integration method.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.IIntegrationMethod"/> for <see cref="T:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IIntegrationMethod"/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.MaxOrder">
            <inheritdoc />
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.Order">
            <inheritdoc />
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.BaseTime">
            <inheritdoc />
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.Time">
            <inheritdoc />
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.Slope">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.#ctor(SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal)">
            <summary>
            Creates a new <see cref="T:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance"/>.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.RegisterState(SpiceSharp.Simulations.IIntegrationState)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.CreateDerivative(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.CreateIntegral(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.GetPreviousSolution(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.GetPreviousTimestep(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.Initialize">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.Prepare">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.Probe">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.Evaluate(System.Double)">
            <inheritdoc />
            <remarks>
            This method ignores any variable timesteps!
            </remarks>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.Accept">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.Reject">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.Truncate(System.Double)">
            <inheritdoc />
            <remarks>
            This method ignores any variable timesteps!
            </remarks>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.DerivativeInstance">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.IDerivative"/> for <see cref="T:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IDerivative"/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.DerivativeInstance.Derivative">
            <inheritdoc />
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.DerivativeInstance.Value">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.DerivativeInstance.#ctor(SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance,System.Int32)">
            <summary>
            Creates a new <see cref="T:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.DerivativeInstance"/>.
            </summary>
            <param name="method">The integration method.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.DerivativeInstance.GetContributions(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.DerivativeInstance.GetContributions(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.DerivativeInstance.GetPreviousDerivative(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.DerivativeInstance.GetPreviousValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.DerivativeInstance.Derive">
            <inheritdoc />
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.IntegralInstance">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.IIntegral"/> for <see cref="T:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IIntegral"/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.IntegralInstance.Derivative">
            <inheritdoc />
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.IntegralInstance.Value">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.IntegralInstance.#ctor(SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance,System.Int32)">
            <summary>
            Creates a new <see cref="T:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.IntegralInstance"/>.
            </summary>
            <param name="method">The integration method.</param>
            <param name="index">The index in the vector.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.IntegralInstance.GetContributions(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.IntegralInstance.GetContributions(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.IntegralInstance.GetPreviousValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.IntegralInstance.GetPreviousDerivative(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.Instance.IntegralInstance.Integrate">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.SpiceSharp#ParameterSets#IImportParameterSet{System#Boolean}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.SpiceSharp#ParameterSets#IExportPropertySet{System#Boolean}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.SpiceSharp#ParameterSets#IImportParameterSet{System#Int32}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.FixedTrapezoidal.SpiceSharp#ParameterSets#IExportPropertySet{System#Int32}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.ITruncatable">
            <summary>
            This interface indicates that the class is capable of truncating a timestep in some way.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.ITruncatable.Truncate">
            <summary>
            Truncates the current timestep.
            </summary>
            <returns>
            The maximum timestep allowed by this instance.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.Gear">
            <summary>
            A class that implements the Gear integration method.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod" />
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.Create(SpiceSharp.Simulations.IBiasingSimulationState)">
            <summary>
            Creates an instance of the integration method.
            </summary>
            <param name="state">The biasing simulation state that will be used as a base.</param>
            <returns>
            The integration method.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.IIntegrationMethod"/> that implements the Gear integration method.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance" />
            <seealso cref="T:SpiceSharp.Simulations.IIntegrationMethod" />
        </member>
        <member name="F:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.Coefficients">
            <summary>
            The integration coefficients.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.PredictionCoefficients">
            <summary>
            The prediction coefficients.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.Solver">
            <summary>
            The solver used to calculate the coefficients.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.#ctor(SpiceSharp.Simulations.IntegrationMethods.Gear,SpiceSharp.Simulations.IBiasingSimulationState)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance" /> class.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="state">The biasing simulation state.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.CreateDerivative(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.CreateIntegral(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.ComputeCoefficients">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.Predict">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.DerivativeInstance">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.IDerivative"/> for <see cref="T:SpiceSharp.Simulations.IntegrationMethods.Gear"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IDerivative" />
            <seealso cref="T:SpiceSharp.Simulations.IntegrationMethods.ITruncatable" />
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.DerivativeInstance.Derivative">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.DerivativeInstance.Value">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.DerivativeInstance.#ctor(SpiceSharp.Simulations.IntegrationMethods.Gear.Instance,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.DerivativeInstance"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.DerivativeInstance.GetContributions(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.DerivativeInstance.GetContributions(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.DerivativeInstance.GetPreviousValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.DerivativeInstance.GetPreviousDerivative(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.DerivativeInstance.Derive">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.DerivativeInstance.Truncate">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.IntegralInstance">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.IIntegral"/> for <see cref="T:SpiceSharp.Simulations.IntegrationMethods.Gear"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IIntegral"/>
            <seealso cref="T:SpiceSharp.Simulations.IntegrationMethods.ITruncatable"/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.IntegralInstance.Derivative">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.IntegralInstance.Value">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.IntegralInstance.#ctor(SpiceSharp.Simulations.IntegrationMethods.Gear.Instance,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.IntegralInstance"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.IntegralInstance.GetContributions(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.IntegralInstance.GetContributions(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.IntegralInstance.GetPreviousValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.IntegralInstance.GetPreviousDerivative(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.IntegralInstance.Integrate">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.IntegralInstance.Truncate">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.NodeTruncation">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.IntegrationMethods.ITruncatable"/> that looks at simulation variables.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IntegrationMethods.ITruncatable" />
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.NodeTruncation.#ctor(SpiceSharp.Simulations.IntegrationMethods.Gear.Instance)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.NodeTruncation"/> class.
            </summary>
            <param name="method">The integration method.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.Instance.NodeTruncation.Truncate">
            <summary>
            Truncates the current timestep.
            </summary>
            <returns>
            The maximum timestep allowed by this state.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.SpiceSharp#ParameterSets#IImportParameterSet{System#Boolean}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.SpiceSharp#ParameterSets#IExportPropertySet{System#Boolean}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.SpiceSharp#ParameterSets#IImportParameterSet{System#Int32}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Gear.SpiceSharp#ParameterSets#IExportPropertySet{System#Int32}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.SpiceIntegrationState">
            <summary>
            Represents the state of an integration method at a certain time point.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceIntegrationState.Delta">
            <summary>
            Gets or sets the timestep.
            </summary>
            <value>
            The delta.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceIntegrationState.Solution">
            <summary>
            Gets the associated solution with the timepoint.
            </summary>
            <value>
            The solution.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceIntegrationState.State">
            <summary>
            Gets the states allocated by entities at this timepoint.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.SpiceIntegrationState.#ctor(System.Double,SpiceSharp.Algebra.IVector{System.Double},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.IntegrationMethods.SpiceIntegrationState"/> class.
            </summary>
            <param name="delta">The timestep.</param>
            <param name="solution">The solution.</param>
            <param name="states">The number of states to keep for derivatives.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod">
            <summary>
            A default integration method as implemented by most Spice simulators.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.InitialStep">
            <summary>
            Gets or sets the initial timestep.
            </summary>
            <value>
            The initial timestep.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.AbsoluteTolerance">
            <summary>
            Gets or sets the absolute tolerance.
            </summary>
            <value>
            The absolute tolerance.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.ChargeTolerance">
            <summary>
            The tolerance on charge.
            </summary>
            <value>
            The charge tolerance.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.RelativeTolerance">
            <summary>
            Gets or sets the relative tolerance.
            </summary>
            <value>
            The relative tolerance.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.TrTol">
            <summary>
            Gets or sets the transient tolerance factor.
            </summary>
            <value>
            The transient tolerance factor.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.LteRelTol">
            <summary>
            The local truncation error relative tolerance.
            </summary>
            <value>
            The relative tolerance.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.LteAbsTol">
            <summary>
            The local truncation error absolute tolerance.
            </summary>
            <value>
            The aboslute tolerance.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.TruncateNodes">
            <summary>
            Gets or sets a value indicating whether node voltages should be used to truncate the timestep.
            </summary>
            <value>
              <c>true</c> if node voltages are used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance">
            <summary>
            An instance of a Spice-based integration method.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IntegrationMethods.IBreakpointMethod"/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.Delta">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.State">
            <summary>
            Gets the simulation state that keeps track of the simulation.
            </summary>
            <value>
            The simulation.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.States">
            <summary>
            Gets the history of integration states.
            </summary>
            <value>
            The history of integration states.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.RegisteredStates">
            <summary>
            Gets the registered states.
            </summary>
            <value>
            The registered states.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.TruncatableStates">
            <summary>
            Gets the truncatable states.
            </summary>
            <value>
            The truncatable states.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.Breakpoints">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.Break">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.MaxOrder">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.Order">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.BaseTime">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.Time">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.Slope">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.Prediction">
            <summary>
            Gets the prediction.
            </summary>
            <value>
            The prediction.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.#ctor(SpiceSharp.Simulations.IntegrationMethods.SpiceMethod,SpiceSharp.Simulations.IBiasingSimulationState,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance"/> class.
            </summary>
            <param name="parameters">The method description.</param>
            <param name="state">The biasing simulation state.</param>
            <param name="maxOrder">The maximum order.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.CreateDerivative(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.CreateIntegral(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.GetPreviousSolution(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.GetPreviousTimestep(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.RegisterState(SpiceSharp.Simulations.IIntegrationState)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.Prepare">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.Probe">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.ComputeCoefficients">
            <summary>
            Computes the integration coefficients.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.Predict">
            <summary>
            Predicts a solution for truncation.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.Accept">
            <summary>
            Accepts a solution at the current timepoint.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.Reject">
            <summary>
            Rejects the last probed timepoint as a valid solution. This method can be called if no solution could be found (eg. due to non-convergence).
            </summary>
            <exception cref="T:SpiceSharp.TimestepTooSmallException">Thrown when the timestep became too small.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.Evaluate(System.Double)">
            <inheritdoc/>
            <exception cref="T:SpiceSharp.TimestepTooSmallException">Thrown when the timestep is too small.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance.Truncate(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal">
            <summary>
            A class that implements the trapezoidal integration method as
            implemented by Spice 3f5.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod" />
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Xmu">
            <summary>
            Gets the xmu constant.
            </summary>
            <value>
            The xmu constant.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Create(SpiceSharp.Simulations.IBiasingSimulationState)">
            <summary>
            Creates an instance of the integration method for an associated <see cref="T:SpiceSharp.Simulations.IBiasingSimulationState" />.
            </summary>
            <param name="state">The simulation that provides the biasing state.</param>
            <returns>
            The integration method.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.IIntegrationMethod"/> that implements the trapezoidal method.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IntegrationMethods.SpiceMethod.SpiceInstance" />
        </member>
        <member name="F:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.Coefficients">
            <summary>
            The integration coefficients.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.#ctor(SpiceSharp.Simulations.IntegrationMethods.Trapezoidal,SpiceSharp.Simulations.IBiasingSimulationState)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance"/> class.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="state">The biasing simulation state.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.CreateDerivative(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.CreateIntegral(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.ComputeCoefficients">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.Predict">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.DerivativeInstance">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.IDerivative"/> for <see cref="T:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IDerivative" />
            <seealso cref="T:SpiceSharp.Simulations.IntegrationMethods.ITruncatable"/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.DerivativeInstance.Derivative">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.DerivativeInstance.Value">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.DerivativeInstance.#ctor(SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.DerivativeInstance"/> class.
            </summary>
            <param name="method">The integration method.</param>
            <param name="index">The integrated value index.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.DerivativeInstance.GetContributions(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.DerivativeInstance.GetContributions(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.DerivativeInstance.GetPreviousValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.DerivativeInstance.GetPreviousDerivative(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.DerivativeInstance.Derive">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.DerivativeInstance.Truncate">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.IntegralInstance">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.IIntegral"/> for <see cref="T:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IIntegral"/>
            <seealso cref="T:SpiceSharp.Simulations.IntegrationMethods.ITruncatable"/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.IntegralInstance.Derivative">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.IntegralInstance.Value">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.IntegralInstance.#ctor(SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.IntegralInstance"/> class.
            </summary>
            <param name="method">The integration method.</param>
            <param name="index">The derivative value index.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.IntegralInstance.GetContributions(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.IntegralInstance.GetContributions(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.IntegralInstance.GetPreviousValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.IntegralInstance.GetPreviousDerivative(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.IntegralInstance.Integrate">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.IntegralInstance.Truncate">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.NodeTruncation">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.IntegrationMethods.ITruncatable"/> that looks at simulation variables.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IntegrationMethods.ITruncatable" />
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.NodeTruncation.#ctor(SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.NodeTruncation"/> class.
            </summary>
            <param name="method">The integration method.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.Instance.NodeTruncation.Truncate">
            <summary>
            Truncates the current timestep.
            </summary>
            <returns>
            The maximum timestep allowed by this state.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.SpiceSharp#ParameterSets#IImportParameterSet{System#Double}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.SpiceSharp#ParameterSets#IExportPropertySet{System#Double}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.SpiceSharp#ParameterSets#IImportParameterSet{System#Boolean}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.SpiceSharp#ParameterSets#IExportPropertySet{System#Boolean}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.SpiceSharp#ParameterSets#IImportParameterSet{System#Int32}#GetParameterSetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.Trapezoidal.SpiceSharp#ParameterSets#IExportPropertySet{System#Int32}#GetPropertyGetter(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.StateValue`1">
            <summary>
            An integration state that can track a value of a specified type.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <seealso cref="T:SpiceSharp.Simulations.IIntegrationState" />
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.StateValue`1.Value">
            <summary>
            Gets or sets the current value.
            </summary>
            <value>
            The current value.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.StateValue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.IntegrationMethods.StateValue`1"/> class.
            </summary>
            <param name="length">The number of points to be tracked.</param>
            <exception cref="T:System.ArgumentException">Thrown if the number of points is smaller than 1.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.StateValue`1.#ctor(SpiceSharp.Simulations.IHistory{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.IntegrationMethods.StateValue`1"/> class.
            </summary>
            <param name="history">The history.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.StateValue`1.Accept">
            <summary>
            Accepts the current point and moves on to the next.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.IntegrationMethods.StateValue`1.GetPreviousValue(System.Int32)">
            <summary>
            Gets a previous value of the state. An index of 0 indicates the current value.
            </summary>
            <param name="index">The number of points to go back in time.</param>
            <returns>
            The previous value.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.VariableTimestepConfiguration">
            <summary>
            A configuration for an integration method that has a variable timestep.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.TimeParameters" />
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.VariableTimestepConfiguration.MaxStep">
            <summary>
            Gets or sets the maximum step.
            If the maximum timestep is 0.0, a maximum timestep is chosen of 1/50 the time range.
            </summary>
            <value>
            The maximum timestep.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if the specified timestep is negative.</exception>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.VariableTimestepConfiguration.MinStep">
            <summary>
            Gets or sets the minimum step.
            If the minimum timestep is 0.0, a minimum timestep is chosen of 1e-9 * <see cref="P:SpiceSharp.Simulations.IntegrationMethods.VariableTimestepConfiguration.MaxStep"/>.
            </summary>
            <value>
            The minimum timestep.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if the specified timestep is negative.</exception>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.VariableTimestepConfiguration.MaximumExpansion">
            <summary>
            Gets or sets the maximum timestep expansion factor.
            </summary>
            <value>
            The maximum timestep expansion factor.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if the expansion factor is less than 1.</exception>
        </member>
        <member name="T:SpiceSharp.Simulations.IDerivative">
            <summary>
            Describes a state with a value that can also calculate the
            derivative with respect to time.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.IDerivative.Value">
            <summary>
            Gets or sets the current value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IDerivative.Derivative">
            <summary>
            Gets the current derivative.
            </summary>
            <value>
            The derivative.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.IDerivative.GetPreviousValue(System.Int32)">
            <summary>
            Gets a previous value. An index of 0 indicates the current value.
            </summary>
            <param name="index">The index.</param>
            <returns>
            The previous value.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.IDerivative.GetPreviousDerivative(System.Int32)">
            <summary>
            Gets a previous derivative. An index of 0 indicates the current value.
            </summary>
            <param name="index">The number of points to go back in time.</param>
            <returns>
            The previous derivative.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.IDerivative.GetContributions(System.Double,System.Double)">
            <summary>
            Gets the Y-matrix value and Rhs-vector contributions for the derived quantity.
            </summary>
            <param name="coefficient">The coefficient of the quantity that is derived.</param>
            <param name="currentValue">The current value of the derived state.</param>
            <returns>The information for filling in the Y-matrix and Rhs-vector.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.IDerivative.GetContributions(System.Double)">
            <summary>
            Gets the Y-matrix value and Rhs-vector contributions for the derived quantity.
            The relationship is assumed to be linear.
            </summary>
            <param name="coefficient">The coefficient of the quantity that is derived.</param>
            <returns>The information for filling in the Y-matrix and Rhs-vector.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.IDerivative.Derive">
            <summary>
            Integrates the state (calculates the derivative from the value).
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.IIntegral">
            <summary>
            Describes a state with a derivative that can also calculate the
            integrated value with respect tjo time.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.IIntegral.Value">
            <summary>
            Gets the current value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IIntegral.Derivative">
            <summary>
            Gets or sets the current derivative.
            </summary>
            <value>
            The derivative.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.IIntegral.GetPreviousValue(System.Int32)">
            <summary>
            Gets a previous value. An index of 0 indicates the current value.
            </summary>
            <param name="index">The number of points to go back in time.</param>
            <returns>
            The previous value.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.IIntegral.GetPreviousDerivative(System.Int32)">
            <summary>
            Gets a previous derivative. An index of 0 indicates the current derivative.
            </summary>
            <param name="index">The number of points to go back in time.</param>
            <returns>
            The previous value.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.IIntegral.GetContributions(System.Double,System.Double)">
            <summary>
            Gets the Y-matrix value and Rhs-vector contributions for the integrated quantity.
            </summary>
            <param name="coefficient">The coefficient of the quantity that is integrated.</param>
            <param name="currentValue">The current value of the integrated state.</param>
            <returns>The information for fijlling in the Y-matrix and Rhs-vector.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.IIntegral.GetContributions(System.Double)">
            <summary>
            Gets the Y-matrix value and Rhs-vector contributions for the derived quantity.
            The relationship is assumed to be linear.
            </summary>
            <param name="coefficient">The coefficient of the quantity that is integrated.</param>
            <returns>The information for filling in the Y-matrix and Rhs-vector.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.IIntegral.Integrate">
            <summary>
            Integrates the state (calculates the value from the derivative).
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.IIntegrationMethod">
            <summary>
            An interface describing an integration method.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.ISimulationState"/>.
        </member>
        <member name="P:SpiceSharp.Simulations.IIntegrationMethod.MaxOrder">
            <summary>
            Gets the maximum order of the integration method.
            </summary>
            <value>
            The maximum order.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IIntegrationMethod.Order">
            <summary>
            Gets or sets the current order of the integration method.
            </summary>
            <value>
            The current order.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IIntegrationMethod.BaseTime">
            <summary>
            Gets the base timepoint in seconds from which the current timepoint is being probed.
            </summary>
            <value>
            The base time.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IIntegrationMethod.Time">
            <summary>
            Gets the currently probed timepoint in seconds.
            </summary>
            <value>
            The current time.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IIntegrationMethod.Slope">
            <summary>
            Gets the derivative factor of any quantity that is being derived
            by the integration method.
            </summary>
            <value>
            The slope.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.IIntegrationMethod.RegisterState(SpiceSharp.Simulations.IIntegrationState)">
            <summary>
            Registers an integration state with the integration method.
            </summary>
            <param name="state">The integration state.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.IIntegrationMethod.CreateDerivative(System.Boolean)">
            <summary>
            Creates a derivative.
            </summary>
            <param name="track">If set to <c>true</c>, the integration method will use this state to limit truncation errors.</param>
            <returns>The derivative.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.IIntegrationMethod.CreateIntegral(System.Boolean)">
            <summary>
            Creates an integrator.
            </summary>
            <param name="track">If set to <c>true</c>, the integration method will use this state to limit truncation errors.</param>
            <returns>The integrator.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.IIntegrationMethod.GetPreviousSolution(System.Int32)">
            <summary>
            Gets a previous solution used by the integration method. An index of 0 indicates the last accepted solution.
            </summary>
            <param name="index">The number of points to go back.</param>
            <returns>
            The previous solution.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.IIntegrationMethod.GetPreviousTimestep(System.Int32)">
            <summary>
            Gets a previous timestep. An index of 0 indicates the current timestep.
            </summary>
            <param name="index">The number of points to go back.</param>
            <returns>
            The previous timestep.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.IIntegrationMethod.Initialize">
            <summary>
            Initializes the integration method using the allocated biasing state.
            At this point, all entities should have received the chance to allocate and register integration states.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.IIntegrationMethod.Accept">
            <summary>
            Accepts a solution at the current timepoint.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.IIntegrationMethod.Prepare">
            <summary>
            Prepares the integration method for calculating the next timepoint.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.IIntegrationMethod.Probe">
            <summary>
            Probes a new timepoint.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.IIntegrationMethod.Evaluate(System.Double)">
            <summary>
            Evaluates the current solution at the probed timepoint. If the solution is invalid,
            the analysis should roll back and try again.
            </summary>
            <returns>
            <c>true</c> if the current solution is a valid solution; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="maxTimestep"/> is not positive.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.IIntegrationMethod.Reject">
            <summary>
            Rejects the last probed timepoint as a valid solution. This method can be called if no solution could be found (eg. due to non-convergence).
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.IIntegrationMethod.Truncate(System.Double)">
            <summary>
            Truncate the current timestep.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="maxTimestep"/> is not positive.</exception>
        </member>
        <member name="T:SpiceSharp.Simulations.IIntegrationState">
            <summary>
            Describes a general state with a history for a <see cref="T:SpiceSharp.Simulations.IIntegrationMethod"/>.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.IIntegrationState.Accept">
            <summary>
            Accepts the current point and moves on to the next.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.JacobianInfo">
            <summary>
            Information for filling in the Jacobian matrix and right-hand-side vector.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.JacobianInfo.Jacobian">
            <summary>
            Gets the jacobian.
            </summary>
            <value>
            The jacobian.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.JacobianInfo.Rhs">
            <summary>
            Gets the right-hand-side value.
            </summary>
            <value>
            The right-hand-side value.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.JacobianInfo.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.JacobianInfo"/> struct.
            </summary>
            <param name="jacobian">The jacobian.</param>
            <param name="rhs">The right-hand-side value.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.JacobianInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.JacobianInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.JacobianInfo.op_Equality(SpiceSharp.Simulations.JacobianInfo,SpiceSharp.Simulations.JacobianInfo)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.JacobianInfo.op_Inequality(SpiceSharp.Simulations.JacobianInfo,SpiceSharp.Simulations.JacobianInfo)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.ITimeSimulation">
            <summary>
            An interface that describes a class that can do transient analysis.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IBiasingSimulation" />
            <seealso cref="T:SpiceSharp.Simulations.IBehavioral`1" />
            <seealso cref="T:SpiceSharp.Simulations.IStateful`1" />
        </member>
        <member name="T:SpiceSharp.Simulations.ITimeSimulationState">
            <summary>
            An <see cref="T:SpiceSharp.Simulations.ISimulationState"/> for a <see cref="T:SpiceSharp.Simulations.Transient"/> analysis.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.ISimulationState" />
        </member>
        <member name="P:SpiceSharp.Simulations.ITimeSimulationState.UseDc">
            <summary>
            Gets or sets the flag for ignoring time-related effects. 
            If true, each device should assume the circuit is not moving in time.
            </summary>
            <value>
            <c>true</c> if the simulation only wants the DC solution; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.ITimeSimulationState.UseIc">
            <summary>
            Gets or sets the flag for using initial conditions.
            If true, the operating point will not be calculated, and initial conditions will be used instead.
            </summary>
            <value>
            <c>true</c> if entities should use their own initial conditions; otherwise <c>false</c>.
            </value>
        </member>
        <member name="T:SpiceSharp.Simulations.TimeParameters">
            <summary>
            A configuration for a <see cref="T:SpiceSharp.Simulations.ITimeSimulation"/> with all the necessary parameters to do a transient analysis.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
        </member>
        <member name="F:SpiceSharp.Simulations.TimeParameters._startTime">
            <summary>
            Gets or sets the start time.
            </summary>
            <value>
            The start time.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if the timepoint is negative.</exception>
        </member>
        <member name="F:SpiceSharp.Simulations.TimeParameters._stopTime">
            <summary>
            Gets or sets the stop time.
            </summary>
            <value>
            The stop time.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if the timepoint is negative.</exception>
        </member>
        <member name="P:SpiceSharp.Simulations.TimeParameters.UseIc">
            <summary>
            Gets or sets a value indicating whether initial conditions should be set by the entities.
            </summary>
            <value>
              <c>true</c> if initial conditions; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:SpiceSharp.Simulations.TimeParameters._transientMaxIterations">
            <summary>
            Gets or sets the transient maximum iterations.
            </summary>
            <value>
            The transient maximum iterations.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.TimeParameters.InitialConditions">
            <summary>
            Gets the initial conditions.
            </summary>
            <value>
            The initial conditions.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.TimeParameters.Validate">
            <summary>
            Gets or sets a value indicating whether the simulation should be validated.
            </summary>
            <value>
              <c>true</c> if the simulation should be validated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.TimeParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.TimeParameters"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.TimeParameters.#ctor(System.Collections.Generic.Dictionary{System.String,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.TimeParameters"/> class.
            </summary>
            <param name="ic">The initial conditions.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.TimeParameters.Create(SpiceSharp.Simulations.IBiasingSimulationState)">
            <summary>
            Creates an instance of the integration method.
            </summary>
            <param name="state">The biasing simulation state that will be used as a base.</param>
            <returns>
            The integration method.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.TimeParameters.Clone">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.TimeParameters.StopTime">
            <summary>
            Gets or sets the stop time.
            </summary>
            <value>
            The stop time.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if the timepoint is negative.</exception>
        </member>
        <member name="P:SpiceSharp.Simulations.TimeParameters.TransientMaxIterations">
            <summary>
            Gets or sets the transient maximum iterations.
            </summary>
            <value>
            The transient maximum iterations.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.TimeParameters.StartTime">
            <summary>
            Gets or sets the start time.
            </summary>
            <value>
            The start time.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if the timepoint is negative.</exception>
        </member>
        <member name="T:SpiceSharp.Simulations.Time.TimeSimulationStatistics">
            <summary>
            Statistics for a <see cref="T:SpiceSharp.Simulations.Time.TimeSimulationStatistics" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Time.TimeSimulationStatistics.TimePoints">
            <summary>
            Gets the number of time points calculated.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Time.TimeSimulationStatistics.TransientIterations">
            <summary>
            Gets the number of transient iterations.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Time.TimeSimulationStatistics.TransientTime">
            <summary>
            Gets the time spent on transient analysis.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Time.TimeSimulationStatistics.TransientSolveTime">
            <summary>
            Gets the time spent on solving a transient analysis.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Time.TimeSimulationStatistics.Accepted">
            <summary>
            Gets the number of accepted time points.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Time.TimeSimulationStatistics.Rejected">
            <summary>
            Gets the number of rejected time points.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.Time.TimeSimulationStatistics.Reset">
            <summary>
            Reset the statistics.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.Transient">
            <summary>
            A base class for time-domain analysis.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.BiasingSimulation" />
        </member>
        <member name="F:SpiceSharp.Simulations.Transient._transientBehaviors">
            <summary>
            Time-domain behaviors.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Transient.ExportOperatingPoint">
            <summary>
            The constant returned when exporting the operating point.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Transient.ExportTransient">
            <summary>
            The constant returned when exporting a transient point.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Transient.TimeParameters">
            <summary>
            Gets the time parameters.
            </summary>
            <value>
            The time parameters.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.Transient.Statistics">
            <summary>
            Gets the statistics.
            </summary>
            <value>
            The statistics.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.Transient.SpiceSharp#ParameterSets#IParameterized{SpiceSharp#Simulations#TimeParameters}#Parameters">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.Transient.SpiceSharp#Simulations#IStateful{SpiceSharp#Simulations#ITimeSimulationState}#State">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.Transient.SpiceSharp#Simulations#IStateful{SpiceSharp#Simulations#IIntegrationMethod}#State">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.Transient.Time">
            <summary>
            Gets the current time point.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.Transient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Transient"/> class.
            </summary>
            <param name="name">The name of the simulation.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Transient.#ctor(System.String,SpiceSharp.Simulations.TimeParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Transient"/> class.
            </summary>
            <param name="name">The name of the simulation.</param>
            <param name="parameters">The time parameters.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Transient.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Transient"/> class.
            </summary>
            <param name="name">The name of the simulation.</param>
            <param name="step">The step size.</param>
            <param name="final">The final time.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Transient.#ctor(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Transient"/> class.
            </summary>
            <param name="name">The name of the simulation.</param>
            <param name="step">The step size.</param>
            <param name="final">The final time.</param>
            <param name="maxStep">The maximum step.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Transient.CreateStates">
            <inheritdoc />
        </member>
        <member name="M:SpiceSharp.Simulations.Transient.CreateBehaviors(SpiceSharp.Entities.IEntityCollection)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.Transient.Validate(SpiceSharp.Entities.IEntityCollection)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.Transient.Execute(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.Transient.TimeIterate(System.Int32)">
            <summary>
            Iterates to a solution for time simulations.
            </summary>
            <param name="maxIterations">The maximum number of iterations.</param>
            <returns>
              <c>true</c> if the iterations converged to a solution; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Transient.InitializeStates">
            <summary>
            Initializes all transient behaviors to assume that the current solution is the DC solution.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.Transient.LoadInitialConditions(System.Object,SpiceSharp.Simulations.LoadStateEventArgs)">
            <summary>
            Applies initial conditions.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Arguments</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Transient.Accept">
            <summary>
            Accepts the current simulation state as a valid timepoint.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.Transient.Probe">
            <summary>
            Probe for a new time point.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Transient.SimulationState.UseDc">
            <summary>
            Gets or sets the flag for ignoring time-related effects. 
            If true, each device should assume the circuit is not moving in time.
            </summary>
            <value>
            <c>true</c> if the simulation only wants the DC solution; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.Transient.SimulationState.UseIc">
            <summary>
            Gets or sets the flag for using initial conditions.
            If true, the operating point will not be calculated, and initial conditions will be used instead.
            </summary>
            <value>
            <c>true</c> if entities should use their own initial conditions; otherwise <c>false</c>.
            </value>
        </member>
        <member name="T:SpiceSharp.Simulations.ISimulation`1">
            <summary>
            Interface that describes a simulation that outputs its solved variables.
            </summary>
            <typeparam name="V">The type of variables.</typeparam>
            <seealso cref="T:SpiceSharp.Simulations.ISimulation" />
        </member>
        <member name="P:SpiceSharp.Simulations.ISimulation`1.Solved">
            <summary>
            Gets the variables that are being solved by the simulation.
            </summary>
            <value>
            The variables.
            </value>
        </member>
        <member name="T:SpiceSharp.Simulations.ISimulation">
            <summary>
            Interface that describes a simulation.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.IStateful" />
            <seealso cref="T:SpiceSharp.Simulations.IBehavioral" />
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterSetCollection" />
        </member>
        <member name="P:SpiceSharp.Simulations.ISimulation.Name">
            <summary>
            Gets the name of the <see cref="T:SpiceSharp.Simulations.ISimulation"/>.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.ISimulation.CurrentRun">
            <summary>
            Gets the index of the current simulation run.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ISimulation.Repeat">
            <summary>
            If set, the simulation is repeated. The property is automatically reset
            at the start of an execution.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ISimulation.Status">
            <summary>
            Gets the current status of the <see cref="T:SpiceSharp.Simulations.ISimulation"/>.
            </summary>
            <value>
            The current status.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.ISimulation.Run(SpiceSharp.Entities.IEntityCollection,System.Int32)">
            <summary>
            Runs the <see cref="T:SpiceSharp.Simulations.ISimulation"/> on the specified <see cref="T:SpiceSharp.Entities.IEntityCollection"/>. Only one
            enumerable can run at any given time.
            </summary>
            <param name="entities">The entities.</param>
            <param name="mask">A bit mask for simulation export identifiers.</param>
            <returns>An enumerable that yields a type identifier every time new simulation data is available.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.ISimulation.Rerun(System.Int32)">
            <summary>
            Reruns the <see cref="T:SpiceSharp.Simulations.ISimulation"/> with the previous behaviors. Only one
            enumerable can run at any given time.
            </summary>
            <param name="mask">A bit mask for simulation export identifiers.</param>
            <returns>An enumerable that yields a type identifier every time new simulation data is available.</returns>
        </member>
        <member name="T:SpiceSharp.Simulations.Simulation">
            <summary>
            A template for any simulation.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSetCollection"/>
            <seealso cref="T:SpiceSharp.Simulations.ISimulation"/>
        </member>
        <member name="F:SpiceSharp.Simulations.Simulation.Exports">
            <summary>
            The bits that are reserved for exports.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Simulation.Actions">
            <summary>
            The bits that are reserved for actions.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Simulation.BeforeSetup">
            <summary>
            Represents the action before setting up behaviors.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Simulation.AfterSetup">
            <summary>
            Represents the action after setting up behaviors.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Simulation.BeforeValidation">
            <summary>
            Represents the action before validation.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Simulation.AfterValidation">
            <summary>
            Represents the action after validating.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Simulation.BeforeExecute">
            <summary>
            Represents the action before each execution.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Simulation.AfterExecute">
            <summary>
            Represents the action after each execution.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Simulation.BeforeUnsetup">
            <summary>
            Represents the action before cleaning up.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Simulation.AfterUnsetup">
            <summary>
            Represents the action after cleaning up.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Simulation.Status">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.Simulation.States">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.Simulation.Behaviors">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.Simulation.Name">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.Simulation.CurrentRun">
            <inheritdoc />
        </member>
        <member name="P:SpiceSharp.Simulations.Simulation.Repeat">
            <inheritdoc />
        </member>
        <member name="P:SpiceSharp.Simulations.Simulation.EntityBehaviors">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.Simulation.Statistics">
            <summary>
            Gets the statistics.
            </summary>
            <value>
            The statistics.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Simulation"/> class.
            </summary>
            <param name="name">The name of the simulation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.Run(SpiceSharp.Entities.IEntityCollection,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.Rerun(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.Setup(SpiceSharp.Entities.IEntityCollection)">
            <summary>
            Set up the simulation.
            </summary>
            <param name="entities">The entities that are included in the simulation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entities"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.CreateStates">
            <summary>
            Creates all the simulation states for the simulation.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.CreateBehaviors(SpiceSharp.Entities.IEntityCollection)">
            <summary>
            Creates all behaviors for the simulation.
            </summary>
            <param name="entities">The entities.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entities"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.Validate(SpiceSharp.Entities.IEntityCollection)">
            <summary>
            Validates the input.
            </summary>
            <param name="entities">The entities.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entities"/> is <c>null</c>.</exception>
            <exception cref="T:SpiceSharp.Simulations.ValidationFailedException">Thrown if the validation failed.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.Validate(SpiceSharp.Validation.IRules,SpiceSharp.Entities.IEntityCollection)">
            <summary>
            A default implementation for validating entities and behaviors using the specified rules.
            </summary>
            <param name="rules">The rules.</param>
            <param name="entities">The entities.</param>
            <exception cref="T:SpiceSharp.Simulations.ValidationFailedException">Thrown if the validation failed.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.Execute(System.Int32)">
            <summary>
            Executes the simulation.
            </summary>
            <param name="mask">A bit mask for simulation export identifiers.</param>
            <exception cref="T:SpiceSharp.SpiceSharpException">Thrown if the simulation can't continue.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.Finish">
            <summary>
            Finish the simulation.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.UsesBehaviors``1">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.UsesBehavior(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.GetState``1">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.TryGetState``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.UsesState``1">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Simulations.SimulationHelper">
            <summary>
            Helper methods for extracting data from an <see cref="T:SpiceSharp.Simulations.ISimulation"/>.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.SimulationHelper.TryGetVoltage(SpiceSharp.Simulations.ISimulation,SpiceSharp.Simulations.Base.Reference,System.Double@)">
            <summary>
            Tries to get a real voltage from a simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="name">The reference to the node.</param>
            <param name="result">The result.</param>
            <returns>Returns <c>true</c> if the voltage was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.SimulationHelper.GetVoltage(SpiceSharp.Simulations.ISimulation,SpiceSharp.Simulations.Base.Reference)">
            <summary>
            Gets a real voltage from a simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="name">The reference to the node.</param>
            <returns>Returns the value of the voltage.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the voltage could not be found.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.SimulationHelper.TryGetVoltage(SpiceSharp.Simulations.ISimulation,SpiceSharp.Simulations.Base.Reference,SpiceSharp.Simulations.Base.Reference,System.Double@)">
            <summary>
            Tries to get a real voltage from a simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="positive">The positive node reference.</param>
            <param name="negative">The negative node reference.</param>
            <param name="result">The result.</param>
            <returns>Returns <c>true</c> if the voltage was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.SimulationHelper.GetVoltage(SpiceSharp.Simulations.ISimulation,SpiceSharp.Simulations.Base.Reference,SpiceSharp.Simulations.Base.Reference)">
            <summary>
            Gets a real voltage from a simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="positive">The positive node reference.</param>
            <param name="negative">The negative node reference.</param>
            <returns>Returns the value of the voltage.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the voltage could not be found.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.SimulationHelper.TryGetCurrent(SpiceSharp.Simulations.ISimulation,SpiceSharp.Simulations.Base.Reference,System.Double@)">
            <summary>
            Tries to get a real current from a simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="entity">The name of the entity that defines the branch current.</param>
            <param name="result">The result.</param>
            <returns>Returns <c>true</c> if the voltage was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.SimulationHelper.GetCurrent(SpiceSharp.Simulations.ISimulation,SpiceSharp.Simulations.Base.Reference)">
            <summary>
            Gets a real current from a simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="entity">The entity reference.</param>
            <returns>Returns the value of the current.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the branch current could not be found.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.SimulationHelper.TryGetProperty(SpiceSharp.Simulations.ISimulation,SpiceSharp.Simulations.Base.Reference,System.String,System.Double@)">
            <summary>
            Tries to get a real property value from an entity behavior in a simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="entity">The name of the entity.</param>
            <param name="propertyName">The property name.</param>
            <param name="result">The result.</param>
            <returns>Returns the property value if found; otherwise, <c>NaN</c>.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.SimulationHelper.GetProperty(SpiceSharp.Simulations.ISimulation,SpiceSharp.Simulations.Base.Reference,System.String)">
            <summary>
            Gets a real property value from an entity behavior in a simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="entity">The name of the entity.</param>
            <param name="propertyName">The property name.</param>
            <returns>Returns the value of the property.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the entity or property could not be found.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.SimulationHelper.TryGetComplexVoltage(SpiceSharp.Simulations.ISimulation,SpiceSharp.Simulations.Base.Reference,System.Numerics.Complex@)">
            <summary>
            Tries to get a complex voltage from a simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="name">The reference to the node.</param>
            <param name="result">The result.</param>
            <returns>Returns <c>true</c> if the voltage was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.SimulationHelper.GetComplexVoltage(SpiceSharp.Simulations.ISimulation,SpiceSharp.Simulations.Base.Reference)">
            <summary>
            Gets a complex voltage from a simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="name">The reference to the node.</param>
            <returns>Returns the value of the voltage.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the voltage could not be found.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.SimulationHelper.TryGetComplexVoltage(SpiceSharp.Simulations.ISimulation,SpiceSharp.Simulations.Base.Reference,SpiceSharp.Simulations.Base.Reference,System.Numerics.Complex@)">
            <summary>
            Tries to get a complex voltage from a simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="positive">The positive node reference.</param>
            <param name="negative">The negative node reference.</param>
            <param name="result">The result.</param>
            <returns>Returns <c>true</c> if the voltage was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.SimulationHelper.GetComplexVoltage(SpiceSharp.Simulations.ISimulation,SpiceSharp.Simulations.Base.Reference,SpiceSharp.Simulations.Base.Reference)">
            <summary>
            Gets a complex voltage from a simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="positive">The positive node reference.</param>
            <param name="negative">The negative node reference.</param>
            <returns>Returns the value of the voltage.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the voltage could not be found.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.SimulationHelper.TryGetComplexCurrent(SpiceSharp.Simulations.ISimulation,SpiceSharp.Simulations.Base.Reference,System.Numerics.Complex@)">
            <summary>
            Tries to get a complex current from a simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="entity">The name of the entity that defines the branch current.</param>
            <param name="result">The result.</param>
            <returns>Returns <c>true</c> if the voltage was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.SimulationHelper.GetComplexCurrent(SpiceSharp.Simulations.ISimulation,SpiceSharp.Simulations.Base.Reference)">
            <summary>
            Gets a complex current from a simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="entity">The entity reference.</param>
            <returns>Returns the value of the current.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the branch current could not be found.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.SimulationHelper.TryGetComplexProperty(SpiceSharp.Simulations.ISimulation,SpiceSharp.Simulations.Base.Reference,System.String,System.Numerics.Complex@)">
            <summary>
            Tries to get a real property value from an entity behavior in a simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="entity">The name of the entity.</param>
            <param name="propertyName">The property name.</param>
            <param name="result">The result.</param>
            <returns>Returns the property value if found; otherwise, <c>NaN</c>.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.SimulationHelper.GetComplexProperty(SpiceSharp.Simulations.ISimulation,SpiceSharp.Simulations.Base.Reference,System.String)">
            <summary>
            Gets a real property value from an entity behavior in a simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="entity">The name of the entity.</param>
            <param name="propertyName">The property name.</param>
            <returns>Returns the value of the property.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the entity or property could not be found.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.SimulationHelper.RunToEnd(SpiceSharp.Simulations.ISimulation,SpiceSharp.Entities.IEntityCollection,System.Collections.Generic.IDictionary{System.Int32,System.Action})">
            <summary>
            Runs a simulation to the end.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="entities">The entities.</param>
            <param name="actions">The actions for each type of export.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.SimulationStatistics">
            <summary>
            Statistics for a <see cref="T:SpiceSharp.Simulations.Simulation" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.SimulationStatistics.SetupTime">
            <summary>
            Gets the time spent during setup.
            </summary>
            <value>
            The setup time.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.SimulationStatistics.ValidationTime">
            <summary>
            Gets the time spent during validation.
            </summary>
            <value>
            The validation time.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.SimulationStatistics.ExecutionTime">
            <summary>
            Gets the time spent during execution.
            </summary>
            <value>
            The execution time.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.SimulationStatistics.FinishTime">
            <summary>
            Gets the time spent during unsetup.
            </summary>
            <value>
            The unsetup time.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.SimulationStatistics.BehaviorCreationTime">
            <summary>
            Gets the time spent creating behaviors.
            </summary>
            <value>
            The behavior creation time.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.SimulationStatistics.Reset">
            <summary>
            Clear all statistics
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.SimulationStatus">
            <summary>
            Possible statuses for a simulation.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.SimulationStatus.None">
            <summary>
            Indicates that the simulation has not started.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.SimulationStatus.Setup">
            <summary>
            Indicates that the simulation is now in its setup phase.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.SimulationStatus.Validation">
            <summary>
            Indicates that the simulation is validating the input.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.SimulationStatus.Running">
            <summary>
            Indicates that the simulation is running.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.SimulationStatus.Unsetup">
            <summary>
            Indicates that the simulation is cleaning up all its resources.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.Histories.ArrayHistory`1">
            <summary>
            A class that implements a history with an array.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <seealso cref="T:SpiceSharp.Simulations.IHistory`1" />
        </member>
        <member name="P:SpiceSharp.Simulations.Histories.ArrayHistory`1.Value">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Histories.ArrayHistory`1.Length">
            <summary>
            Gets the number of points tracked by the history.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.Histories.ArrayHistory`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Histories.ArrayHistory`1"/> class.
            </summary>
            <param name="length">The number of points to store.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Histories.ArrayHistory`1.#ctor(System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Histories.ArrayHistory`1"/> class.
            </summary>
            <param name="length">The number of points to store.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Histories.ArrayHistory`1.#ctor(System.Int32,System.Func{System.Int32,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Histories.ArrayHistory`1"/> class.
            </summary>
            <param name="length">The number of points to store.</param>
            <param name="generator">The function that generates the initial values.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Histories.ArrayHistory`1.Accept">
            <summary>
            Cycles through history.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.Histories.ArrayHistory`1.GetPreviousValue(System.Int32)">
            <summary>
            Gets the previous value. An index of 0 means the current value.
            </summary>
            <param name="index">The number of points to go back.</param>
            <returns>
            The previous value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is negative or higher than the number of history points.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.Histories.ArrayHistory`1.Set(`0)">
            <summary>
            Sets all values in the history to the same value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Histories.ArrayHistory`1.Set(System.Func{System.Int32,`0})">
            <summary>
            Sets all values in the history to the value returned by the specified method.
            </summary>
            <param name="method">The method for creating the value. The index indicates the current point.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Histories.ArrayHistory`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Histories.ArrayHistory`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.Histories.NodeHistory`1">
            <summary>
            A class that implements a history using a linked list.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <seealso cref="T:SpiceSharp.Simulations.IHistory`1" />
        </member>
        <member name="T:SpiceSharp.Simulations.Histories.NodeHistory`1.Node">
            <summary>
            A class that represents a node in the history.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Histories.NodeHistory`1.Node.Value">
            <summary>
            Gets or sets the node value.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Histories.NodeHistory`1.Node.Previous">
            <summary>
            Gets or sets the previous node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Histories.NodeHistory`1.Node.Next">
            <summary>
            Gets or sets the next node.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Histories.NodeHistory`1._currentPoint">
            <summary>
            The current point
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Histories.NodeHistory`1.Value">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Histories.NodeHistory`1.Length">
            <summary>
            Gets the number of points tracked by the history.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.Histories.NodeHistory`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Histories.NodeHistory`1"/> class.
            </summary>
            <param name="length">The number of points to store.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Histories.NodeHistory`1.#ctor(System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Histories.NodeHistory`1"/> class.
            </summary>
            <param name="length">The number of points to store.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Histories.NodeHistory`1.#ctor(System.Int32,System.Func{System.Int32,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Histories.NodeHistory`1"/> class.
            </summary>
            <param name="length">The number of points to store.</param>
            <param name="generator">The function that generates the initial values.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Histories.NodeHistory`1.Accept">
            <summary>
            Accepts the current point and moves on to the next.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.Histories.NodeHistory`1.GetPreviousValue(System.Int32)">
            <summary>
            Gets the previous value. An index of 0 means the current value.
            </summary>
            <param name="index">The number of points to go back.</param>
            <returns>
            The previous value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of range.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.Histories.NodeHistory`1.Set(`0)">
            <summary>
            Sets all values in the history to the same value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Histories.NodeHistory`1.Set(System.Func{System.Int32,`0})">
            <summary>
            Sets all values in the history to the value returned by the specified method.
            </summary>
            <param name="method">The method for creating the value. The index indicates the current point.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Histories.NodeHistory`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Histories.NodeHistory`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.IHistory`1">
            <summary>
            Interface describing a history of a value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
        </member>
        <member name="P:SpiceSharp.Simulations.IHistory`1.Value">
            <summary>
            Gets or sets the current value in the history.
            </summary>
            <value>
            The current value.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.IHistory`1.GetPreviousValue(System.Int32)">
            <summary>
            Gets the previous value. An index of 0 means the current value.
            </summary>
            <param name="index">The number of points to go back.</param>
            <returns>
            The previous value.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="index"/> is out of range.</exception>
        </member>
        <member name="P:SpiceSharp.Simulations.IHistory`1.Length">
            <summary>
            Gets the number of points tracked by the history.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.IHistory`1.Accept">
            <summary>
            Accepts the current point and moves on to the next.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.IHistory`1.Set(`0)">
            <summary>
            Sets all values in the history to the same value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.IHistory`1.Set(System.Func{System.Int32,`0})">
            <summary>
            Sets all values in the history to the value returned by the specified method.
            </summary>
            <param name="method">The method for creating the value. The index indicates the current point.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.ISimulationState">
            <summary>
            The state of a simulation.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.IStateful">
            <summary>
            An interface describing a class that can contain states.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.IStateful.GetState``1">
            <summary>
            Gets the state of the specified type.
            </summary>
            <typeparam name="S">The simulation state type.</typeparam>
            <returns>The type, or <c>null</c> if the state isn't used.</returns>
            <exception cref="T:SpiceSharp.TypeNotFoundException">Thrown if the simulation state is not defined on this instance.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.IStateful.TryGetState``1(``0@)">
            <summary>
            Tries to get a state of the specified type.
            </summary>
            <typeparam name="S">The simulation state type.</typeparam>
            <param name="state">The state.</param>
            <returns>
              <c>true</c> if the state exists; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.IStateful.UsesState``1">
            <summary>
            Checks if the class uses the specified state.
            </summary>
            <typeparam name="S">The simulation state type.</typeparam>
            <returns>
              <c>true</c> if the class uses the state; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:SpiceSharp.Simulations.IStateful.States">
            <summary>
            Gets all the states that the class uses.
            </summary>
            <value>
            The states.
            </value>
        </member>
        <member name="T:SpiceSharp.Simulations.IStateful`1">
            <summary>
            Contract for a class that uses an <see cref="T:SpiceSharp.Simulations.ISimulationState"/>.
            </summary>
            <typeparam name="S">The type of simulation state.</typeparam>
        </member>
        <member name="P:SpiceSharp.Simulations.IStateful`1.State">
            <summary>
            Gets the state.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="T:SpiceSharp.Simulations.IVariable`1">
            <summary>
            Describes an <see cref="T:SpiceSharp.Simulations.IVariable"/> that also returns its value.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <seealso cref="T:SpiceSharp.Simulations.IVariable" />
        </member>
        <member name="P:SpiceSharp.Simulations.IVariable`1.Value">
            <summary>
            Gets the value of the variable.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:SpiceSharp.Simulations.IVariable">
            <summary>
            Describes an unknown variable that will be solved by a simulation.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.IVariable.Name">
            <summary>
            Gets the name of the variable.
            </summary>
            <value>
            The name of the variable. Can be <c>null</c>.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IVariable.Unit">
            <summary>
            Gets the units of the quantity.
            </summary>
            <value>
            The units.
            </value>
        </member>
        <member name="T:SpiceSharp.Simulations.IVariableDictionary`1">
            <summary>
            A template for a dictionary of strongly typed variables.
            </summary>
            <typeparam name="V">The variable type.</typeparam>
            <seealso cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />
            <remarks>
            This can be used to map variables into a solver.
            </remarks>
            <seealso cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>
            <seealso cref="T:SpiceSharp.Simulations.IVariable"/>
        </member>
        <member name="P:SpiceSharp.Simulations.IVariableDictionary`1.Comparer">
            <summary>
            Gets the comparer used for comparing variable names.
            </summary>
            <value>
            The comparer.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.IVariableDictionary`1.Add(System.String,`0)">
            <summary>
            Adds a variable to the dictionary.
            </summary>
            <param name="id">The identifier.</param>
            <param name="variable">The variable.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="id"/> or <paramref name="variable"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if a variable with the same identifier already exists.</exception>
        </member>
        <member name="T:SpiceSharp.Simulations.IVariableFactory`1">
            <summary>
            A template for a variable factory.
            </summary>
            <typeparam name="V">The base variable type.</typeparam>
            <seealso cref="T:SpiceSharp.Simulations.IVariable"/>
        </member>
        <member name="M:SpiceSharp.Simulations.IVariableFactory`1.GetSharedVariable(System.String)">
            <summary>
            Gets a variable that can be shared with other behaviors by the factory. If another variable
            already exists with the same name, that is returned instead.
            </summary>
            <param name="name">The name of the shared variable.</param>
            <returns>
            The shared variable.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.IVariableFactory`1.CreatePrivateVariable(System.String,SpiceSharp.Simulations.Variables.IUnit)">
            <summary>
            Creates a variable that is private to whoever requested it. The factory will not shared this
            variable with anyone else, and the name is only used for display purposes.
            </summary>
            <param name="name">The name of the private variable.</param>
            <param name="unit">The unit of the variable.</param>
            <returns>
            The private variable.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.IVariableMap">
            <summary>
            A template for mapping a variable to indices.
            </summary>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
            <seealso cref="T:SpiceSharp.Simulations.IVariable"/>
        </member>
        <member name="P:SpiceSharp.Simulations.IVariableMap.Count">
            <summary>
            Gets the number of mapped variables.
            </summary>
            <value>
            The number of mapped variables.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.IVariableMap.Item(SpiceSharp.Simulations.IVariable)">
            <summary>
            Gets the index associated with the specified variable.
            </summary>
            <value>
            The index.
            </value>
            <param name="variable">The variable.</param>
            <returns>
            The variable index.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="variable"/> is <c>null</c>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the variable was not found.</exception>
        </member>
        <member name="P:SpiceSharp.Simulations.IVariableMap.Item(System.Int32)">
            <summary>
            Gets the variable associated to the specified index.
            </summary>
            <value>
            The variable.
            </value>
            <param name="index">The index.</param>
            <returns>
            The associated variable.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if no variable was found at the specified index.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.IVariableMap.Contains(SpiceSharp.Simulations.IVariable)">
            <summary>
            Determines whether a variable is mapped.
            </summary>
            <param name="variable">The variable.</param>
            <returns>
              <c>true</c> if the variable is mapped; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="variable"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.Simulations.Variables.Fraction">
            <summary>
            Represents a small fraction. The numerator can range from -16 to 15, and
            the denominator can range from 1 to 8
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Variables.Fraction.One">
            <summary>
            One in a byte.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Variables.Fraction.Numerator">
            <summary>
            Gets the numerator.
            </summary>
            <value>
            The numerator.
            </value>
            <remarks>
            The numerator can have a value ranging from -16 to +15.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Simulations.Variables.Fraction.Denominator">
            <summary>
            Gets the denominator.
            </summary>
            <value>
            The denominator.
            </value>
            <remarks>
            The denominator can have a value ranging from 1 to 8.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.Fraction.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Variables.Fraction"/> struct.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <exception cref="T:System.DivideByZeroException">Thrown if the denominator is zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the numerator is not in the range -16 to +15, or if the denominator is not in the range 1 to 8.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.Fraction.#ctor(System.SByte)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Variables.Fraction"/> struct.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.Fraction.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.Fraction.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.Fraction.Equals(SpiceSharp.Simulations.Variables.Fraction)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.Fraction.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.Fraction.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts to string.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.Fraction.op_Explicit(SpiceSharp.Simulations.Variables.Fraction)~System.SByte">
            <summary>
            Performs an implicit conversion from <see cref="T:SpiceSharp.Simulations.Variables.Fraction"/> to <see cref="T:System.SByte"/>.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.Fraction.op_Implicit(System.Int32)~SpiceSharp.Simulations.Variables.Fraction">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:SpiceSharp.Simulations.Variables.Fraction"/>. The denominator is 1.
            </summary>
            <param name="numerator">The numerator.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.Fraction.op_Equality(SpiceSharp.Simulations.Variables.Fraction,SpiceSharp.Simulations.Variables.Fraction)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left argument.</param>
            <param name="right">The right argument.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.Fraction.op_Inequality(SpiceSharp.Simulations.Variables.Fraction,SpiceSharp.Simulations.Variables.Fraction)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left argument.</param>
            <param name="right">The right argument.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.Fraction.op_Multiply(SpiceSharp.Simulations.Variables.Fraction,SpiceSharp.Simulations.Variables.Fraction)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.Fraction.op_Division(SpiceSharp.Simulations.Variables.Fraction,SpiceSharp.Simulations.Variables.Fraction)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.Fraction.op_Addition(SpiceSharp.Simulations.Variables.Fraction,SpiceSharp.Simulations.Variables.Fraction)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left argument.</param>
            <param name="right">The right argument.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.Fraction.op_Subtraction(SpiceSharp.Simulations.Variables.Fraction,SpiceSharp.Simulations.Variables.Fraction)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left argument.</param>
            <param name="right">The right argument.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.Variables.IUnit">
            <summary>
            Describes a (possibly derived) unit that can be expressed in some way in terms of SI units.
            </summary>
            <seealso cref="T:System.IEquatable`1"/>
        </member>
        <member name="P:SpiceSharp.Simulations.Variables.IUnit.BaseValue">
            <summary>
            Gets the base value expressed in SI units (no transformations applied).
            </summary>
            <value>
            The base value.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.Variables.IUnit.SI">
            <summary>
            Gets the underlying SI units.
            </summary>
            <value>
            The SI units.
            </value>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.IUnit.From(System.Double)">
            <summary>
            Converts a base value expressed strictly in SI units (without transformations) to this unit.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The value in these units.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.Variables.SIUnits">
            <summary>
            SI units.
            </summary>
            <seealso cref="T:System.IEquatable`1"/>
        </member>
        <member name="F:SpiceSharp.Simulations.Variables.SIUnits.Second">
            <summary>
            Binary code for an <see cref="T:SpiceSharp.Simulations.Variables.SIUnits"/> representing a second (time).
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Variables.SIUnits.Meter">
            <summary>
            Binary code for an <see cref="T:SpiceSharp.Simulations.Variables.SIUnits"/> representing a meter (distance).
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Variables.SIUnits.Kilogram">
            <summary>
            Binary code for an <see cref="T:SpiceSharp.Simulations.Variables.SIUnits"/> representing a kilogram (weight).
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Variables.SIUnits.Ampere">
            <summary>
            Binary code for an <see cref="T:SpiceSharp.Simulations.Variables.SIUnits"/> representing an Ampere (current).
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Variables.SIUnits.Kelvin">
            <summary>
            Binary code for an <see cref="T:SpiceSharp.Simulations.Variables.SIUnits"/> representing a Kelvin (temperature).
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Variables.SIUnits.Mole">
            <summary>
            Binary code for an <see cref="T:SpiceSharp.Simulations.Variables.SIUnits"/> representing a mole (amount of substance).
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Variables.SIUnits.Candela">
            <summary>
            Binary code for an <see cref="T:SpiceSharp.Simulations.Variables.SIUnits"/> representing a Candela (luminous intensity).
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.SIUnits.#ctor(SpiceSharp.Simulations.Variables.Fraction,SpiceSharp.Simulations.Variables.Fraction,SpiceSharp.Simulations.Variables.Fraction,SpiceSharp.Simulations.Variables.Fraction,SpiceSharp.Simulations.Variables.Fraction,SpiceSharp.Simulations.Variables.Fraction,SpiceSharp.Simulations.Variables.Fraction)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Variables.SIUnits"/> struct.
            </summary>
            <param name="s">The exponent for seconds.</param>
            <param name="m">The exponent for meters.</param>
            <param name="kg">The exponent for kilograms.</param>
            <param name="a">The exponent for amperes.</param>
            <param name="k">The exponent for kelvin.</param>
            <param name="mol">The exponent for moles.</param>
            <param name="cd">The exponent for candelas.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.SIUnits.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Variables.SIUnits"/> struct.
            </summary>
            <param name="units">The units.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.SIUnits.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.SIUnits.Equals(SpiceSharp.Simulations.Variables.SIUnits)">
            <summary>
            Determines whether the specified units are equal.
            </summary>
            <param name="units">The units.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:SpiceSharp.Simulations.Variables.SIUnits"/> is equal to this instance; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.SIUnits.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.SIUnits.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.SIUnits.Pow(SpiceSharp.Simulations.Variables.Fraction)">
            <summary>
            Raises the units to a power.
            </summary>
            <param name="exponent">The exponent.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.SIUnits.op_Equality(SpiceSharp.Simulations.Variables.SIUnits,SpiceSharp.Simulations.Variables.SIUnits)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left argument.</param>
            <param name="right">The right argument.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.SIUnits.op_Inequality(SpiceSharp.Simulations.Variables.SIUnits,SpiceSharp.Simulations.Variables.SIUnits)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left argument.</param>
            <param name="right">The right argument.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.SIUnits.op_Multiply(SpiceSharp.Simulations.Variables.SIUnits,SpiceSharp.Simulations.Variables.SIUnits)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left argument.</param>
            <param name="right">The right argument.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.SIUnits.op_Division(SpiceSharp.Simulations.Variables.SIUnits,SpiceSharp.Simulations.Variables.SIUnits)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left argument.</param>
            <param name="right">The right argument.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.Variables.VariableFactory">
            <summary>
            A simple variable factory where the variables don't have any extra functionality.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.VariableDictionary`1"/>
            <seealso cref="T:SpiceSharp.Simulations.IVariableFactory`1" />
            <seealso cref="T:SpiceSharp.Simulations.IVariable"/>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.VariableFactory.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Variables.VariableFactory"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.VariableFactory.GetSharedVariable(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.Variables.VariableFactory.CreatePrivateVariable(System.String,SpiceSharp.Simulations.Variables.IUnit)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Simulations.SIUnitDefinition">
            <summary>
            The most straight-forward implementation of a unit: one that is directly
            derived from SI units.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.Variables.IUnit" />
        </member>
        <member name="P:SpiceSharp.Simulations.SIUnitDefinition.BaseValue">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.SIUnitDefinition.SI">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.SIUnitDefinition.#ctor(System.String,SpiceSharp.Simulations.Variables.SIUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.SIUnitDefinition"/> class.
            </summary>
            <param name="name">The name of the unit.</param>
            <param name="units">The SI units.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.SIUnitDefinition.From(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.SIUnitDefinition.Equals(SpiceSharp.Simulations.Variables.IUnit)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.SIUnitDefinition.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.SIUnitDefinition.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.SIUnitDefinition.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.Units">
            <summary>
            This class defines some standard units.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Units.Volt">
            <summary>
            Volt.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Units.Ampere">
            <summary>
            Ampere.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Units.Coulomb">
            <summary>
            Coulomb.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Units.Ohm">
            <summary>
            Ohm.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Units.Seconds">
            <summary>
            Seconds.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.Variable">
            <summary>
            A class that describes an unknown variable in a system of equations.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Variable.Name">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.Variable.Unit">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.Variable.#ctor(System.String,SpiceSharp.Simulations.Variables.IUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Variable"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="unit">The unit.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Variable.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.VariableDictionary`1">
            <summary>
            An implementation of the <see cref="T:SpiceSharp.Simulations.IVariableDictionary`1"/>.
            </summary>
            <typeparam name="V">The variable type.</typeparam>
            <seealso cref="T:SpiceSharp.Simulations.IVariableDictionary`1" />
            <seealso cref="T:SpiceSharp.Simulations.IVariable"/>
        </member>
        <member name="P:SpiceSharp.Simulations.VariableDictionary`1.Comparer">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.VariableDictionary`1.Count">
            <summary>
            Gets the number of variables in the dictionary.
            </summary>
            <value>
            The number of variables in the dictionary.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.VariableDictionary`1.Keys">
            <summary>
            Gets an enumerable collection that contains the identifiers of all variables in the set.
            </summary>
            <value>
            An enumerable of all the identifiers in the dictionary.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.VariableDictionary`1.Values">
            <summary>
            Gets an enumerable collection that contains the variables in the set.
            </summary>
            <value>
            An enumerable of all the variables in the dictionary.
            </value>
        </member>
        <member name="P:SpiceSharp.Simulations.VariableDictionary`1.Item(System.String)">
            <summary>
            Gets the <see cref="T:SpiceSharp.Simulations.IVariable"/> with the specified identifier.
            </summary>
            <value>
            The <see cref="T:SpiceSharp.Simulations.IVariable"/>.
            </value>
            <param name="name">The name.</param>
            <returns>The variable with the specified name.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the variable couldn't be found.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableDictionary`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.VariableDictionary`1"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableDictionary`1.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.VariableDictionary`1"/> class.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing variable names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableDictionary`1.Add(System.String,`0)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableDictionary`1.ContainsKey(System.String)">
            <summary>
            Determines whether the dictionary contains an element that has the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>
            <c>true</c> if the read-only dictionary contains an element that has the specified key; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableDictionary`1.TryGetValue(System.String,`0@)">
            <summary>
            Gets the value that is associated with the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <returns>
            <c>true</c> if the dictionary contains an element that has the specified key; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableDictionary`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.VariableMap">
            <summary>
            A default implementation for a variable map.
            </summary>
            <remarks>
            Can be used to map to indices for a solver that uses matrix equations.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Simulations.VariableMap.Count">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.VariableMap.Item(SpiceSharp.Simulations.IVariable)">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Simulations.VariableMap.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableMap.#ctor(SpiceSharp.Simulations.IVariable)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.VariableMap"/> class.
            </summary>
            <param name="ground">The ground variable that receives index 0.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableMap.Contains(SpiceSharp.Simulations.IVariable)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableMap.Add(SpiceSharp.Simulations.IVariable,System.Int32)">
            <summary>
            Adds the specified variable.
            </summary>
            <param name="variable">The variable.</param>
            <param name="index">The index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is not strictly positive.</exception>
            <exception cref="T:System.ArgumentException">Thrown if a variable already exists with the same index.</exception>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableMap.Clear">
            <summary>
            Clears the map.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableMap.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableMap.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:SpiceSharp.Entities.BindingContext">
            <summary>
            Context for binding an <see cref="T:SpiceSharp.Behaviors.IBehavior"/> to an <see cref="T:SpiceSharp.Simulations.ISimulation"/>.
            </summary>
            <remarks>
            This is an additional layer that allows to shield entities, simulations, etc. from the behavior that
            is being created. This makes sure that behaviors are only using the data that matters.
            </remarks>
            <seealso cref="T:SpiceSharp.Entities.IBindingContext"/>
        </member>
        <member name="P:SpiceSharp.Entities.BindingContext.Simulation">
            <summary>
            Gets the simulation to bind to without exposing the simulation itself.
            </summary>
            <value>
            The simulation.
            </value>
        </member>
        <member name="P:SpiceSharp.Entities.BindingContext.Entity">
            <summary>
            Gets the entity that provides the parameters without exposing the entity itself.
            </summary>
            <value>
            The entity.
            </value>
        </member>
        <member name="P:SpiceSharp.Entities.BindingContext.Behaviors">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Entities.BindingContext.GetState``1">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Entities.BindingContext.TryGetState``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Entities.BindingContext.UsesState``1">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Entities.BindingContext.GetSimulationParameterSet``1">
            <summary>
            Gets a simulation parameter set of the specified type.
            </summary>
            <typeparam name="P">The parameter set type.</typeparam>
            <returns>The parameter set.</returns>
        </member>
        <member name="M:SpiceSharp.Entities.BindingContext.TryGetSimulationParameterSet``1(``0@)">
            <summary>
            Tries to get a simulation parameter set of the specified type.
            </summary>
            <typeparam name="P">The parameter set type.</typeparam>
            <param name="value">The value.</param>
            <returns>The parameter set.</returns>
        </member>
        <member name="M:SpiceSharp.Entities.BindingContext.GetParameterSet``1">
            <summary>
            Gets the parameter set of the specified type.
            </summary>
            <typeparam name="P">The parameter set type.</typeparam>
            <returns>
            The parameter set.
            </returns>
        </member>
        <member name="M:SpiceSharp.Entities.BindingContext.TryGetParameterSet``1(``0@)">
            <summary>
            Tries to get the parameter set of the specified type.
            </summary>
            <typeparam name="P">The parameter set type.</typeparam>
            <param name="value">The parameter set.</param>
            <returns>
              <c>true</c> if the parameter set was found; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Entities.BindingContext.#ctor(SpiceSharp.Entities.IEntity,SpiceSharp.Simulations.ISimulation,SpiceSharp.Behaviors.IBehaviorContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Entities.BindingContext"/> class.
            </summary>
            <param name="entity">The entity creating the behavior.</param>
            <param name="simulation">The simulation for which a behavior is created.</param>
            <param name="behaviors">The behavior container.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entity"/> or <paramref name="simulation"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.Entities.ConcurrentEntityCollection">
            <summary>
            A collection of entities that can be accessed by multiple threads concurrently.
            </summary>
        </member>
        <member name="E:SpiceSharp.Entities.ConcurrentEntityCollection.EntityAdded">
            <summary>
            Occurs when an entity is about to be added to the collection.
            </summary>
        </member>
        <member name="E:SpiceSharp.Entities.ConcurrentEntityCollection.EntityRemoved">
            <summary>
            Occurs when an entity has been removed from the collection.
            </summary>
        </member>
        <member name="P:SpiceSharp.Entities.ConcurrentEntityCollection.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Entities.ConcurrentEntityCollection.Comparer">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Entities.ConcurrentEntityCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="P:SpiceSharp.Entities.ConcurrentEntityCollection.Count">
            <summary>
            Gets the number of entities in the collection
            </summary>
            <value>
            The number of entities.
            </value>
        </member>
        <member name="M:SpiceSharp.Entities.ConcurrentEntityCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Entities.ConcurrentEntityCollection"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Entities.ConcurrentEntityCollection.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Entities.ConcurrentEntityCollection"/> class.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing entity names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.</param>
        </member>
        <member name="M:SpiceSharp.Entities.ConcurrentEntityCollection.Clear">
            <summary>
            Clear all entities in the collection.
            </summary>
        </member>
        <member name="M:SpiceSharp.Entities.ConcurrentEntityCollection.Add(SpiceSharp.Entities.IEntity)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="item"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if another entity with the same name already exists.</exception>
        </member>
        <member name="M:SpiceSharp.Entities.ConcurrentEntityCollection.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Entities.ConcurrentEntityCollection.Remove(SpiceSharp.Entities.IEntity)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
              <c>true</c> if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="item"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Entities.ConcurrentEntityCollection.Contains(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Entities.ConcurrentEntityCollection.Contains(SpiceSharp.Entities.IEntity)">
            <summary>
            Determines whether this instance contains the object.
            </summary>
            <param name="item">The entity.</param>
            <returns>
              <c>true</c> if the collection contains the entity; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="item"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Entities.ConcurrentEntityCollection.TryGetEntity(System.String,SpiceSharp.Entities.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Entities.ConcurrentEntityCollection.ByType``1">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Entities.ConcurrentEntityCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.Entities.ConcurrentEntityCollection.OnEntityAdded(SpiceSharp.Entities.EntityEventArgs)">
            <summary>
            Raises the <seealso cref="E:SpiceSharp.Entities.ConcurrentEntityCollection.EntityAdded"/> event.
            </summary>
        </member>
        <member name="M:SpiceSharp.Entities.ConcurrentEntityCollection.OnEntityRemoved(SpiceSharp.Entities.EntityEventArgs)">
            <summary>
            Raises the <seealso cref="E:SpiceSharp.Entities.ConcurrentEntityCollection.EntityRemoved"/> event.
            </summary>
        </member>
        <member name="M:SpiceSharp.Entities.ConcurrentEntityCollection.Clone">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Entities.Entity">
            <summary>
            Base class for any circuit object that can take part in simulations.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSetCollection" />
            <seealso cref="T:SpiceSharp.Entities.IEntity" />
        </member>
        <member name="P:SpiceSharp.Entities.Entity.LinkParameters">
            <summary>
            Gets or sets a value indicating whether the parameters should reference that of the entity.
            If the parameters are not referenced, then the parameters are cloned instead.
            </summary>
            <value>
              <c>true</c> if parameters are referenced instead of cloned; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SpiceSharp.Entities.Entity.Name">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Entities.Entity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Entities.Entity"/> class.
            </summary>
            <param name="name">The name of the entity.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Entities.Entity.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Entities.Entity.SetParameter``1(System.String,``0)">
            <summary>
            Sets the value of a parameter of the specified type and with the specified name. This is just a wrapper
            that allows chaining these commands.
            </summary>
            <typeparam name="P">The parameter value type.</typeparam>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>
            The entity.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:SpiceSharp.Diagnostics.ParameterNotFoundException">Thrown if the parameter was not found.</exception>
        </member>
        <member name="M:SpiceSharp.Entities.Entity.ToString">
            <summary>
            Returns a string that represents the current entity.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:SpiceSharp.Entities.Entity.Clone">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Entities.Entity`1">
            <summary>
            Base class for any circuit object that can take part in simulations.
            This variant also defines a cloneable parameter set.
            </summary>
            <typeparam name="P">The parameter set type.</typeparam>
        </member>
        <member name="P:SpiceSharp.Entities.Entity`1.Parameters">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Entities.Entity`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Entities.Entity`1"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:SpiceSharp.Entities.Entity`1.Clone">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Entities.EntityCollection">
            <summary>
            A default implementation for <see cref="T:SpiceSharp.Entities.IEntityCollection"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Entities.IEntityCollection" />
        </member>
        <member name="E:SpiceSharp.Entities.EntityCollection.EntityAdded">
            <summary>
            Occurs when an entity has been added.
            </summary>
        </member>
        <member name="E:SpiceSharp.Entities.EntityCollection.EntityRemoved">
            <summary>
            Occurs when an entity has been removed.
            </summary>
        </member>
        <member name="P:SpiceSharp.Entities.EntityCollection.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Entities.EntityCollection.Comparer">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Entities.EntityCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="P:SpiceSharp.Entities.EntityCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Entities.EntityCollection.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>
            The keys.
            </value>
        </member>
        <member name="M:SpiceSharp.Entities.EntityCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Entities.EntityCollection"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Entities.EntityCollection.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Entities.EntityCollection"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:SpiceSharp.Entities.EntityCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:SpiceSharp.Entities.EntityCollection.Add(SpiceSharp.Entities.IEntity)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="item"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if another entity with the same name already exists.</exception>
        </member>
        <member name="M:SpiceSharp.Entities.EntityCollection.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Entities.EntityCollection.Remove(SpiceSharp.Entities.IEntity)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="item"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Entities.EntityCollection.Contains(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Entities.EntityCollection.Contains(SpiceSharp.Entities.IEntity)">
            <summary>
            Determines whether this instance contains the object.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
              <c>true</c> if the collection contains the entity; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entity"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Entities.EntityCollection.TryGetEntity(System.String,SpiceSharp.Entities.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Entities.EntityCollection.ByType``1">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Entities.EntityCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.Entities.EntityCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.Entities.EntityCollection.System#Collections#Generic#ICollection{SpiceSharp#Entities#IEntity}#CopyTo(SpiceSharp.Entities.IEntity[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular array index.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">The array index.</param>
        </member>
        <member name="M:SpiceSharp.Entities.EntityCollection.OnEntityAdded(SpiceSharp.Entities.EntityEventArgs)">
            <summary>
            Raises the <see cref="E:SpiceSharp.Entities.EntityCollection.EntityAdded" /> event.
            </summary>
            <param name="args">The <see cref="T:SpiceSharp.Entities.EntityEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.Entities.EntityCollection.OnEntityRemoved(SpiceSharp.Entities.EntityEventArgs)">
            <summary>
            Raises the <see cref="E:SpiceSharp.Entities.EntityCollection.EntityRemoved" /> event.
            </summary>
            <param name="args">The <see cref="T:SpiceSharp.Entities.EntityEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.Entities.EntityCollection.Clone">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Entities.EntityEventArgs">
            <summary>
            Event arguments for passing an entity.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:SpiceSharp.Entities.EntityEventArgs.Entity">
            <summary>
            Gets the entity.
            </summary>
        </member>
        <member name="M:SpiceSharp.Entities.EntityEventArgs.#ctor(SpiceSharp.Entities.IEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Entities.EntityEventArgs"/> class.
            </summary>
            <param name="entity">The entity.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entity"/> if <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.Entities.IBindingContext">
            <summary>
            A template for a context that can be used to bind entity behaviors to a simulation.
            </summary>
        </member>
        <member name="P:SpiceSharp.Entities.IBindingContext.Behaviors">
            <summary>
            Gets the previously created behaviors.
            </summary>
            <value>
            The previously created behaviors.
            </value>
        </member>
        <member name="M:SpiceSharp.Entities.IBindingContext.GetState``1">
            <summary>
            Gets a simulation state.
            </summary>
            <typeparam name="S">The type of simulation state.</typeparam>
            <returns>
            The simulation state.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the state is not defined on the simulation.</exception>
        </member>
        <member name="M:SpiceSharp.Entities.IBindingContext.TryGetState``1(``0@)">
            <summary>
            Tries to get a simulation state.
            </summary>
            <typeparam name="S">The type of simulation state.</typeparam>
            <param name="state">The simulation state.</param>
            <returns>
            <c>true</c> if the state was found; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Entities.IBindingContext.GetSimulationParameterSet``1">
            <summary>
            Gets a simulation parameter set.
            </summary>
            <typeparam name="P">The type of parameter set.</typeparam>
            <returns>The parameter set.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the parameter set was not found.</exception>
        </member>
        <member name="M:SpiceSharp.Entities.IBindingContext.TryGetSimulationParameterSet``1(``0@)">
            <summary>
            Tries to get a simulation parameter set.
            </summary>
            <typeparam name="P">The parameter set type.</typeparam>
            <param name="parameters">The parameter set.</param>
            <returns>
            <c>true</c> if the parameter set was found; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Entities.IBindingContext.GetParameterSet``1">
            <summary>
            Gets the parameter set of the specified type.
            </summary>
            <typeparam name="P">The parameter set type.</typeparam>
            <returns>
            The parameter set.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the parameter set could not be found.</exception>
        </member>
        <member name="M:SpiceSharp.Entities.IBindingContext.TryGetParameterSet``1(``0@)">
            <summary>
            Tries to get the parameter set of the specified type.
            </summary>
            <typeparam name="P">The parameter set type.</typeparam>
            <param name="value">The parameter set.</param>
            <returns>
            <c>true</c> if the parameter set was found; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SpiceSharp.Entities.IEntity">
            <summary>
            Interface describing an entity that can provide behaviors to a <see cref="T:SpiceSharp.Simulations.ISimulation"/>.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterSetCollection"/>
        </member>
        <member name="P:SpiceSharp.Entities.IEntity.Name">
            <summary>
            Gets the name of the entity.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:SpiceSharp.Entities.IEntity.LinkParameters">
            <summary>
            Gets a value indicating whether behaviors need to be linked to the original entity. If this is <c>true</c>,
            then changing parameter values on the entity will be reflected in any behaviors that this entity creates. If
            <c>false</c>, then parameters are cloned as behaviors request it.
            </summary>
            <value>
              <c>true</c> if [link parameters]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SpiceSharp.Entities.IEntity.CreateBehaviors(SpiceSharp.Simulations.ISimulation)">
            <summary>
            Creates the behaviors and stores them in the specified container.
            </summary>
            <param name="simulation">The simulation.</param>
            <returns>A dictionary of behaviors that can be used by the simulation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="simulation"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the simulation does not use an <see cref="T:SpiceSharp.Simulations.IComplexSimulationState"/>.</exception>
            <exception cref="T:SpiceSharp.TypeNotFoundException">Thrown if a required behavior or parameter set could not be found.</exception>
            <exception cref="T:SpiceSharp.General.AmbiguousTypeException">Thrown if a behavior or parameter set could not be resolved unambiguously.</exception>
        </member>
        <member name="T:SpiceSharp.Entities.IEntityCollection">
            <summary>
            Template for a collection of <see cref="T:SpiceSharp.Entities.Entity" />.
            </summary>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
            <seealso cref="T:System.Collections.Generic.ICollection`1" />
        </member>
        <member name="P:SpiceSharp.Entities.IEntityCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:SpiceSharp.Entities.IEntity"/> with the specified name.
            </summary>
            <value>
            The <see cref="T:SpiceSharp.Entities.IEntity"/>.
            </value>
            <param name="name">The name of the entity.</param>
            <returns>The entity.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if no entity with the name <paramref name="name"/> could be found.</exception>
        </member>
        <member name="P:SpiceSharp.Entities.IEntityCollection.Comparer">
            <summary>
            Gets the comparer used to compare <see cref="T:SpiceSharp.Entities.Entity"/> names.
            </summary>
            <value>
            The comparer.
            </value>
        </member>
        <member name="M:SpiceSharp.Entities.IEntityCollection.Remove(System.String)">
            <summary>
            Removes the <see cref="T:SpiceSharp.Entities.IEntity" /> with specified name.
            </summary>
            <param name="name">The name of the entity.</param>
            <returns>
              <c>true</c> is the entity was removed succesfully; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Entities.IEntityCollection.Contains(System.String)">
            <summary>
            Determines whether this instance contains an <see cref="T:SpiceSharp.Entities.IEntity"/> with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>
              <c>true</c> if the collection contains the entity; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Entities.IEntityCollection.TryGetEntity(System.String,SpiceSharp.Entities.IEntity@)">
            <summary>
            Tries to find an <see cref="T:SpiceSharp.Entities.Entity"/> in the collection.
            </summary>
            <param name="name">The name of the entity.</param>
            <param name="entity">The entity.</param>
            <returns>
            <c>True</c> if the entity is found; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Entities.IEntityCollection.ByType``1">
            <summary>
            Gets all entities that are of a specified type.
            </summary>
            <typeparam name="E">The type of entity.</typeparam>
            <returns>The entities.</returns>
        </member>
        <member name="T:SpiceSharp.Circuit">
            <summary>
            Represents an electronic circuit.
            </summary>
            <seealso cref="T:SpiceSharp.Entities.IEntityCollection" />
        </member>
        <member name="P:SpiceSharp.Circuit.Comparer">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Circuit.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Circuit.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="P:SpiceSharp.Circuit.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Circuit.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Circuit"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Circuit.#ctor(SpiceSharp.Entities.IEntityCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Circuit"/> class.
            </summary>
            <param name="entities">The entities.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entities"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Circuit.#ctor(System.Collections.Generic.IEnumerable{SpiceSharp.Entities.IEntity})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Circuit"/> class.
            </summary>
            <param name="entities">The entities describing the circuit.</param>
        </member>
        <member name="M:SpiceSharp.Circuit.#ctor(SpiceSharp.Entities.IEntity[])">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Circuit"/> class.
            </summary>
            <param name="entities">The entities describing the circuit.</param>
        </member>
        <member name="M:SpiceSharp.Circuit.Merge(SpiceSharp.Circuit)">
            <summary>
            Merge a circuit with this one. Entities are merged by reference!
            </summary>
            <param name="ckt">The circuit to merge with.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="ckt"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Circuit.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Circuit.Contains(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Circuit.TryGetEntity(System.String,SpiceSharp.Entities.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Circuit.ByType``1">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Circuit.Add(SpiceSharp.Entities.IEntity)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:SpiceSharp.Circuit.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:SpiceSharp.Circuit.Contains(SpiceSharp.Entities.IEntity)">
            <summary>
            Determines whether this instance contains the object.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:SpiceSharp.Circuit.CopyTo(SpiceSharp.Entities.IEntity[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:SpiceSharp.Circuit.Remove(SpiceSharp.Entities.IEntity)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="M:SpiceSharp.Circuit.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.Circuit.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.Circuit.Clone">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Array`1">
            <summary>
            A helper method as a replacement for System.Array.
            This method does not exist in .NET Standard 1.5 (even though the docs say it does).
            </summary>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="M:SpiceSharp.Array`1.Empty">
            <summary>
            Returns an empty array.
            </summary>
            <returns>The empty array.</returns>
            <remarks>
            The static <see cref="T:System.Array"/> does not contain an Empty method
            in .NET Standard 1.5, despite it being documented as such. That's why
            I rolled out a custom one.
            </remarks>
        </member>
        <member name="T:SpiceSharp.Constants">
            <summary>
            Helpful (electronics-related) constants used throughout Spice#.
            </summary>
        </member>
        <member name="F:SpiceSharp.Constants.Charge">
            <summary>
            Charge of an electron (in Coulomb - C).
            </summary>
        </member>
        <member name="F:SpiceSharp.Constants.CelsiusKelvin">
            <summary>
            The conversion constant for converting between Kelvin and Celsius (in Kelvin or degrees Celsius).
            </summary>
        </member>
        <member name="F:SpiceSharp.Constants.Boltzmann">
            <summary>
            Boltzman constant (in Joules per Kelvin - J/K).
            </summary>
        </member>
        <member name="F:SpiceSharp.Constants.ReferenceTemperature">
            <summary>
            The default reference temperature in Kelvin (equal to 27 degrees Celsius).
            </summary>
        </member>
        <member name="F:SpiceSharp.Constants.Root2">
            <summary>
            The square root of 2.
            </summary>
        </member>
        <member name="F:SpiceSharp.Constants.Vt0">
            <summary>
            The thermal voltage at the default reference temperature (in Volt - V).
            </summary>
        </member>
        <member name="F:SpiceSharp.Constants.KOverQ">
            <summary>
            Normalized thermal voltage (in Volts per Kelvin - V/K).
            </summary>
        </member>
        <member name="F:SpiceSharp.Constants.Ground">
            <summary>
            The fixed name of the ground node.
            </summary>
            <remarks>
            <para>
            The ground node is the reference node at 0V, and any simulation that
            wants to solve for voltages will need one.
            </para>
            <para>
            If you want to use other names for ground, you can make an
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> that
            maps these extra node names to the ground node.
            </para>
            </remarks>
        </member>
        <member name="P:SpiceSharp.Constants.DefaultComparer">
            <summary>
            Gets the default string comparer.
            </summary>
            <value>
            The default string comparer.
            </value>
        </member>
        <member name="T:SpiceSharp.ICloneable`1">
            <summary>
            Describes a cloneable item.
            </summary>
            <typeparam name="T">The base type.</typeparam>
        </member>
        <member name="M:SpiceSharp.ICloneable`1.Clone">
            <summary>
            Clones the instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="T:SpiceSharp.Documentation.Documentation">
            <summary>
            A helper class that helps listing documentation at runtime.
            </summary>
        </member>
        <member name="M:SpiceSharp.Documentation.Documentation.GetMembers(System.Type)">
            <summary>
            Gets all the members that are defined on a type.
            </summary>
            <param name="type">The type.</param>
            <returns>All the members on a type.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="type"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Documentation.Documentation.Pins(System.Type)">
            <summary>
            Enumerates all pins of a component type.
            </summary>
            <param name="type">The component type.</param>
            <returns>The pin names.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="type"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Documentation.Documentation.Pins(SpiceSharp.Components.IComponent)">
            <summary>
            Enumerates all pins of a component type.
            </summary>
            <param name="component">The component.</param>
            <returns>The pin names.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="component"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Documentation.Documentation.Parameters(SpiceSharp.ParameterSets.IParameterSetCollection)">
            <summary>
            Enumerates all the named members.
            </summary>
            <param name="parameterized">The parameterized object.</param>
            <returns>
            The named parameters.
            </returns>
        </member>
        <member name="M:SpiceSharp.Documentation.Documentation.Parameters(SpiceSharp.ParameterSets.IParameterSet)">
            <summary>
            Enumerates all the named parameters and properties of an <see cref="T:SpiceSharp.ParameterSets.IParameterSet"/>.
            </summary>
            <param name="parameters">The parameter set.</param>
            <returns>
            All the named parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="parameters"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Documentation.Documentation.ParameterValues``1(SpiceSharp.ParameterSets.IParameterSetCollection,System.Boolean)">
            <summary>
            Creates a dictionary of all properties and their values on a parameter set.
            </summary>
            <typeparam name="T">The parameter value type.</typeparam>
            <param name="parameterSetCollection">The parameter set.</param>
            <param name="givenOnly">If <c>true</c>, only parameters that were set/given are returned and parameters that are left to their default/nonsense value are skipped. <c>true</c> by default.</param>
            <returns>
            A read-only dictionary for all members and their values.
            </returns>
        </member>
        <member name="M:SpiceSharp.Documentation.Documentation.ParameterValues``1(SpiceSharp.ParameterSets.IParameterSet,System.Boolean)">
            <summary>
            Creates a dictionary of all properties and their values on a parameter set.
            </summary>
            <typeparam name="T">The parameter value type.</typeparam>
            <param name="parameterSet">The parameter set.</param>
            <param name="givenOnly">If <c>true</c>, only parameters that were set/given are returned and parameters that are left to their default/nonsense value are skipped. <c>true</c> by default.</param>
            <returns>
            A read-only dictionary for all members and their values.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="parameterSet"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Documentation.Documentation.AsString``1(System.Collections.Generic.IReadOnlyDictionary{SpiceSharp.Documentation.MemberDocumentation,``0})">
            <summary>
            Creates a (long) string of NAME=VALUE segments separated by a space. The first name of each parameter is used.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="parameterValues">The parameter values.</param>
            <returns>
            The string representation for all parameters and their values.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="parameterValues"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.Documentation.MemberDocumentation">
            <summary>
            Describes documentation about a member.
            </summary>
        </member>
        <member name="P:SpiceSharp.Documentation.MemberDocumentation.Interesting">
            <summary>
            Gets a value indicating whether this member is interesting.
            </summary>
            <value>
              <c>true</c> if this instance is interesting; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SpiceSharp.Documentation.MemberDocumentation.IsPrincipal">
            <summary>
            Gets a value indicating whether this instance is principal.
            </summary>
            <value>
              <c>true</c> if this instance is principal; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SpiceSharp.Documentation.MemberDocumentation.IsStatic">
            <summary>
            Gets a value indicating whether the member is static.
            </summary>
            <value>
              <c>true</c> if this member is static; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SpiceSharp.Documentation.MemberDocumentation.IsParameter">
            <summary>
            Determines whether the member describes a parameter (can set a value).
            </summary>
            <value>
                <c>true</c> if the member describes a parameter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SpiceSharp.Documentation.MemberDocumentation.IsProperty">
            <summary>
            Determines whether the member describes a property (can return a value).
            </summary>
            <value>
                <c>true</c> if the member describes a property; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SpiceSharp.Documentation.MemberDocumentation.Names">
            <summary>
            Gets the names of the member.
            </summary>
            <value>
            The names of the member.
            </value>
        </member>
        <member name="P:SpiceSharp.Documentation.MemberDocumentation.Description">
            <summary>
            Gets the description of the property and/or parameter.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:SpiceSharp.Documentation.MemberDocumentation.MemberType">
            <summary>
            Gets the type of the parameter and/or property.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:SpiceSharp.Documentation.MemberDocumentation.BaseType">
            <summary>
            Gets the base member type of the parameter and/or property.
            </summary>
            <value>
            The base type.
            </value>
        </member>
        <member name="P:SpiceSharp.Documentation.MemberDocumentation.Member">
            <summary>
            Gets the member.
            </summary>
            <value>
            The member.
            </value>
        </member>
        <member name="P:SpiceSharp.Documentation.MemberDocumentation.Units">
            <summary>
            Gets the units of the member.
            </summary>
            <value>
            The units.
            </value>
        </member>
        <member name="M:SpiceSharp.Documentation.MemberDocumentation.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Documentation.MemberDocumentation"/> class.
            </summary>
            <param name="member">The member info.</param>
        </member>
        <member name="T:SpiceSharp.Utility">
            <summary>
            Some utility methods
            </summary>
        </member>
        <member name="P:SpiceSharp.Utility.Separator">
            <summary>
            Gets or sets the separator used when combining strings.
            </summary>
        </member>
        <member name="M:SpiceSharp.Utility.FormatString(System.String,System.Object[])">
            <summary>
            Format a string using the current culture.
            </summary>
            <param name="format">The formatting.</param>
            <param name="args">The arguments.</param>
            <returns>
            The formatted string.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="format"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException">
            Thrown if <paramref name="format"/> is invalid, or if the index of a format item is not higher than 0.
            </exception>
        </member>
        <member name="M:SpiceSharp.Utility.Combine(System.String,System.String)">
            <summary>
            Combines a name with the specified appendix, using <see cref="P:SpiceSharp.Utility.Separator" />.
            </summary>
            <param name="name">The name.</param>
            <param name="appendix">The appendix.</param>
            <returns>
            The combined string.
            </returns>
        </member>
        <member name="M:SpiceSharp.Utility.ThrowIfNull``1(``0,System.String)">
            <summary>
            Throws an exception if the object is null.
            </summary>
            <typeparam name="T">The base type.</typeparam>
            <param name="source">The object.</param>
            <param name="name">The parameter name.</param>
            <returns>The original object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Utility.ThrowIfEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws an exception if the enumerable is null or empty.
            </summary>
            <typeparam name="T">The base type.</typeparam>
            <param name="source">The object.</param>
            <param name="name">The parameter name.</param>
            <returns>The original object.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="source"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:SpiceSharp.Utility.ThrowIfNotLength``1(``0[],System.String,System.Int32)">
            <summary>
            Throws an exception if the array does not have the specified length.
            </summary>
            <typeparam name="T">The base type.</typeparam>
            <param name="arguments">The array.</param>
            <param name="name">The name of the parameter.</param>
            <param name="expected">The number of expected elements.</param>
            <returns>
            The array.
            </returns>
            <exception cref="T:System.ArgumentException">
            Exepcted <paramref name="expected"/> arguments, but a different amount were given.
            </exception>
        </member>
        <member name="M:SpiceSharp.Utility.ThrowIfNotLength``1(``0[],System.String,System.Int32,System.Int32)">
            <summary>
            Throws an exception if the array does not have a length within range.
            </summary>
            <typeparam name="T">The base type.</typeparam>
            <param name="arguments">The array.</param>
            <param name="name">The name of the parameter.</param>
            <param name="minimum">The minimum amount of arguments.</param>
            <param name="maximum">The maximum amount of arguments.</param>
            <returns>
            The array.
            </returns>
            <exception cref="T:System.ArgumentException">
            Expected between <paramref name="minimum"/> and <paramref name="maximum"/> arguments, but a different amount were given.
            </exception>
        </member>
        <member name="M:SpiceSharp.Utility.GreaterThan(System.Double,System.String,System.Double)">
            <summary>
            Throws an exception if the value is not greater than the specified limit.
            </summary>
            <param name="value">The value.</param>
            <param name="name">The name.</param>
            <param name="limit">The limit.</param>
            <returns>The original value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is not greater than <paramref name="limit"/>.</exception>
        </member>
        <member name="M:SpiceSharp.Utility.LessThan(System.Double,System.String,System.Double)">
            <summary>
            Throws an exception if the value is not less than the specified limit.
            </summary>
            <param name="value">The value.</param>
            <param name="name">The name.</param>
            <param name="limit">The limit.</param>
            <returns>The original value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is not less than <paramref name="limit"/>.</exception>
        </member>
        <member name="M:SpiceSharp.Utility.GreaterThanOrEquals(System.Double,System.String,System.Double)">
            <summary>
            Throws an exception if the value is not greater than or equal to the specified limit.
            </summary>
            <param name="value">The value.</param>
            <param name="name">The name.</param>
            <param name="limit">The limit.</param>
            <returns>The original value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is not greater than or equal to <paramref name="limit"/>.</exception>
        </member>
        <member name="M:SpiceSharp.Utility.LessThanOrEquals(System.Double,System.String,System.Double)">
            <summary>
            Throws an exception if the value is not less than or equal to the specified limit.
            </summary>
            <param name="value">The value.</param>
            <param name="name">The name.</param>
            <param name="limit">The limit.</param>
            <returns>The original value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is not less than or equal to the specified limit.</exception>
        </member>
        <member name="M:SpiceSharp.Utility.LowerLimit(System.Double,System.Object,System.String,System.Double)">
            <summary>
            Specifies a lower limit for the value. If it is smaller, it is set to the limit value
            while raising a warning.
            </summary>
            <param name="value">The value.</param>
            <param name="source">The source.</param>
            <param name="name">The name.</param>
            <param name="limit">The limit.</param>
            <returns>The limited value.</returns>
        </member>
        <member name="M:SpiceSharp.Utility.UpperLimit(System.Double,System.Object,System.String,System.Double)">
            <summary>
            Specifies an upper limit for the value. If it is larger, it is set to the limit value
            while raising a warning.
            </summary>
            <param name="value">The value.</param>
            <param name="source">The source.</param>
            <param name="name">The name.</param>
            <param name="limit">The limit.</param>
            <returns>The limited value.</returns>
        </member>
        <member name="M:SpiceSharp.Utility.GreaterThan(System.Int32,System.String,System.Int32)">
            <summary>
            Throws an exception if the value is not greater than the specified limit.
            </summary>
            <param name="value">The value.</param>
            <param name="name">The name.</param>
            <param name="limit">The limit.</param>
            <returns>The original value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is not greater than <paramref name="limit"/>.</exception>
        </member>
        <member name="M:SpiceSharp.Utility.LessThan(System.Int32,System.String,System.Int32)">
            <summary>
            Throws an exception if the value is not less than the specified limit.
            </summary>
            <param name="value">The value.</param>
            <param name="name">The name.</param>
            <param name="limit">The limit.</param>
            <returns>The original value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is not less than <paramref name="limit"/>.</exception>
        </member>
        <member name="M:SpiceSharp.Utility.GreaterThanOrEquals(System.Int32,System.String,System.Int32)">
            <summary>
            Throws an exception if the value is not greater than or equal to the specified limit.
            </summary>
            <param name="value">The value.</param>
            <param name="name">The name.</param>
            <param name="limit">The limit.</param>
            <returns>The original value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is not greater than or equal to <paramref name="limit"/>.</exception>
        </member>
        <member name="M:SpiceSharp.Utility.LessThanOrEquals(System.Int32,System.String,System.Int32)">
            <summary>
            Throws an exception if the value is not less than or equal to the specified limit.
            </summary>
            <param name="value">The value.</param>
            <param name="name">The name.</param>
            <param name="limit">The limit.</param>
            <returns>The original value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is not less than or equal to the specified limit.</exception>
        </member>
        <member name="M:SpiceSharp.Utility.Between(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Throws an exception if the value is not in the specified range.
            </summary>
            <param name="value">The value.</param>
            <param name="name">The name.</param>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <returns>The original value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is not within bounds.</exception>
        </member>
        <member name="M:SpiceSharp.Utility.LowerLimit(System.Int32,System.Object,System.String,System.Int32)">
            <summary>
            Specifies a lower limit for the value. If it is smaller, it is set to the limit value
            while raising a warning.
            </summary>
            <param name="value">The value.</param>
            <param name="source">The source.</param>
            <param name="name">The name.</param>
            <param name="limit">The limit.</param>
            <returns>The limited value.</returns>
        </member>
        <member name="M:SpiceSharp.Utility.UpperLimit(System.Int32,System.Object,System.String,System.Int32)">
            <summary>
            Specifies an upper limit for the value. If it is larger, it is set to the limit value
            while raising a warning.
            </summary>
            <param name="value">The value.</param>
            <param name="source">The source.</param>
            <param name="name">The name.</param>
            <param name="limit">The limit.</param>
            <returns>The limited value.</returns>
        </member>
        <member name="M:SpiceSharp.Utility.Finite(System.Double,System.String)">
            <summary>
            Requires the value to be both a number and finite.
            </summary>
            <param name="value">The value.</param>
            <param name="name">The name of the property.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:SpiceSharp.Utility.CheckNodes(System.Collections.Generic.IReadOnlyList{System.String},System.Int32)">
            <summary>
            Checks the number of specified nodes.
            </summary>
            <param name="nodes">The nodes.</param>
            <param name="count">The number of expected nodes.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="nodes"/> or any of the node names in it is <c>null</c>.
            </exception>
            <exception cref="T:SpiceSharp.NodeMismatchException">The number of nodes in <paramref name="nodes"/> does not match <paramref name="count"/>.</exception>
        </member>
        <member name="T:SpiceSharp.GivenParameter`1">
            <summary>
            This class describes a parameter that is optional. Whether or not it was specified can be
            found using the Given variable. It also has a default value when not specified.
            </summary>
            <remarks>
            This class is related to nullable types, but instead of assigning/returning null, we still
            want these parameters to return a default value.
            </remarks>
            <typeparam name="T">The base value type.</typeparam>
            <seealso cref="T:System.IEquatable`1"/>
        </member>
        <member name="P:SpiceSharp.GivenParameter`1.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
            <value>
            The value of the parameter.
            </value>
        </member>
        <member name="P:SpiceSharp.GivenParameter`1.Given">
            <summary>
            Gets whether or not the parameter was specified by the user.
            </summary>
            <value>
            Whether or not the parameter is given.
            </value>
        </member>
        <member name="M:SpiceSharp.GivenParameter`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.GivenParameter`1"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.GivenParameter`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SpiceSharp.GivenParameter`1.op_Implicit(SpiceSharp.GivenParameter{`0})~`0">
            <summary>
            Performs an implicit conversion from <see cref="T:SpiceSharp.GivenParameter`1"/> to the base value type.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SpiceSharp.GivenParameter`1.op_Implicit(`0)~SpiceSharp.GivenParameter{`0}">
            <summary>
            Performs an implicit conversion from the base value type to <see cref="T:SpiceSharp.GivenParameter`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SpiceSharp.GivenParameter`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.GivenParameter`1.Equals(`0)">
            <summary>
            Determines whether the specified value is equal to this instance.
            </summary>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the specified value is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.GivenParameter`1.Equals(SpiceSharp.GivenParameter{`0})">
            <summary>
            Determines whether the specified value is equal to this instance.
            </summary>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the specified value is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.GivenParameter`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
            <remarks>
            The hash code is not based on whether or not the value is given.
            </remarks>
        </member>
        <member name="M:SpiceSharp.GivenParameter`1.op_Equality(SpiceSharp.GivenParameter{`0},SpiceSharp.GivenParameter{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left argument.</param>
            <param name="right">The right argument.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SpiceSharp.GivenParameter`1.op_Inequality(SpiceSharp.GivenParameter{`0},SpiceSharp.GivenParameter{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left argument.</param>
            <param name="right">The right argument.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:SpiceSharp.ParameterSets.IExportPropertySet`1">
            <summary>
            An <see cref="T:SpiceSharp.ParameterSets.IParameterSet"/> that support exporting or getting their values by specifying the
            name of the property. All properties are of the same type.
            </summary>
            <typeparam name="P">The type of the properties.</typeparam>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterSet" />
            <remarks>
            Properties can be named using the <see cref="T:SpiceSharp.Attributes.ParameterNameAttribute" />. This interface
            can be used to link the names to these properties. The recomended way to implement it is
            through the Spice# source generator.
            </remarks>
        </member>
        <member name="M:SpiceSharp.ParameterSets.IExportPropertySet`1.GetPropertyGetter(System.String)">
            <summary>
            Creates a getter for a parameter with the specified name.
            </summary>
            <param name="name">The name of the parameter.</param>
            <returns>
            A getter for the parameter value if it exists; otherwise <c>null</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.ParameterSets.IImportParameterSet`1">
            <summary>
            An <see cref="T:SpiceSharp.ParameterSets.IParameterSet"/> that supports importing or setting parameters by specifying the
            name of the parameter. All parameters are of the same type.
            </summary>
            <typeparam name="P">The type of the parameter values.</typeparam>
            <remarks>
            Properties can be named using the <see cref="T:SpiceSharp.Attributes.ParameterNameAttribute" />. This interface
            can be used to link the names to these properties. The recomended way to implement it is
            through the Spice# source generator.
            </remarks>
        </member>
        <member name="M:SpiceSharp.ParameterSets.IImportParameterSet`1.GetParameterSetter(System.String)">
            <summary>
            Creates a setter for a parameter with the specified name.
            </summary>
            <param name="name">The name of the parameter.</param>
            <returns>
            A setter if the parameter exists; otherwise <c>null</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.ParameterSets.IParameterSetCollection">
            <summary>
            Describes a class or struct that contains multiple parameter sets. These parameter sets can then
            be retrieved by their type.
            </summary>
            <remarks>
            A parameter set collection should generally not contain parameter sets that define parameters or properties with
            identical names. Depending on the implementation it may result in some parameters not being set, or some
            properties becoming inaccessible via the interface methods.
            </remarks>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterSet"/>
        </member>
        <member name="M:SpiceSharp.ParameterSets.IParameterSetCollection.GetParameterSet``1">
            <summary>
            Gets the parameter set of the specified type.
            </summary>
            <typeparam name="P">The parameter set type.</typeparam>
            <returns>
            The parameter set.
            </returns>
            <exception cref="T:SpiceSharp.TypeNotFoundException">Thrown if the parameter set could not be found.</exception>
        </member>
        <member name="M:SpiceSharp.ParameterSets.IParameterSetCollection.TryGetParameterSet``1(``0@)">
            <summary>
            Tries to get the parameter set of the specified type.
            </summary>
            <typeparam name="P">The parameter set type.</typeparam>
            <param name="value">The parameter set.</param>
            <returns>
              <c>true</c> if the parameter set was found; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SpiceSharp.ParameterSets.IParameterSetCollection.ParameterSets">
            <summary>
            Gets all the parameter sets of this instance.
            </summary>
            <value>
            The parameter sets.
            </value>
        </member>
        <member name="T:SpiceSharp.ParameterSets.IParameterized`1">
            <summary>
            An interface that describes a class or struct that defines a parameter set
            of the specified type.
            </summary>
            <typeparam name="P">The parameter set type.</typeparam>
            <remarks>
            This interface allows anyone to check whether a class defines a parameter set of the given type, e.g. for
            <see cref="M:SpiceSharp.ParameterSets.IParameterSetCollection.TryGetParameterSet``1(``0@)"/>.
            </remarks>
        </member>
        <member name="P:SpiceSharp.ParameterSets.IParameterized`1.Parameters">
            <summary>
            Gets the parameter set.
            </summary>
            <value>
            The parameter set.
            </value>
        </member>
        <member name="T:SpiceSharp.ParameterSets.IParameterSet">
            <summary>
            Interface that indicates that a class contains parameters and/or properties
            that are named.
            </summary>
            <remarks>
            Named parameters or properties are tagged with the attribute <see cref="T:SpiceSharp.Attributes.ParameterNameAttribute"/>.
            </remarks>
        </member>
        <member name="M:SpiceSharp.ParameterSets.IParameterSet.SetParameter``1(System.String,``0)">
            <summary>
            Sets a parameter in the parameter set of the specified type and with the specified name.
            </summary>
            <typeparam name="P">The parameter value type.</typeparam>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value that the parameter should be set to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:SpiceSharp.Diagnostics.ParameterNotFoundException">Thrown if a parameter by the specified name could not be found.</exception>
        </member>
        <member name="M:SpiceSharp.ParameterSets.IParameterSet.TrySetParameter``1(System.String,``0)">
            <summary>
            Tries to set a parameter in the parameter set of the specified type and with the specified name.
            </summary>
            <typeparam name="P">The parameter value type.</typeparam>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value that the parameter should be set to.</param>
            <returns>
              <c>true</c> if a parameter was found and set succesfully; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name" /> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.ParameterSets.IParameterSet.GetProperty``1(System.String)">
            <summary>
            Gets the value of a property of the specified type and with the specified name.
            </summary>
            <typeparam name="P">The property value type.</typeparam>
            <param name="name">The name of the property.</param>
            <returns>
            The value of the property.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:SpiceSharp.Diagnostics.ParameterNotFoundException">Thrown if a parameter by the specified name could not be found.</exception>
        </member>
        <member name="M:SpiceSharp.ParameterSets.IParameterSet.TryGetProperty``1(System.String,``0@)">
            <summary>
            Tries to get the value of a property of the specified type and with the specified name.
            </summary>
            <typeparam name="P">The property value type.</typeparam>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property if the property was found.</param>
            <returns>
              <c>true</c> if the property was found and returned; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.ParameterSets.IParameterSet.CreateParameterSetter``1(System.String)">
            <summary>
            Creates an action that can set the parameter of the specified type and with the specified name.
            </summary>
            <typeparam name="P">The parameter value type.</typeparam>
            <param name="name">The name of the parameter.</param>
            <returns>
            An action that can set the parameter value, or <c>null</c> if the parameter could not be found.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.ParameterSets.IParameterSet.CreatePropertyGetter``1(System.String)">
            <summary>
            Creates a function that can get the value of a property of the specified type and with the specified name.
            </summary>
            <typeparam name="P">The property value type.</typeparam>
            <param name="name">The name of the property.</param>
            <returns>
            A function that can get the property value, or <c>null</c> if the property could not be found.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.ParameterSets.ParameterHelper">
            <summary>
            Helper methods for parameters.
            </summary>
        </member>
        <member name="T:SpiceSharp.ParameterSets.ParameterSet">
            <summary>
            The default implementation for a <see cref="T:SpiceSharp.ParameterSets.IParameterSet"/>. It uses reflection as a 
            last line of defense.
            </summary>
            <remarks>
            This class will use the <see cref="T:SpiceSharp.ParameterSets.IExportPropertySet`1"/> or <see cref="T:SpiceSharp.ParameterSets.IImportParameterSet`1"/>
            if they are defined on the class to avoid reflection. If it isn't defined, it will fall back to
            reflection.
            </remarks>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterSet"/>
        </member>
        <member name="M:SpiceSharp.ParameterSets.ParameterSet.SetParameter``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.ParameterSets.ParameterSet.TrySetParameter``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.ParameterSets.ParameterSet.GetProperty``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.ParameterSets.ParameterSet.TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.ParameterSets.ParameterSet.CreateParameterSetter``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.ParameterSets.ParameterSet.CreatePropertyGetter``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.ParameterSets.ParameterSet`1">
            <summary>
            The default implementation for a <see cref="T:SpiceSharp.ParameterSets.IParameterSet"/>, but which is cloneable
            just by copying its members.
            </summary>
            <typeparam name="P">The parameter set type.</typeparam>
        </member>
        <member name="M:SpiceSharp.ParameterSets.ParameterSet`1.Clone">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.ParameterSets.ParameterSetCollection">
            <summary>
            The default implementation of an <see cref="T:SpiceSharp.ParameterSets.IParameterSetCollection"/>. This implementation
            also makes the collection itself an <see cref="T:SpiceSharp.ParameterSets.IParameterSet"/>.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterSetCollection" />
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
        </member>
        <member name="M:SpiceSharp.ParameterSets.ParameterSetCollection.GetParameterSet``1">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.ParameterSets.ParameterSetCollection.TryGetParameterSet``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.ParameterSets.ParameterSetCollection.ParameterSets">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.ParameterSets.ParameterSetCollection.SetParameter``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.ParameterSets.ParameterSetCollection.TrySetParameter``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.ParameterSets.ParameterSetCollection.GetProperty``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.ParameterSets.ParameterSetCollection.TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.ParameterSets.ParameterSetCollection.CreateParameterSetter``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.ParameterSets.ParameterSetCollection.CreatePropertyGetter``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Algebra_BadlyConditioned">
            <summary>
              Looks up a localized string similar to The solver was forced to choose a pivot that did not meet tolerance levels at matrix element ({0}, {1})..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Algebra_InvalidPivot">
            <summary>
              Looks up a localized string similar to The pivot for elimination step {0} is zero..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Algebra_SingularMatrix">
            <summary>
              Looks up a localized string similar to The matrix is singular..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Algebra_SingularMatrixIndexed">
            <summary>
              Looks up a localized string similar to The matrix was found to be singular when eliminating row {0}..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Algebra_SolverNotFactored">
            <summary>
              Looks up a localized string similar to The solver is not factored yet..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Algebra_VectorLengthMismatch">
            <summary>
              Looks up a localized string similar to The vector has {0} elements, but {1} were expected..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Behaviors_BehaviorsAlreadyExist">
            <summary>
              Looks up a localized string similar to There are already behaviors for &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Behaviors_NoBehaviorFor">
            <summary>
              Looks up a localized string similar to Could not find behaviors for &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Components_NodeMismatch">
            <summary>
              Looks up a localized string similar to Node mismatch: {0} nodes expected, but {1} were given..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Components_NodeMismatchNamed">
            <summary>
              Looks up a localized string similar to Node mismatch for &apos;{0}&apos;: {1} nodes expected, but {1} were given..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Components_NoModel">
            <summary>
              Looks up a localized string similar to No model was specified for component &apos;{0}&apos; of type {1}..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Delays_NonCausalDelay">
            <summary>
              Looks up a localized string similar to Non-causal delay detected. Delays should be greater than 0..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Delays_NonIncreasingTime">
            <summary>
              Looks up a localized string similar to Time points are not monotonically increasing. Time goes from {0:e3} to {1:e3}..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.DI_CannotResolveConstructor">
            <summary>
              Looks up a localized string similar to Cannot resolve constructor for &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.DI_InvalidConstructorParameter">
            <summary>
              Looks up a localized string similar to Cannot resolve a parameter of type &apos;{0}&apos; for the constructor of &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Diodes_BreakdownCurrentIncreased">
            <summary>
              Looks up a localized string similar to {0}: breakdown current increased to {1:g5} to resolve incompatibility with specified saturation current..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Diodes_ImpossibleFwdRevMatch">
            <summary>
              Looks up a localized string similar to {0}: unable to match forward and reverse diode region. Bv = {1:g}, ibv = {2:g}..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Element_DefaultMethodNotCreated">
            <summary>
              Looks up a localized string similar to The default method could not be created for this target framework. Please specify Element&lt;T&gt;.Addition and Element&lt;T&gt;.Subtraction manually..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.EntityCollection_KeyExists">
            <summary>
              Looks up a localized string similar to An entity with the name &quot;{0}&quot; already exists..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.IndependentSources_NoDc">
            <summary>
              Looks up a localized string similar to {0} has no DC value, 0 assumed..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.IndependentSources_NoDcUseWaveform">
            <summary>
              Looks up a localized string similar to {0} has no DC value, waveform value at time 0 used..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Mosfets_EffectiveChannelTooSmall">
            <summary>
              Looks up a localized string similar to {0}: effective channel length less than zero..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Nodes_NullToGround">
            <summary>
              Looks up a localized string similar to Node {1} of component {0} was &apos;null&apos;, and was connected to ground..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.NotEnoughElements">
            <summary>
              Looks up a localized string similar to No enough elements..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Parallel_AccessNotSupported">
            <summary>
              Looks up a localized string similar to Parallel access to {0} is not supported..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Parameters_ArgumentCountMismatch">
            <summary>
              Looks up a localized string similar to Expected {2} arguments for {0}, but {1} were passed..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Parameters_Finite">
            <summary>
              Looks up a localized string similar to The parameter value should be finite..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Parameters_IsNaN">
            <summary>
              Looks up a localized string similar to The parameter value should be a number but was NaN..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Parameters_IsZero">
            <summary>
              Looks up a localized string similar to The parameter cannot be zero..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Parameters_LowerLimitReached">
            <summary>
              Looks up a localized string similar to The parameter value of {0} was too small, and was raised from {1} to {2}..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Parameters_NotFoundNamed">
            <summary>
              Looks up a localized string similar to Could not find parameter &apos;{0}&apos; of type &apos;{1}&apos; on {2}..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Parameters_NotFoundTyped">
            <summary>
              Looks up a localized string similar to Could not find a parameter with type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Parameters_NotGreater">
            <summary>
              Looks up a localized string similar to The parameter value should be greater than {0}..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Parameters_NotGreaterOrEqual">
            <summary>
              Looks up a localized string similar to The parameter value should be at least {0}..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Parameters_NotLess">
            <summary>
              Looks up a localized string similar to The parameter value should be less than {0}..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Parameters_NotLessOrEqual">
            <summary>
              Looks up a localized string similar to The parameter value should be at most {0}..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Parameters_NotWithinRange">
            <summary>
              Looks up a localized string similar to The parameter value is outside the allowed range {0}-{1}..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Parameters_ParameterSetNotFound">
            <summary>
              Looks up a localized string similar to A parameter set of type &apos;{0}&apos; could not be found..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Parameters_UpperLimitReached">
            <summary>
              Looks up a localized string similar to The parameter value of {0} was too large, and was reduced from {1} to {2}..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.ParameterSets_NotDefined">
            <summary>
              Looks up a localized string similar to The parameter set of type &apos;{0}&apos; is not defined..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.References_IsEmptyReference">
            <summary>
              Looks up a localized string similar to The reference is empty..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Reflection_NotMatchingType">
            <summary>
              Looks up a localized string similar to The destination type does not match the source..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Reflection_SameName">
            <summary>
              Looks up a localized string similar to The parameter or property &apos;{0}&apos; points to both {1} and {2}..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Resistors_ZeroResistance">
            <summary>
              Looks up a localized string similar to {0}: Model describes short-circuit, 1kOhm used..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Sampler_NoExportEvent">
            <summary>
              Looks up a localized string similar to The simulation {0} does not export simulation data..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Simulation_Biasing_GminSteppingFailed">
            <summary>
              Looks up a localized string similar to Gmin step failed..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Simulation_VariableNotANumber">
            <summary>
              Looks up a localized string similar to The solution of variable &apos;{0}&apos; is not a number for the current iteration..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Simulations_Biasing_NoOp">
            <summary>
              Looks up a localized string similar to Could not determine the operating point..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Simulations_Biasing_SourceSteppingFailed">
            <summary>
              Looks up a localized string similar to Source stepping failed..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Simulations_Biasing_StartDiagonalGminStepping">
            <summary>
              Looks up a localized string similar to Starting diagonal Gmin stepping..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Simulations_Biasing_StartGminStepping">
            <summary>
              Looks up a localized string similar to Starting Gmin stepping..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Simulations_Biasing_StartSourceStepping">
            <summary>
              Looks up a localized string similar to Starting source stepping..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Simulations_CannotRunMultiple">
            <summary>
              Looks up a localized string similar to Cannot run multiple instances of the same simulation..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Simulations_ConvergenceAidVariableNotFound">
            <summary>
              Looks up a localized string similar to Could not set convergence aid: variable &apos;{0}&apos; could not be found..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Simulations_CurrentNotFound">
            <summary>
              Looks up a localized string similar to Could not find a branch current for the entity &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Simulations_DC_NoSweepPoints">
            <summary>
              Looks up a localized string similar to The sweep &apos;{0}&apos; does not contain any points to simulate..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Simulations_DifferentialVoltageNotFound">
            <summary>
              Looks up a localized string similar to Could not find the voltage V({0}, {1})..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Simulations_History_InvalidLength">
            <summary>
              Looks up a localized string similar to Histories cannot track less than one point..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Simulations_InvalidInitializationMode">
            <summary>
              Looks up a localized string similar to Invalid initialization mode..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Simulations_NoEntities">
            <summary>
              Looks up a localized string similar to {0}: there are no entities..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Simulations_PropertyNotfound">
            <summary>
              Looks up a localized string similar to Could not find a property with name &apos;{1}&apos; on an entity with name &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Simulations_Time_MaximumExpansionTooSmall">
            <summary>
              Looks up a localized string similar to The expansion factor should be greater or equal than 1..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Simulations_Time_Terminated">
            <summary>
              Looks up a localized string similar to {0}: transient simulation was terminated..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Simulations_Time_TimestepInvalid">
            <summary>
              Looks up a localized string similar to The timestep is invalid..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Simulations_Time_TimestepTooSmall">
            <summary>
              Looks up a localized string similar to The timestep {0:e5}s is too small at t={1:e5}s..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Simulations_ValidationFailed">
            <summary>
              Looks up a localized string similar to The simulation &apos;{0}&apos; has {1} rule violations..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Simulations_VoltageNotFound">
            <summary>
              Looks up a localized string similar to Could not find the voltage V({0})..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Stateful_NotDefined">
            <summary>
              Looks up a localized string similar to A simulation state of type &apos;{0}&apos; is not defined..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.States_StateNotFoundFor">
            <summary>
              Looks up a localized string similar to Could not find a state of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Subcircuits_NoEquivalent">
            <summary>
              Looks up a localized string similar to Cannot compute an equivalent solution for subcircuit &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Sweeps_PointsTooSmall">
            <summary>
              Looks up a localized string similar to The number of points should be greater than 0..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Sweeps_Unreachable">
            <summary>
              Looks up a localized string similar to Cannot reach the end {0} with the current sweep settings..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Sweeps_ZeroTarget">
            <summary>
              Looks up a localized string similar to A logarithmic sweep cannot start or stop at a value of 0..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.TypeAlreadyExists">
            <summary>
              Looks up a localized string similar to A value of type {0} already exists..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.TypeDictionary_AmbiguousType">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; resolved to multiple instances..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.TypeDictionary_TypeNotFound">
            <summary>
              Looks up a localized string similar to A value of the type &apos;{0}&apos; could not be found..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Units_InvalidExponent">
            <summary>
              Looks up a localized string similar to Invalid exponent. Cannot represent the exponent {0}/{1}..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.VariableDictionary_KeyExists">
            <summary>
              Looks up a localized string similar to A variable with id &apos;{0}&apos; already exists..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.VariableMap_KeyExists">
            <summary>
              Looks up a localized string similar to The variable &apos;{0}&apos; is already mapped..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.VariableNotFound">
            <summary>
              Looks up a localized string similar to A variable by the name of &apos;{0}&apos; could not be found..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Variables_NoVariableFor">
            <summary>
              Looks up a localized string similar to Could not find a variable for &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Waveforms_Pwl_Empty">
            <summary>
              Looks up a localized string similar to No points are specified..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Waveforms_Pwl_NoIncreasingTimeValues">
            <summary>
              Looks up a localized string similar to The time values are not monotonically increasing..
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Waveforms_Pwl_TimeValueLength">
            <summary>
              Looks up a localized string similar to The piece-wise linear function requires the same amount of time and value points..
            </summary>
        </member>
        <member name="T:SpiceSharp.Behaviors.IBiasingBehavior">
            <summary>
            An interface that describes behaviors for biasing in a <see cref="T:SpiceSharp.Simulations.IBiasingSimulation" />.
            This behavior is responsible for calculating the DC equivalent behavior of an entity, ie. for biasing the circuit.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.IBehavior" />
        </member>
        <member name="M:SpiceSharp.Behaviors.IBiasingBehavior.Load">
            <summary>
            Loads the Y-matrix and right hand side vector.
            </summary>
            <exception cref="T:SpiceSharp.SpiceSharpException">Thrown if the behavior can't load the matrix and/or right hand side vector.</exception>
        </member>
        <member name="T:SpiceSharp.Behaviors.IBiasingUpdateBehavior">
            <summary>
            A <see cref="T:SpiceSharp.Behaviors.IBiasingBehavior"/> that can update after solving an iteration of a <see cref="T:SpiceSharp.Simulations.IBiasingSimulation"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.IBehavior" />
        </member>
        <member name="M:SpiceSharp.Behaviors.IBiasingUpdateBehavior.Update">
            <summary>
            Updates the behavior with the new solution.
            </summary>
        </member>
        <member name="T:SpiceSharp.Behaviors.IConvergenceBehavior">
            <summary>
            Interface for an <see cref="T:SpiceSharp.Behaviors.IBiasingBehavior"/> that can check for convergence.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.IBiasingBehavior" />
        </member>
        <member name="M:SpiceSharp.Behaviors.IConvergenceBehavior.IsConvergent">
            <summary>
            Tests convergence at the device-level.
            </summary>
            <returns>
              <c>true</c> if the device determines the solution converges; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SpiceSharp.Behaviors.ITemperatureBehavior">
            <summary>
            An interface that describes temperature-dependent behaviors.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.IBehavior" />
        </member>
        <member name="M:SpiceSharp.Behaviors.ITemperatureBehavior.Temperature">
            <summary>
            Perform temperature-dependent calculations.
            </summary>
        </member>
        <member name="T:SpiceSharp.Behaviors.IFrequencyBehavior">
            <summary>
            Interface that describes frequency-dependent behaviors.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.IBehavior" />
        </member>
        <member name="M:SpiceSharp.Behaviors.IFrequencyBehavior.InitializeParameters">
            <summary>
            Initializes the parameters.
            </summary>
        </member>
        <member name="M:SpiceSharp.Behaviors.IFrequencyBehavior.Load">
            <summary>
            Load the Y-matrix and right hand side vector for frequency domain analysis.
            </summary>
        </member>
        <member name="T:SpiceSharp.Behaviors.IFrequencyUpdateBehavior">
            <summary>
            An <see cref="T:SpiceSharp.Behaviors.IFrequencyBehavior"/> that can update after solving an iteration of a <see cref="T:SpiceSharp.Simulations.FrequencySimulation"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.IBehavior" />
        </member>
        <member name="M:SpiceSharp.Behaviors.IFrequencyUpdateBehavior.Update">
            <summary>
            Updates the behavior with the new solution.
            </summary>
        </member>
        <member name="T:SpiceSharp.Behaviors.Behavior">
            <summary>
            A base template for an <see cref="T:SpiceSharp.Behaviors.IBehavior"/>.
            </summary>
            <remarks>
            This class also allows the behavior to define its own named parameters and properties,
            as well as link to existing <see cref="T:SpiceSharp.ParameterSets.IParameterSet"/> classes.
            </remarks>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSetCollection"/>
            <seealso cref="T:SpiceSharp.Behaviors.IBehavior"/>
        </member>
        <member name="P:SpiceSharp.Behaviors.Behavior.Name">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Behaviors.Behavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Behaviors.Behavior"/> class.
            </summary>
            <param name="name">The name of the behavior.</param>
            <remarks>
            The name of the behavior should be the same as that of the entity creating it.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Behaviors.Behavior.#ctor(SpiceSharp.Entities.IBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Behaviors.Behavior"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:SpiceSharp.Behaviors.BehaviorContainer">
            <summary>
            A dictionary of <see cref="T:SpiceSharp.Behaviors.Behavior" />. Only on instance of each type is allowed.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.IBehaviorContainer" />
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterSetCollection"/>
        </member>
        <member name="T:SpiceSharp.Behaviors.BehaviorContainer.BehaviorContainerBuilder`1">
            <summary>
            Default implementation of the <see cref="T:SpiceSharp.Behaviors.IBehaviorContainerBuilder`1"/>.
            </summary>
            <typeparam name="TContext">The type of binding context.</typeparam>
            <seealso cref="T:SpiceSharp.Behaviors.IBehaviorContainerBuilder`1" />
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorContainer.BehaviorContainerBuilder`1.#ctor(SpiceSharp.Behaviors.IBehaviorContainer,SpiceSharp.Simulations.ISimulation,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Behaviors.BehaviorContainer.BehaviorContainerBuilder`1"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorContainer.BehaviorContainerBuilder`1.AddIfNo``1(System.Func{`0,SpiceSharp.Behaviors.IBehavior})">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Behaviors.BehaviorContainer.Name">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorContainer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Behaviors.BehaviorContainer"/> class.
            </summary>
            <param name="source">The entity name that will provide the behaviors.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorContainer.GetParameterSet``1">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorContainer.TryGetParameterSet``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Behaviors.BehaviorContainer.ParameterSets">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorContainer.SetParameter``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorContainer.TrySetParameter``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorContainer.CreateParameterSetter``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorContainer.GetProperty``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorContainer.TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorContainer.CreatePropertyGetter``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorContainer.Build``1(SpiceSharp.Simulations.ISimulation,``0)">
            <inheritdoc/>
        </member>
        <member name="T:SpiceSharp.Behaviors.BehaviorContainerCollection">
            <summary>
            A pool of all behaviors. This class will keep track which behavior belongs to which entity. Only behaviors can be requested from the collection.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.IBehaviorContainerCollection"/>
        </member>
        <member name="E:SpiceSharp.Behaviors.BehaviorContainerCollection.BehaviorsNotFound">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Behaviors.BehaviorContainerCollection.Count">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Behaviors.BehaviorContainerCollection.Keys">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Behaviors.BehaviorContainerCollection.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:SpiceSharp.Behaviors.BehaviorContainerCollection.Comparer">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorContainerCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Behaviors.BehaviorContainerCollection" /> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorContainerCollection.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Behaviors.BehaviorContainerCollection"/> class.
            </summary>
            <param name="comparer">The comparer for behaviors.</param>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorContainerCollection.Add(SpiceSharp.Behaviors.IBehaviorContainer)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorContainerCollection.GetBehaviorList``1">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorContainerCollection.TryGetBehaviors(System.String,SpiceSharp.Behaviors.IBehaviorContainer@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorContainerCollection.Contains(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorContainerCollection.Clear">
            <inheritdoc/>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorContainerCollection.OnBehaviorsNotFound(SpiceSharp.Behaviors.BehaviorsNotFoundEventArgs)">
            <summary>
            Raises the <see cref="E:SpiceSharp.Behaviors.BehaviorContainerCollection.BehaviorsNotFound" /> event.
            </summary>
            <param name="args">The <see cref="T:SpiceSharp.Behaviors.BehaviorsNotFoundEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorContainerCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorContainerCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:SpiceSharp.Behaviors.BehaviorList`1">
            <summary>
            Class representing an ordered list of behaviors.
            </summary>
            <typeparam name="T">The base behavior type.</typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>
        </member>
        <member name="P:SpiceSharp.Behaviors.BehaviorList`1.Item(System.Int32)">
            <summary>
            Gets the behavior at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The behavior at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index exceeds the bounds of the list.</exception>
        </member>
        <member name="P:SpiceSharp.Behaviors.BehaviorList`1.Count">
            <summary>
            Gets the number of behaviors in the list.
            </summary>
            <value>
            The number of behaviors in the list.
            </value>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Behaviors.BehaviorList`1"/> class.
            </summary>
            <param name="behaviors">An enumeration of all behaviors that need to be added.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="behaviors"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:SpiceSharp.Behaviors.BehaviorsNotFoundEventArgs">
            <summary>
            Event arguments
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:SpiceSharp.Behaviors.BehaviorsNotFoundEventArgs.Name">
            <summary>
            Gets the name of the entity that has no behaviors.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:SpiceSharp.Behaviors.BehaviorsNotFoundEventArgs.Behaviors">
            <summary>
            Gets or sets the behaviors associated with the name.
            </summary>
            <value>
            The behaviors.
            </value>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorsNotFoundEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Behaviors.BehaviorsNotFoundEventArgs"/> class.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.Behaviors.IBehavior">
            <summary>
            Contract for a behavior.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterSet"/>
        </member>
        <member name="P:SpiceSharp.Behaviors.IBehavior.Name">
            <summary>
            Gets the name of the behavior.
            </summary>
            <value>
            The name of the behavior.
            </value>
            <remarks>
            This is typically the name of the entity that created it.
            </remarks>
        </member>
        <member name="T:SpiceSharp.Behaviors.IBehaviorContainer">
            <summary>
            A container for behaviors
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterSetCollection"/>
        </member>
        <member name="P:SpiceSharp.Behaviors.IBehaviorContainer.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name of the behavior container.
            </value>
            <remarks>
            This is typically the name of the entity that creates the behaviors in this container.
            </remarks>
        </member>
        <member name="T:SpiceSharp.Behaviors.IBehaviorContainerBuilder`1">
            <summary>
            A builder for behavior containers.
            </summary>
            <typeparam name="TContext">The type of binding context.</typeparam>
        </member>
        <member name="M:SpiceSharp.Behaviors.IBehaviorContainerBuilder`1.AddIfNo``1(System.Func{`0,SpiceSharp.Behaviors.IBehavior})">
            <summary>
            Adds a behavior if the specified behavior does not yet exist in the container.
            </summary>
            <typeparam name="TBehavior">The target type of the behavior.</typeparam>
            <param name="factory">The factory.</param>
            <returns>
            The original container builder. This can be used for chaining.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="factory"/> is <c>null</c>.</exception>
        </member>
        <member name="T:SpiceSharp.Behaviors.IBehaviorContainerCollection">
            <summary>
            An interface that describes a collection of <see cref="T:SpiceSharp.Behaviors.IBehaviorContainer"/> instances.
            </summary>
        </member>
        <member name="E:SpiceSharp.Behaviors.IBehaviorContainerCollection.BehaviorsNotFound">
            <summary>
            Occurs when a behavior has not been found.
            </summary>
        </member>
        <member name="P:SpiceSharp.Behaviors.IBehaviorContainerCollection.Count">
            <summary>
            Gets the number of behavior containers in the collection.
            </summary>
            <value>
            The number of behavior containers.
            </value>
        </member>
        <member name="P:SpiceSharp.Behaviors.IBehaviorContainerCollection.Keys">
            <summary>
            Gets the behavior container names.
            </summary>
            <value>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> object that contains the name of each <see cref="T:SpiceSharp.Behaviors.BehaviorContainer"/>.
            </value>
        </member>
        <member name="P:SpiceSharp.Behaviors.IBehaviorContainerCollection.Comparer">
            <summary>
            Gets the comparer used to identify elements.
            </summary>
            <value>
            The comparer.
            </value>
        </member>
        <member name="P:SpiceSharp.Behaviors.IBehaviorContainerCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:SpiceSharp.Behaviors.IBehaviorContainer"/> with the specified name.
            </summary>
            <value>
            The <see cref="T:SpiceSharp.Behaviors.IBehaviorContainer"/>.
            </value>
            <param name="name">The name.</param>
            <returns>The container associated to the specified name.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:SpiceSharp.BehaviorsNotFoundException">Thrown if the behavior container of the specified name could not be found.</exception>
        </member>
        <member name="M:SpiceSharp.Behaviors.IBehaviorContainerCollection.Add(SpiceSharp.Behaviors.IBehaviorContainer)">
            <summary>
            Adds the <see cref="T:SpiceSharp.Behaviors.IBehaviorContainer"/> with the specified name.
            </summary>
            <param name="container">The behavior container.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="container"/> if <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if a behavior container already exists with the same name.</exception>
        </member>
        <member name="M:SpiceSharp.Behaviors.IBehaviorContainerCollection.GetBehaviorList``1">
            <summary>
            Gets a list of behaviors of a specific behavior type.
            </summary>
            <typeparam name="B">The <see cref="T:SpiceSharp.Behaviors.IBehavior"/> type.</typeparam>
            <returns>
            A <see cref="T:SpiceSharp.Behaviors.BehaviorList`1"/> with all behaviors of the specified type.
            </returns>
        </member>
        <member name="M:SpiceSharp.Behaviors.IBehaviorContainerCollection.TryGetBehaviors(System.String,SpiceSharp.Behaviors.IBehaviorContainer@)">
            <summary>
            Tries to get the behavior container associated with the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="container">The container.</param>
            <returns>
            <c>true</c> if the behavior was found; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Behaviors.IBehaviorContainerCollection.Contains(System.String)">
            <summary>
            Determines whether this instance contains a container by the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>
              <c>true</c> if the collection contains the container; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SpiceSharp.Behaviors.IBehaviorContainerCollection.Clear">
            <summary>
            Clears all containers in the collection.
            </summary>
        </member>
        <member name="T:SpiceSharp.Behaviors.INoiseBehavior">
            <summary>
            A behavior that is used by <see cref="T:SpiceSharp.Simulations.Noise" />.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.IBehavior" />
        </member>
        <member name="M:SpiceSharp.Behaviors.INoiseBehavior.Load">
            <summary>
            Loads the noise behavior. Can be used to apply the inputs of the noise simulation.
            </summary>
            <remarks>
            This method is run right before forward substitution of the transposed matrix 
            when iterating for noise.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Behaviors.INoiseBehavior.Compute">
            <summary>
            Computes the noise contributions.
            </summary>
            <remarks>
            This method is called right after performing backward substitution
            and storing the solution.
            </remarks>
        </member>
        <member name="T:SpiceSharp.Behaviors.IAcceptBehavior">
            <summary>
            Behavior that can accept a time point.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.IBehavior" />
        </member>
        <member name="M:SpiceSharp.Behaviors.IAcceptBehavior.Probe">
            <summary>
            Called when a new timepoint is being tested.
            </summary>
        </member>
        <member name="M:SpiceSharp.Behaviors.IAcceptBehavior.Accept">
            <summary>
            Accepts the current timepoint.
            </summary>
        </member>
        <member name="T:SpiceSharp.Behaviors.ITimeBehavior">
            <summary>
            An interface for time-dependent behaviors.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.IBehavior" />
        </member>
        <member name="M:SpiceSharp.Behaviors.ITimeBehavior.InitializeStates">
            <summary>
            Initialize the state values from the current DC solution.
            </summary>
            <remarks>
            In this method, the initial value is calculated based on the operating point solution,
            and the result is stored in each respective <see cref="T:SpiceSharp.Simulations.IDerivative" /> or <see cref="T:SpiceSharp.Simulations.IIntegrationState" />.
            </remarks>
        </member>
        <member name="T:SpiceSharp.Behaviors.ITruncatingBehavior">
            <summary>
            Describes a class that is capable of truncating a timestep.
            </summary>
        </member>
        <member name="M:SpiceSharp.Behaviors.ITruncatingBehavior.Prepare">
            <summary>
            Calculate the maximum timestep that the behavior allows for our next time point.
            </summary>
            <returns>The timestep.</returns>
        </member>
        <member name="M:SpiceSharp.Behaviors.ITruncatingBehavior.Evaluate">
            <summary>
            Evaluate the currently calculated solution and return the maximum timestep
            that this behavior allows.
            </summary>
            <returns>The timestep.</returns>
        </member>
        <member name="T:SpiceSharp.Validation.BaseRules">
            <summary>
            A base rule provider implementation.
            </summary>
            <seealso cref="T:SpiceSharp.Validation.IRules" />
        </member>
        <member name="P:SpiceSharp.Validation.BaseRules.ViolationCount">
            <summary>
            Gets the number of rules that are violated.
            </summary>
            <value>
            The number of violated rules.
            </value>
        </member>
        <member name="P:SpiceSharp.Validation.BaseRules.Violations">
            <summary>
            Gets the violated rules.
            </summary>
            <value>
            The violated rules.
            </value>
        </member>
        <member name="M:SpiceSharp.Validation.BaseRules.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.Validation.BaseRules.Reset">
            <summary>
            Resets all the rules.
            </summary>
        </member>
        <member name="M:SpiceSharp.Validation.BaseRules.GetRules``1">
            <summary>
            Gets all rules of the specified type.
            </summary>
            <typeparam name="R">The rule type.</typeparam>
            <returns>
            The rules of the specified type.
            </returns>
        </member>
        <member name="M:SpiceSharp.Validation.BaseRules.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:SpiceSharp.Validation.ComponentRuleParameters">
            <summary>
            Validation parameters for <see cref="T:SpiceSharp.Components.IComponent"/>. This means interconnected entities.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.ParameterSet" />
        </member>
        <member name="P:SpiceSharp.Validation.ComponentRuleParameters.Factory">
            <summary>
            Gets the variables.
            </summary>
            <value>
            The variables.
            </value>
        </member>
        <member name="P:SpiceSharp.Validation.ComponentRuleParameters.Comparer">
            <summary>
            Gets the comparer used to compare variable names.
            </summary>
            <value>
            The comparer.
            </value>
        </member>
        <member name="M:SpiceSharp.Validation.ComponentRuleParameters.#ctor(SpiceSharp.Simulations.IVariableFactory{SpiceSharp.Simulations.IVariable},System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Validation.ComponentRuleParameters"/> class.
            </summary>
            <param name="factory">The variable factory.</param>
            <param name="comparer">The comparer for comparing variable names.</param>
        </member>
        <member name="M:SpiceSharp.Validation.ComponentRuleParameters.Clone">
            <inheritdoc/>
            <remarks>
            We can't really do a deep clone for this. But both the factory
            and the comparer are supposed to be linking to the same thing
            anyway.
            </remarks>
        </member>
        <member name="T:SpiceSharp.Validation.FloatingNodeRule">
            <summary>
            An <see cref="T:SpiceSharp.Validation.IConductiveRule"/> that checks for the presence of a floating node.
            </summary>
            <seealso cref="T:SpiceSharp.Validation.IConductiveRule" />
        </member>
        <member name="P:SpiceSharp.Validation.FloatingNodeRule.FixedVariable">
            <summary>
            Gets or sets the fixed-potential node.
            </summary>
            <value>
            The fixed-potential node.
            </value>
        </member>
        <member name="P:SpiceSharp.Validation.FloatingNodeRule.ViolationCount">
            <summary>
            Gets the number of violations of this rule.
            </summary>
            <value>
            The violation count.
            </value>
        </member>
        <member name="P:SpiceSharp.Validation.FloatingNodeRule.Violations">
            <summary>
            Gets the violations.
            </summary>
            <value>
            The violations.
            </value>
        </member>
        <member name="M:SpiceSharp.Validation.FloatingNodeRule.#ctor(SpiceSharp.Simulations.IVariable)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Validation.FloatingNodeRule"/> class.
            </summary>
            <param name="fixedVariable">The fixed-potential variable.</param>
        </member>
        <member name="M:SpiceSharp.Validation.FloatingNodeRule.Reset">
            <summary>
            Resets the rule.
            </summary>
        </member>
        <member name="M:SpiceSharp.Validation.FloatingNodeRule.Contains(SpiceSharp.Simulations.Variable)">
            <summary>
            Determines whether this rule encountered the specified variable.
            </summary>
            <param name="variable">The variable.</param>
            <returns>
              <c>true</c> if the specified variable was encountered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Validation.FloatingNodeRule.AddPath(SpiceSharp.Validation.IRuleSubject,SpiceSharp.Simulations.IVariable[])">
            <summary>
            Applies the specified variables as being connected by a conductive path.
            </summary>
            <param name="subject">The rule subject.</param>
            <param name="variables">The variables.</param>
        </member>
        <member name="M:SpiceSharp.Validation.FloatingNodeRule.AddPath(SpiceSharp.Validation.IRuleSubject,SpiceSharp.Validation.ConductionTypes,SpiceSharp.Simulations.IVariable[])">
            <summary>
            Specifies variables as being connected by a conductive path of the specified type.
            </summary>
            <param name="subject">The subject that applies the conductive paths.</param>
            <param name="type">The type of path between these variables.</param>
            <param name="variables">The variables that are connected.</param>
        </member>
        <member name="M:SpiceSharp.Validation.FloatingNodeRule.AddPath(SpiceSharp.Simulations.IVariable,SpiceSharp.Simulations.IVariable,SpiceSharp.Validation.ConductionTypes)">
            <summary>
            Adds a path between two variables.
            </summary>
            <param name="a">The first variable.</param>
            <param name="b">The second variable.</param>
            <param name="type">The path type.</param>
        </member>
        <member name="M:SpiceSharp.Validation.FloatingNodeRule.Connect(SpiceSharp.Simulations.IVariable,SpiceSharp.Simulations.IVariable,System.Collections.Generic.Dictionary{SpiceSharp.Simulations.IVariable,SpiceSharp.Validation.Components.Group},System.Int32@)">
            <summary>
            Connects the specified variables for a group.
            </summary>
            <param name="a">The first variable.</param>
            <param name="b">The second variable.</param>
            <param name="groups">The group.</param>
            <param name="counter">The counter to keep track of the number of distinct groups.</param>
        </member>
        <member name="M:SpiceSharp.Validation.FloatingNodeRule.Add(SpiceSharp.Simulations.IVariable,System.Collections.Generic.Dictionary{SpiceSharp.Simulations.IVariable,SpiceSharp.Validation.Components.Group},System.Int32@)">
            <summary>
            Adds the specified variable as a new group.
            </summary>
            <param name="a">The variable.</param>
            <param name="groups">The group.</param>
            <param name="counter">The counter to keep track of the number of distinct groups.</param>
        </member>
        <member name="T:SpiceSharp.Validation.FloatingNodeRuleViolation">
            <summary>
            An <see cref="T:SpiceSharp.Validation.IRuleViolation"/> for a <see cref="T:SpiceSharp.Validation.FloatingNodeRule"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Validation.IRuleViolation" />
        </member>
        <member name="P:SpiceSharp.Validation.FloatingNodeRuleViolation.FloatingVariable">
            <summary>
            Gets the floating node variable.
            </summary>
            <value>
            The floating node variable.
            </value>
        </member>
        <member name="P:SpiceSharp.Validation.FloatingNodeRuleViolation.FixedVariable">
            <summary>
            Gets the fixed node variable.
            </summary>
            <value>
            The fixed node variable.
            </value>
        </member>
        <member name="P:SpiceSharp.Validation.FloatingNodeRuleViolation.Type">
            <summary>
            Gets the type of connection to the fixed variable.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:SpiceSharp.Validation.FloatingNodeRuleViolation.Rule">
            <summary>
            Gets the rule that was violated.
            </summary>
            <value>
            The violated rule.
            </value>
        </member>
        <member name="P:SpiceSharp.Validation.FloatingNodeRuleViolation.Subject">
            <summary>
            Gets the subject that caused the rule violation (if any).
            </summary>
            <value>
            The subject that caused the violation.
            </value>
        </member>
        <member name="M:SpiceSharp.Validation.FloatingNodeRuleViolation.#ctor(SpiceSharp.Validation.IRule,SpiceSharp.Simulations.IVariable,SpiceSharp.Simulations.IVariable,SpiceSharp.Validation.ConductionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Validation.FloatingNodeRuleViolation" /> class.
            </summary>
            <param name="rule">The rule.</param>
            <param name="floatingVariable">The floating node variable.</param>
            <param name="fixedVariable">The fixed node variable.</param>
            <param name="type">The path type.</param>
        </member>
        <member name="T:SpiceSharp.Validation.Components.Group">
            <summary>
            A group of variables.
            </summary>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
        </member>
        <member name="P:SpiceSharp.Validation.Components.Group.Count">
            <summary>
            Gets the number of nodes.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="M:SpiceSharp.Validation.Components.Group.#ctor(SpiceSharp.Simulations.IVariable,SpiceSharp.Simulations.IVariable[])">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Validation.Components.Group"/> class.
            </summary>
            <param name="first">The first variable.</param>
            <param name="variables">Any other variables in the group.</param>
        </member>
        <member name="M:SpiceSharp.Validation.Components.Group.Add(SpiceSharp.Simulations.IVariable)">
            <summary>
            Adds the specified variable.
            </summary>
            <param name="variable">The variable.</param>
        </member>
        <member name="M:SpiceSharp.Validation.Components.Group.Join(SpiceSharp.Validation.Components.Group)">
            <summary>
            Joins the specified group.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:SpiceSharp.Validation.Components.Group.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.Validation.Components.Group.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:SpiceSharp.Validation.Components.IComponentRule">
            <summary>
            Describes a rule for an <see cref="T:SpiceSharp.Components.IComponent"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Validation.IRule" />
        </member>
        <member name="M:SpiceSharp.Validation.Components.IComponentRule.Apply(SpiceSharp.Components.IComponent)">
            <summary>
            Applies the specified component.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="T:SpiceSharp.Validation.IAppliedVoltageRule">
            <summary>
            An <see cref="T:SpiceSharp.Validation.IRule"/> that allows specifying an applied voltage.
            </summary>
            <seealso cref="T:SpiceSharp.Validation.IRule" />
        </member>
        <member name="M:SpiceSharp.Validation.IAppliedVoltageRule.Fix(SpiceSharp.Validation.IRuleSubject,SpiceSharp.Simulations.IVariable,SpiceSharp.Simulations.IVariable)">
            <summary>
            Fixes the voltage difference between two node variables.
            </summary>
            <param name="subject">The subject that applies to the rule.</param>
            <param name="first">The first variable.</param>
            <param name="second">The second variable.</param>
        </member>
        <member name="T:SpiceSharp.Validation.IConductiveRule">
            <summary>
            An <see cref="T:SpiceSharp.Validation.IRule"/> that allows specifying an unconditionally conductive path.
            </summary>
            <seealso cref="T:SpiceSharp.Validation.IRule" />
        </member>
        <member name="M:SpiceSharp.Validation.IConductiveRule.AddPath(SpiceSharp.Validation.IRuleSubject,SpiceSharp.Simulations.IVariable[])">
            <summary>
            Specifies variables as being unconditionally connected by a conductive path.
            </summary>
            <param name="subject">The subject that applies the conductive paths.</param>
            <param name="variables">The variables that are connected.</param>
        </member>
        <member name="M:SpiceSharp.Validation.IConductiveRule.AddPath(SpiceSharp.Validation.IRuleSubject,SpiceSharp.Validation.ConductionTypes,SpiceSharp.Simulations.IVariable[])">
            <summary>
            Specifies variables as being connected by a conductive path of the specified type.
            </summary>
            <param name="subject">The subject that applies the conductive paths.</param>
            <param name="type">The type of path between these variables.</param>
            <param name="variables">The variables that are connected.</param>
        </member>
        <member name="T:SpiceSharp.Validation.ConductionTypes">
            <summary>
            An enumeration of conduvtive path types.
            </summary>
        </member>
        <member name="F:SpiceSharp.Validation.ConductionTypes.None">
            <summary>
            Indicates an unconnected path.
            </summary>
        </member>
        <member name="F:SpiceSharp.Validation.ConductionTypes.Dc">
            <summary>
            Indicates a path that is conductive for DC solutions.
            </summary>
        </member>
        <member name="F:SpiceSharp.Validation.ConductionTypes.Ac">
            <summary>
            Indicates a path that is conductive for all non-zero frequencuencies.
            </summary>
        </member>
        <member name="F:SpiceSharp.Validation.ConductionTypes.Time">
            <summary>
            Indicates a path that is conductive for time-varying signals. Ie. it has
            a solution if an initial condition is known.
            </summary>
        </member>
        <member name="F:SpiceSharp.Validation.ConductionTypes.All">
            <summary>
            Indicates a path that is unconditionally conducting.
            </summary>
        </member>
        <member name="T:SpiceSharp.Validation.VariablePresenceRule">
            <summary>
            An <see cref="T:SpiceSharp.Validation.IConductiveRule"/> that will check for the presence of a specific variable.
            </summary>
            <seealso cref="T:SpiceSharp.Validation.IConductiveRule" />
        </member>
        <member name="P:SpiceSharp.Validation.VariablePresenceRule.ViolationCount">
            <summary>
            Gets the number of violations of this rule.
            </summary>
            <value>
            The violation count.
            </value>
        </member>
        <member name="P:SpiceSharp.Validation.VariablePresenceRule.Violations">
            <summary>
            Gets the rule violations.
            </summary>
            <value>
            The rule violations.
            </value>
        </member>
        <member name="M:SpiceSharp.Validation.VariablePresenceRule.#ctor(SpiceSharp.Simulations.IVariable)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Validation.VariablePresenceRule"/> class.
            </summary>
            <param name="search">The varibale that needs to be present.</param>
        </member>
        <member name="M:SpiceSharp.Validation.VariablePresenceRule.Reset">
            <summary>
            Resets the rule.
            </summary>
        </member>
        <member name="M:SpiceSharp.Validation.VariablePresenceRule.AddPath(SpiceSharp.Validation.IRuleSubject,SpiceSharp.Simulations.IVariable[])">
            <summary>
            Applies the specified variables as being connected by a conductive path.
            </summary>
            <param name="subject">The rule subject.</param>
            <param name="variables">The variables.</param>
        </member>
        <member name="M:SpiceSharp.Validation.VariablePresenceRule.AddPath(SpiceSharp.Validation.IRuleSubject,SpiceSharp.Validation.ConductionTypes,SpiceSharp.Simulations.IVariable[])">
            <summary>
            Specifies variables as being connected by a conductive path of the specified type.
            </summary>
            <param name="subject">The subject that applies the conductive paths.</param>
            <param name="type">The type of path between these variables.</param>
            <param name="variables">The variables that are connected.</param>
        </member>
        <member name="T:SpiceSharp.Validation.VariablePresenceRuleViolation">
            <summary>
            An <see cref="T:SpiceSharp.Validation.IRuleViolation"/> for a <see cref="T:SpiceSharp.Validation.VariablePresenceRule"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Validation.IRuleViolation" />
        </member>
        <member name="P:SpiceSharp.Validation.VariablePresenceRuleViolation.Variable">
            <summary>
            Gets the variable that needed to be found.
            </summary>
            <value>
            The searched variable.
            </value>
        </member>
        <member name="P:SpiceSharp.Validation.VariablePresenceRuleViolation.Rule">
            <summary>
            Gets the rule that was violated.
            </summary>
            <value>
            The violated rule.
            </value>
        </member>
        <member name="P:SpiceSharp.Validation.VariablePresenceRuleViolation.Subject">
            <summary>
            Gets the subject that caused the rule violation (if any).
            </summary>
            <value>
            The subject that caused the violation.
            </value>
        </member>
        <member name="M:SpiceSharp.Validation.VariablePresenceRuleViolation.#ctor(SpiceSharp.Validation.IRule,SpiceSharp.Simulations.IVariable)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Validation.VariablePresenceRuleViolation"/> class.
            </summary>
            <param name="rule">The rule.</param>
            <param name="variable">The variable.</param>
        </member>
        <member name="T:SpiceSharp.Validation.VoltageLoopRule">
            <summary>
            An implementation for a <see cref="T:SpiceSharp.Validation.IAppliedVoltageRule"/>. This class
            will check for voltage loops.
            </summary>
            <seealso cref="T:SpiceSharp.Validation.IAppliedVoltageRule" />
        </member>
        <member name="P:SpiceSharp.Validation.VoltageLoopRule.ViolationCount">
            <summary>
            Gets the number of violations of this rule.
            </summary>
            <value>
            The violation count.
            </value>
        </member>
        <member name="P:SpiceSharp.Validation.VoltageLoopRule.Violations">
            <summary>
            Gets the rule violations.
            </summary>
            <value>
            The rule violations.
            </value>
        </member>
        <member name="M:SpiceSharp.Validation.VoltageLoopRule.Reset">
            <summary>
            Resets the rule.
            </summary>
        </member>
        <member name="M:SpiceSharp.Validation.VoltageLoopRule.Fix(SpiceSharp.Validation.IRuleSubject,SpiceSharp.Simulations.IVariable,SpiceSharp.Simulations.IVariable)">
            <summary>
            Fixes the voltage difference between two node variables.
            </summary>
            <param name="subject">The subject that applies to the rule.</param>
            <param name="a">The first variable.</param>
            <param name="b">The second variable.</param>
        </member>
        <member name="T:SpiceSharp.Validation.VoltageLoopRuleViolation">
            <summary>
            A rule violation of a <see cref="T:SpiceSharp.Validation.VoltageLoopRule"/>.
            </summary>
            <seealso cref="T:SpiceSharp.Validation.IRuleViolation" />
        </member>
        <member name="P:SpiceSharp.Validation.VoltageLoopRuleViolation.Rule">
            <summary>
            Gets the rule that was violated.
            </summary>
            <value>
            The violated rule.
            </value>
        </member>
        <member name="P:SpiceSharp.Validation.VoltageLoopRuleViolation.Subject">
            <summary>
            Gets the subject that caused the rule violation (if any).
            </summary>
            <value>
            The subject that caused the violation.
            </value>
        </member>
        <member name="P:SpiceSharp.Validation.VoltageLoopRuleViolation.First">
            <summary>
            Gets the first node that is being fixed.
            </summary>
            <value>
            The first node.
            </value>
        </member>
        <member name="P:SpiceSharp.Validation.VoltageLoopRuleViolation.Second">
            <summary>
            Gets the second node that is being fixed.
            </summary>
            <value>
            The second node.
            </value>
        </member>
        <member name="M:SpiceSharp.Validation.VoltageLoopRuleViolation.#ctor(SpiceSharp.Validation.VoltageLoopRule,SpiceSharp.Validation.IRuleSubject,SpiceSharp.Simulations.IVariable,SpiceSharp.Simulations.IVariable)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Validation.VoltageLoopRuleViolation"/> class.
            </summary>
            <param name="rule">The rule.</param>
            <param name="subject">The subject.</param>
            <param name="first">The first node.</param>
            <param name="second">The second node.</param>
        </member>
        <member name="T:SpiceSharp.Validation.GenericRules">
            <summary>
            A generic rule provider that can have any custom set of rules.
            </summary>
            <seealso cref="T:SpiceSharp.Validation.IRules" />
        </member>
        <member name="M:SpiceSharp.Validation.GenericRules.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Validation.GenericRules"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Validation.GenericRules.#ctor(SpiceSharp.Validation.IRule[])">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Validation.GenericRules"/> class.
            </summary>
            <param name="rules">The rules.</param>
        </member>
        <member name="M:SpiceSharp.Validation.GenericRules.#ctor(System.Collections.Generic.IEnumerable{SpiceSharp.Validation.IRule})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Validation.GenericRules"/> class.
            </summary>
            <param name="rules">The rules.</param>
        </member>
        <member name="M:SpiceSharp.Validation.GenericRules.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:SpiceSharp.Validation.Helpers">
            <summary>
            A few helper methods for validation.
            </summary>
        </member>
        <member name="M:SpiceSharp.Validation.Helpers.IsValid(SpiceSharp.Entities.IEntityCollection)">
            <summary>
            Returns true if the specified entity collection is valid under the default rules.
            </summary>
            <param name="entities">The entities.</param>
            <returns>
              <c>true</c> if the specified entities are valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Validation.Helpers.Validate(SpiceSharp.Entities.IEntityCollection)">
            <summary>
            Validates the collection of entities using the default rules.
            </summary>
            <param name="entities">The entities.</param>
            <returns>
            The rules used to validate the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.Validation.Helpers.Validate(SpiceSharp.Entities.IEntityCollection,SpiceSharp.Validation.IRules)">
            <summary>
            Validates the collection of entities using the specified rules.
            </summary>
            <param name="entities">The entities.</param>
            <param name="rules">The rules.</param>
            <returns>
            The rules passed by the 
            </returns>
        </member>
        <member name="T:SpiceSharp.Validation.IRule">
            <summary>
            A rule that can be validated.
            </summary>
        </member>
        <member name="P:SpiceSharp.Validation.IRule.ViolationCount">
            <summary>
            Gets the number of violations of this rule.
            </summary>
            <value>
            The violation count.
            </value>
        </member>
        <member name="P:SpiceSharp.Validation.IRule.Violations">
            <summary>
            Gets the rule violations.
            </summary>
            <value>
            The rule violations.
            </value>
        </member>
        <member name="M:SpiceSharp.Validation.IRule.Reset">
            <summary>
            Resets the rule.
            </summary>
        </member>
        <member name="T:SpiceSharp.Validation.IRules">
            <summary>
            Describes a rule provider.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSets.IParameterSetCollection" />
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
        </member>
        <member name="P:SpiceSharp.Validation.IRules.ViolationCount">
            <summary>
            Gets the number of rule violations.
            </summary>
            <value>
            The number of rule violations.
            </value>
        </member>
        <member name="P:SpiceSharp.Validation.IRules.Violations">
            <summary>
            Gets the violated rules.
            </summary>
            <value>
            The violated rules.
            </value>
        </member>
        <member name="M:SpiceSharp.Validation.IRules.Reset">
            <summary>
            Resets all the rules.
            </summary>
        </member>
        <member name="M:SpiceSharp.Validation.IRules.GetRules``1">
            <summary>
            Gets all rules of the specified type.
            </summary>
            <typeparam name="R">The rule type.</typeparam>
            <returns>
            The rules of the specified type.
            </returns>
        </member>
        <member name="T:SpiceSharp.Validation.IRuleSubject">
            <summary>
            Describes a class that applies to a certain rule.
            </summary>
        </member>
        <member name="M:SpiceSharp.Validation.IRuleSubject.Apply(SpiceSharp.Validation.IRules)">
            <summary>
            Applies the subject to any rules in the validation provider.
            </summary>
            <param name="rules">The provider.</param>
        </member>
        <member name="T:SpiceSharp.Validation.IRuleViolation">
            <summary>
            Describes a rule violation.
            </summary>
        </member>
        <member name="P:SpiceSharp.Validation.IRuleViolation.Rule">
            <summary>
            Gets the rule that was violated.
            </summary>
            <value>
            The violated rule.
            </value>
        </member>
        <member name="P:SpiceSharp.Validation.IRuleViolation.Subject">
            <summary>
            Gets the subject that caused the rule violation (if any).
            </summary>
            <value>
            The subject that caused the violation.
            </value>
        </member>
        <member name="F:ThisAssembly.Git.IsDirty">
            <summary>
            Gets whether the current repository is dirty.
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirtyString">
            <summary>
            => @"false"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.RepositoryUrl">
            <summary>
            => @"https://github.com/SpiceSharp/SpiceSharp"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.Branch">
            <summary>
            => @"HEAD"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.Commit">
            <summary>
            => @"34484fa"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.Sha">
            <summary>
            => @"34484fa6c66d636f6983626a0a770f75c0484553"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.CommitDate">
            <summary>
            => @"2024-10-11T11:37:17+02:00"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.Commits">
            <summary>
            => @"0"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.Tag">
            <summary>
            => @"v3.2.3"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseTag">
            <summary>
            => @"v3.2.3"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Major">
            <summary>
            => @"3"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Minor">
            <summary>
            => @"2"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Patch">
            <summary>
            => @"3"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Major">
            <summary>
            => @"3"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Minor">
            <summary>
            => @"2"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Patch">
            <summary>
            => @"3"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Label">
            <summary>
            => @""
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.DashLabel">
            <summary>
            => @""
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Source">
            <summary>
            => @"Tag"
            </summary>
        </member>
    </members>
</doc>
