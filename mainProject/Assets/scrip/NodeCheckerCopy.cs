using SpiceSharp.Components;
using SpiceSharp.Simulations;
using System;
using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.Rendering.Universal;
using UnityEngine.XR.Interaction.Toolkit.Samples.StarterAssets;
using Object = UnityEngine.Object;

namespace SpiceSharp
{

    public class NodeCheckerCopy : MonoBehaviour
    {
        //remember this objects position as well as the 4 adjacent objects positions as well as the object that collided with this object
        private Vector3 thisObjectPosition;
        private Vector3[] adjacentObjectPositions = new Vector3[4];
        private GameObject mostRecentCollidingObject;
        private Circuit currentCircuit;

        // Start is called before the first frame update
        void Start()
        {
            thisObjectPosition = transform.position;
            StoreAdjacentObjectPositions();

        }

        // Update is called once per frame
        void Update()
        {

        }
        
        private void StoreAdjacentObjectPositions()
        {
            adjacentObjectPositions[0] = transform.position + Vector3.forward;  // Front
            adjacentObjectPositions[1] = transform.position + Vector3.back;     // Back
            adjacentObjectPositions[2] = transform.position + Vector3.left;     // Left
            adjacentObjectPositions[3] = transform.position + Vector3.right;    // Right
        }
        
        /*
        If this object and one adjacent object that have the tag of "Node" has been collided with by another object then change the color of all involved objects to green until the collision stops.
        If this object and one adjacent object that have the tag of "Node" has been collided with by another object and this object has Component tag, then add the component to the currentcircut which is stored on the player object.
        Check the colliding object for the tag "VoltageSource" and if it has the tag then create a new voltage source with the name being the object's name, the first node's value being the current node's name, the second node's value being the adjacent node's name, and the value being the component's Voltage value (if it has one).
        Check the colliding object for the tag "Resistor" and if it has the tag then create a new resistor with the name being the object's name, the first node's value being the current node's name, the second node's value being the adjacent node's name, and the value being the component's Resistance value (if it has one).
        */

        //generated by copilot so idk if it works
        private void OnCollisionEnter(Collision collision)
        {
            mostRecentCollidingObject = collision.gameObject;

            if (mostRecentCollidingObject.CompareTag("Node"))
            {
                foreach (Vector3 adjacentPosition in adjacentObjectPositions)
                {
                    Collider[] colliders = Physics.OverlapSphere(adjacentPosition, 0.1f);
                    foreach (Collider collider in colliders)
                    {
                        if (collider.CompareTag("Node"))
                        {
                            ChangeColor(gameObject, Color.green);
                            ChangeColor(collider.gameObject, Color.green);

                            if (gameObject.CompareTag("Component"))
                            {
                                AddComponentToCircuit(collider.gameObject);
                            }
                        }
                    }
                }
            }
        }

        private void OnCollisionExit(Collision collision)
        {
            if (collision.gameObject == mostRecentCollidingObject)
            {
                ChangeColor(gameObject, Color.white);
                foreach (Vector3 adjacentPosition in adjacentObjectPositions)
                {
                    Collider[] colliders = Physics.OverlapSphere(adjacentPosition, 0.1f);
                    foreach (Collider collider in colliders)
                    {
                        if (collider.CompareTag("Node"))
                        {
                            ChangeColor(collider.gameObject, Color.white);
                        }
                    }
                }
            }
        }

        private void ChangeColor(GameObject obj, Color color)
        {
            Renderer renderer = obj.GetComponent<Renderer>();
            if (renderer != null)
            {
                renderer.material.color = color;
            }
        }

        private void AddComponentToCircuit(GameObject adjacentNode)
        {
            string currentNodeName = gameObject.name;
            string adjacentNodeName = adjacentNode.name;

            if (mostRecentCollidingObject.CompareTag("VoltageSource"))
            {
                VoltageSource voltageSource = mostRecentCollidingObject.GetComponent<VoltageSource>();
                if (voltageSource != null)
                {
                    VoltageSource newVoltageSource = new VoltageSource(mostRecentCollidingObject.name, currentNodeName, adjacentNodeName, 5.0f);
                    currentCircuit.Add(newVoltageSource);
                }
            }
            else if (mostRecentCollidingObject.CompareTag("Resistor"))
            {
                ResistorScript resistor = mostRecentCollidingObject.GetComponent<ResistorScript>();
                if (resistor != null)
                {
                    Components.Resistor newResistor = new Components.Resistor(mostRecentCollidingObject.name, currentNodeName, adjacentNodeName, 5.0f);
                    currentCircuit.Add(newResistor);
                }
            }
        }
    




























        // I have an idea
        public void IHaveAnIdea()
        {
            // I have an idea
            Debug.Log("I have an idea");
        }

    }
}